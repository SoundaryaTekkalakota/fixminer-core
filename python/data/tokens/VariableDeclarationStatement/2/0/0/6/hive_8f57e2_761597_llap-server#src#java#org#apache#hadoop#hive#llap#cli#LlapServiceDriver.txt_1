UPD VariableDeclarationStatement@@NamedCallable<Void> copyAuxJars=new NamedCallable<Void>("copyAuxJars"){
  @Override public Void call() throws Exception {
    for (    String className : DEFAULT_AUX_CLASSES) {
      localizeJarForClass(lfs,libDir,className,false);
    }
    Collection<String> codecs=conf.getStringCollection("io.compression.codecs");
    if (codecs != null) {
      for (      String codecClassName : codecs) {
        localizeJarForClass(lfs,libDir,codecClassName,false);
      }
    }
    if (options.getIsHBase()) {
      try {
        localizeJarForClass(lfs,libDir,HBASE_SERDE_CLASS,true);
        Job fakeJob=new Job(new JobConf());
        TableMapReduceUtil.addDependencyJars(fakeJob);
        Collection<String> hbaseJars=fakeJob.getConfiguration().getStringCollection("tmpjars");
        for (        String jarPath : hbaseJars) {
          if (!jarPath.isEmpty()) {
            lfs.copyFromLocalFile(new Path(jarPath),libDir);
          }
        }
      }
 catch (      Throwable t) {
        String err="Failed to add HBase jars. Use --auxhbase=false to avoid localizing them";
        LOG.error(err);
        System.err.println(err);
        throw new RuntimeException(t);
      }
    }
    HashSet<String> auxJars=new HashSet<>();
    if (options.getIsHiveAux()) {
      addAuxJarsToSet(auxJars,conf.getAuxJars(),",");
      addAuxJarsToSet(auxJars,System.getenv("HIVE_AUX_JARS_PATH"),":");
      LOG.info("Adding the following aux jars from the environment and configs: " + auxJars);
    }
    addAuxJarsToSet(auxJars,options.getAuxJars(),",");
    for (    String jarPath : auxJars) {
      lfs.copyFromLocalFile(new Path(jarPath),libDir);
    }
    return null;
  }
  private void addAuxJarsToSet(  HashSet<String> auxJarSet,  String auxJars,  String delimiter){
    if (auxJars != null && !auxJars.isEmpty()) {
      String[] jarPaths=auxJars.split(delimiter);
      for (      String jarPath : jarPaths) {
        if (!jarPath.isEmpty()) {
          auxJarSet.add(jarPath);
        }
      }
    }
  }
}
; @TO@ NamedCallable<Void> copyAuxJars=new NamedCallable<Void>("copyAuxJars"){
  @Override public Void call() throws Exception {
    for (    String className : DEFAULT_AUX_CLASSES) {
      localizeJarForClass(lfs,libDir,className,false);
    }
    Collection<String> codecs=conf.getStringCollection("io.compression.codecs");
    if (codecs != null) {
      for (      String codecClassName : codecs) {
        localizeJarForClass(lfs,libDir,codecClassName,false);
      }
    }
    for (    String className : getDbSpecificJdbcJars()) {
      localizeJarForClass(lfs,libDir,className,false);
    }
    if (options.getIsHBase()) {
      try {
        localizeJarForClass(lfs,libDir,HBASE_SERDE_CLASS,true);
        Job fakeJob=new Job(new JobConf());
        TableMapReduceUtil.addDependencyJars(fakeJob);
        Collection<String> hbaseJars=fakeJob.getConfiguration().getStringCollection("tmpjars");
        for (        String jarPath : hbaseJars) {
          if (!jarPath.isEmpty()) {
            lfs.copyFromLocalFile(new Path(jarPath),libDir);
          }
        }
      }
 catch (      Throwable t) {
        String err="Failed to add HBase jars. Use --auxhbase=false to avoid localizing them";
        LOG.error(err);
        System.err.println(err);
        throw new RuntimeException(t);
      }
    }
    HashSet<String> auxJars=new HashSet<>();
    if (options.getIsHiveAux()) {
      addAuxJarsToSet(auxJars,conf.getAuxJars(),",");
      addAuxJarsToSet(auxJars,System.getenv("HIVE_AUX_JARS_PATH"),":");
      LOG.info("Adding the following aux jars from the environment and configs: " + auxJars);
    }
    addAuxJarsToSet(auxJars,options.getAuxJars(),",");
    for (    String jarPath : auxJars) {
      lfs.copyFromLocalFile(new Path(jarPath),libDir);
    }
    return null;
  }
  private void addAuxJarsToSet(  HashSet<String> auxJarSet,  String auxJars,  String delimiter){
    if (auxJars != null && !auxJars.isEmpty()) {
      String[] jarPaths=auxJars.split(delimiter);
      for (      String jarPath : jarPaths) {
        if (!jarPath.isEmpty()) {
          auxJarSet.add(jarPath);
        }
      }
    }
  }
}
; @AT@ 17997 @LENGTH@ 2728
---UPD VariableDeclarationFragment@@copyAuxJars=new NamedCallable<Void>("copyAuxJars"){
  @Override public Void call() throws Exception {
    for (    String className : DEFAULT_AUX_CLASSES) {
      localizeJarForClass(lfs,libDir,className,false);
    }
    Collection<String> codecs=conf.getStringCollection("io.compression.codecs");
    if (codecs != null) {
      for (      String codecClassName : codecs) {
        localizeJarForClass(lfs,libDir,codecClassName,false);
      }
    }
    if (options.getIsHBase()) {
      try {
        localizeJarForClass(lfs,libDir,HBASE_SERDE_CLASS,true);
        Job fakeJob=new Job(new JobConf());
        TableMapReduceUtil.addDependencyJars(fakeJob);
        Collection<String> hbaseJars=fakeJob.getConfiguration().getStringCollection("tmpjars");
        for (        String jarPath : hbaseJars) {
          if (!jarPath.isEmpty()) {
            lfs.copyFromLocalFile(new Path(jarPath),libDir);
          }
        }
      }
 catch (      Throwable t) {
        String err="Failed to add HBase jars. Use --auxhbase=false to avoid localizing them";
        LOG.error(err);
        System.err.println(err);
        throw new RuntimeException(t);
      }
    }
    HashSet<String> auxJars=new HashSet<>();
    if (options.getIsHiveAux()) {
      addAuxJarsToSet(auxJars,conf.getAuxJars(),",");
      addAuxJarsToSet(auxJars,System.getenv("HIVE_AUX_JARS_PATH"),":");
      LOG.info("Adding the following aux jars from the environment and configs: " + auxJars);
    }
    addAuxJarsToSet(auxJars,options.getAuxJars(),",");
    for (    String jarPath : auxJars) {
      lfs.copyFromLocalFile(new Path(jarPath),libDir);
    }
    return null;
  }
  private void addAuxJarsToSet(  HashSet<String> auxJarSet,  String auxJars,  String delimiter){
    if (auxJars != null && !auxJars.isEmpty()) {
      String[] jarPaths=auxJars.split(delimiter);
      for (      String jarPath : jarPaths) {
        if (!jarPath.isEmpty()) {
          auxJarSet.add(jarPath);
        }
      }
    }
  }
}
 @TO@ copyAuxJars=new NamedCallable<Void>("copyAuxJars"){
  @Override public Void call() throws Exception {
    for (    String className : DEFAULT_AUX_CLASSES) {
      localizeJarForClass(lfs,libDir,className,false);
    }
    Collection<String> codecs=conf.getStringCollection("io.compression.codecs");
    if (codecs != null) {
      for (      String codecClassName : codecs) {
        localizeJarForClass(lfs,libDir,codecClassName,false);
      }
    }
    for (    String className : getDbSpecificJdbcJars()) {
      localizeJarForClass(lfs,libDir,className,false);
    }
    if (options.getIsHBase()) {
      try {
        localizeJarForClass(lfs,libDir,HBASE_SERDE_CLASS,true);
        Job fakeJob=new Job(new JobConf());
        TableMapReduceUtil.addDependencyJars(fakeJob);
        Collection<String> hbaseJars=fakeJob.getConfiguration().getStringCollection("tmpjars");
        for (        String jarPath : hbaseJars) {
          if (!jarPath.isEmpty()) {
            lfs.copyFromLocalFile(new Path(jarPath),libDir);
          }
        }
      }
 catch (      Throwable t) {
        String err="Failed to add HBase jars. Use --auxhbase=false to avoid localizing them";
        LOG.error(err);
        System.err.println(err);
        throw new RuntimeException(t);
      }
    }
    HashSet<String> auxJars=new HashSet<>();
    if (options.getIsHiveAux()) {
      addAuxJarsToSet(auxJars,conf.getAuxJars(),",");
      addAuxJarsToSet(auxJars,System.getenv("HIVE_AUX_JARS_PATH"),":");
      LOG.info("Adding the following aux jars from the environment and configs: " + auxJars);
    }
    addAuxJarsToSet(auxJars,options.getAuxJars(),",");
    for (    String jarPath : auxJars) {
      lfs.copyFromLocalFile(new Path(jarPath),libDir);
    }
    return null;
  }
  private void addAuxJarsToSet(  HashSet<String> auxJarSet,  String auxJars,  String delimiter){
    if (auxJars != null && !auxJars.isEmpty()) {
      String[] jarPaths=auxJars.split(delimiter);
      for (      String jarPath : jarPaths) {
        if (!jarPath.isEmpty()) {
          auxJarSet.add(jarPath);
        }
      }
    }
  }
}
 @AT@ 18017 @LENGTH@ 2707

