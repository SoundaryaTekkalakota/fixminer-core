UPD VariableDeclarationStatement@@AbstractAddStepHandler add=new BaseAddHandler(POLICY_RUNTIME_CAPABILITY,attributes){
  @Override protected void performRuntime(  OperationContext context,  ModelNode operation,  ModelNode model) throws OperationFailedException {
    String defaultPolicy=context.getCurrentAddress().getLastElement().getValue();
    ServiceName serviceName=POLICY_RUNTIME_CAPABILITY.getCapabilityServiceName(Policy.class);
    InjectedValue<Supplier<Policy>> policyProviderInjector=new InjectedValue<>();
    ServiceTarget serviceTarget=context.getServiceTarget();
    ServiceBuilder<Policy> serviceBuilder=serviceTarget.addService(serviceName,createPolicyService(policyProviderInjector));
    Supplier<Policy> policySupplier=getPolicyProvider(context,model,defaultPolicy,serviceBuilder);
    policyProviderInjector.setValue(() -> policySupplier);
    serviceBuilder.setInitialMode(Mode.ACTIVE).install();
    if (!context.isBooting()) {
      context.reloadRequired();
    }
  }
  private Service<Policy> createPolicyService(  InjectedValue<Supplier<Policy>> injector){
    return new Service<Policy>(){
      volatile Policy delegated;
      volatile Policy policy;
      @Override public void start(      StartContext context) throws StartException {
        delegated=getPolicy();
        policy=injector.getValue().get();
        try {
          setPolicy((Policy)policy);
          policy.refresh();
        }
 catch (        Exception cause) {
          setPolicy((Policy)delegated);
          throw ElytronSubsystemMessages.ROOT_LOGGER.failedToSetPolicy(policy,cause);
        }
      }
      @Override public void stop(      StopContext context){
        setPolicy((Policy)delegated);
      }
      @Override public Policy getValue() throws IllegalStateException, IllegalArgumentException {
        return policy;
      }
      private void setPolicy(      Policy policy){
        if (WildFlySecurityManager.isChecking()) {
          AccessController.doPrivileged(setPolicyAction(policy));
        }
 else {
          setPolicyAction(policy).run();
        }
      }
      private PrivilegedAction<Void> setPolicyAction(      Policy policy){
        return (PrivilegedAction<Void>)() -> {
          Policy.setPolicy(policy);
          return null;
        }
;
      }
      private Policy getPolicy(){
        if (WildFlySecurityManager.isChecking()) {
          return AccessController.doPrivileged(getPolicyAction());
        }
 else {
          return getPolicyAction().run();
        }
      }
      private PrivilegedAction<Policy> getPolicyAction(){
        return (PrivilegedAction<Policy>)Policy::getPolicy;
      }
    }
;
  }
}
; @TO@ AbstractAddStepHandler add=new BaseAddHandler(POLICY_RUNTIME_CAPABILITY,attributes){
  @Override protected void performRuntime(  OperationContext context,  ModelNode operation,  ModelNode model) throws OperationFailedException {
    String defaultPolicy=ElytronExtension.asStringIfDefined(context,DEFAULT_POLICY,model);
    if (defaultPolicy == null) {
      defaultPolicy=context.getCurrentAddressValue();
    }
    ServiceName serviceName=POLICY_RUNTIME_CAPABILITY.getCapabilityServiceName(Policy.class);
    InjectedValue<Supplier<Policy>> policyProviderInjector=new InjectedValue<>();
    ServiceTarget serviceTarget=context.getServiceTarget();
    ServiceBuilder<Policy> serviceBuilder=serviceTarget.addService(serviceName,createPolicyService(policyProviderInjector));
    Supplier<Policy> policySupplier=getPolicyProvider(context,model,defaultPolicy,serviceBuilder);
    policyProviderInjector.setValue(() -> policySupplier);
    serviceBuilder.setInitialMode(Mode.ACTIVE).install();
    if (!context.isBooting()) {
      context.reloadRequired();
    }
  }
  private Service<Policy> createPolicyService(  InjectedValue<Supplier<Policy>> injector){
    return new Service<Policy>(){
      volatile Policy delegated;
      volatile Policy policy;
      @Override public void start(      StartContext context) throws StartException {
        delegated=getPolicy();
        policy=injector.getValue().get();
        try {
          setPolicy((Policy)policy);
          policy.refresh();
        }
 catch (        Exception cause) {
          setPolicy((Policy)delegated);
          throw ElytronSubsystemMessages.ROOT_LOGGER.failedToSetPolicy(policy,cause);
        }
      }
      @Override public void stop(      StopContext context){
        setPolicy((Policy)delegated);
      }
      @Override public Policy getValue() throws IllegalStateException, IllegalArgumentException {
        return policy;
      }
      private void setPolicy(      Policy policy){
        if (WildFlySecurityManager.isChecking()) {
          AccessController.doPrivileged(setPolicyAction(policy));
        }
 else {
          setPolicyAction(policy).run();
        }
      }
      private PrivilegedAction<Void> setPolicyAction(      Policy policy){
        return (PrivilegedAction<Void>)() -> {
          Policy.setPolicy(policy);
          return null;
        }
;
      }
      private Policy getPolicy(){
        if (WildFlySecurityManager.isChecking()) {
          return AccessController.doPrivileged(getPolicyAction());
        }
 else {
          return getPolicyAction().run();
        }
      }
      private PrivilegedAction<Policy> getPolicyAction(){
        return (PrivilegedAction<Policy>)Policy::getPolicy;
      }
    }
;
  }
}
; @AT@ 7417 @LENGTH@ 3573
---UPD VariableDeclarationFragment@@add=new BaseAddHandler(POLICY_RUNTIME_CAPABILITY,attributes){
  @Override protected void performRuntime(  OperationContext context,  ModelNode operation,  ModelNode model) throws OperationFailedException {
    String defaultPolicy=context.getCurrentAddress().getLastElement().getValue();
    ServiceName serviceName=POLICY_RUNTIME_CAPABILITY.getCapabilityServiceName(Policy.class);
    InjectedValue<Supplier<Policy>> policyProviderInjector=new InjectedValue<>();
    ServiceTarget serviceTarget=context.getServiceTarget();
    ServiceBuilder<Policy> serviceBuilder=serviceTarget.addService(serviceName,createPolicyService(policyProviderInjector));
    Supplier<Policy> policySupplier=getPolicyProvider(context,model,defaultPolicy,serviceBuilder);
    policyProviderInjector.setValue(() -> policySupplier);
    serviceBuilder.setInitialMode(Mode.ACTIVE).install();
    if (!context.isBooting()) {
      context.reloadRequired();
    }
  }
  private Service<Policy> createPolicyService(  InjectedValue<Supplier<Policy>> injector){
    return new Service<Policy>(){
      volatile Policy delegated;
      volatile Policy policy;
      @Override public void start(      StartContext context) throws StartException {
        delegated=getPolicy();
        policy=injector.getValue().get();
        try {
          setPolicy((Policy)policy);
          policy.refresh();
        }
 catch (        Exception cause) {
          setPolicy((Policy)delegated);
          throw ElytronSubsystemMessages.ROOT_LOGGER.failedToSetPolicy(policy,cause);
        }
      }
      @Override public void stop(      StopContext context){
        setPolicy((Policy)delegated);
      }
      @Override public Policy getValue() throws IllegalStateException, IllegalArgumentException {
        return policy;
      }
      private void setPolicy(      Policy policy){
        if (WildFlySecurityManager.isChecking()) {
          AccessController.doPrivileged(setPolicyAction(policy));
        }
 else {
          setPolicyAction(policy).run();
        }
      }
      private PrivilegedAction<Void> setPolicyAction(      Policy policy){
        return (PrivilegedAction<Void>)() -> {
          Policy.setPolicy(policy);
          return null;
        }
;
      }
      private Policy getPolicy(){
        if (WildFlySecurityManager.isChecking()) {
          return AccessController.doPrivileged(getPolicyAction());
        }
 else {
          return getPolicyAction().run();
        }
      }
      private PrivilegedAction<Policy> getPolicyAction(){
        return (PrivilegedAction<Policy>)Policy::getPolicy;
      }
    }
;
  }
}
 @TO@ add=new BaseAddHandler(POLICY_RUNTIME_CAPABILITY,attributes){
  @Override protected void performRuntime(  OperationContext context,  ModelNode operation,  ModelNode model) throws OperationFailedException {
    String defaultPolicy=ElytronExtension.asStringIfDefined(context,DEFAULT_POLICY,model);
    if (defaultPolicy == null) {
      defaultPolicy=context.getCurrentAddressValue();
    }
    ServiceName serviceName=POLICY_RUNTIME_CAPABILITY.getCapabilityServiceName(Policy.class);
    InjectedValue<Supplier<Policy>> policyProviderInjector=new InjectedValue<>();
    ServiceTarget serviceTarget=context.getServiceTarget();
    ServiceBuilder<Policy> serviceBuilder=serviceTarget.addService(serviceName,createPolicyService(policyProviderInjector));
    Supplier<Policy> policySupplier=getPolicyProvider(context,model,defaultPolicy,serviceBuilder);
    policyProviderInjector.setValue(() -> policySupplier);
    serviceBuilder.setInitialMode(Mode.ACTIVE).install();
    if (!context.isBooting()) {
      context.reloadRequired();
    }
  }
  private Service<Policy> createPolicyService(  InjectedValue<Supplier<Policy>> injector){
    return new Service<Policy>(){
      volatile Policy delegated;
      volatile Policy policy;
      @Override public void start(      StartContext context) throws StartException {
        delegated=getPolicy();
        policy=injector.getValue().get();
        try {
          setPolicy((Policy)policy);
          policy.refresh();
        }
 catch (        Exception cause) {
          setPolicy((Policy)delegated);
          throw ElytronSubsystemMessages.ROOT_LOGGER.failedToSetPolicy(policy,cause);
        }
      }
      @Override public void stop(      StopContext context){
        setPolicy((Policy)delegated);
      }
      @Override public Policy getValue() throws IllegalStateException, IllegalArgumentException {
        return policy;
      }
      private void setPolicy(      Policy policy){
        if (WildFlySecurityManager.isChecking()) {
          AccessController.doPrivileged(setPolicyAction(policy));
        }
 else {
          setPolicyAction(policy).run();
        }
      }
      private PrivilegedAction<Void> setPolicyAction(      Policy policy){
        return (PrivilegedAction<Void>)() -> {
          Policy.setPolicy(policy);
          return null;
        }
;
      }
      private Policy getPolicy(){
        if (WildFlySecurityManager.isChecking()) {
          return AccessController.doPrivileged(getPolicyAction());
        }
 else {
          return getPolicyAction().run();
        }
      }
      private PrivilegedAction<Policy> getPolicyAction(){
        return (PrivilegedAction<Policy>)Policy::getPolicy;
      }
    }
;
  }
}
 @AT@ 7440 @LENGTH@ 3549

