UPD VariableDeclarationStatement@@RetryCallback<O> retryCallback=new RetryCallback<O>(){
  @Override public O doWithRetry(  RetryContext context) throws Exception {
    O output=null;
    try {
      count.incrementAndGet();
      O cached=(cacheIterator != null && cacheIterator.hasNext()) ? cacheIterator.next() : null;
      if (cached != null && !processorTransactional) {
        output=cached;
      }
 else {
        output=doProcess(item);
        if (!processorTransactional && !data.scanning()) {
          cache.add(output);
        }
      }
    }
 catch (    Exception e) {
      if (rollbackClassifier.classify(e)) {
        throw e;
      }
 else       if (shouldSkip(itemProcessSkipPolicy,e,contribution.getStepSkipCount())) {
        contribution.incrementProcessSkipCount();
        logger.debug("Skipping after failed process with no rollback",e);
        callProcessSkipListener(item,e);
      }
 else {
        throw new NonSkippableProcessException("Non-skippable exception in processor.  Make sure any exceptions that do not cause a rollback are skippable.",e);
      }
    }
    if (output == null) {
      iterator.remove();
      data.incrementFilterCount();
    }
    return output;
  }
}
; @TO@ RetryCallback<O> retryCallback=new RetryCallback<O>(){
  @Override public O doWithRetry(  RetryContext context) throws Exception {
    O output=null;
    try {
      count.incrementAndGet();
      O cached=(cacheIterator != null && cacheIterator.hasNext()) ? cacheIterator.next() : null;
      if (cached != null && !processorTransactional) {
        output=cached;
      }
 else {
        output=doProcess(item);
        if (output == null) {
          data.incrementFilterCount();
        }
 else         if (!processorTransactional && !data.scanning()) {
          cache.add(output);
        }
      }
    }
 catch (    Exception e) {
      if (rollbackClassifier.classify(e)) {
        throw e;
      }
 else       if (shouldSkip(itemProcessSkipPolicy,e,contribution.getStepSkipCount())) {
        contribution.incrementProcessSkipCount();
        logger.debug("Skipping after failed process with no rollback",e);
        callProcessSkipListener(item,e);
      }
 else {
        throw new NonSkippableProcessException("Non-skippable exception in processor.  Make sure any exceptions that do not cause a rollback are skippable.",e);
      }
    }
    if (output == null) {
      iterator.remove();
    }
    return output;
  }
}
; @AT@ 7195 @LENGTH@ 1706
---UPD VariableDeclarationFragment@@retryCallback=new RetryCallback<O>(){
  @Override public O doWithRetry(  RetryContext context) throws Exception {
    O output=null;
    try {
      count.incrementAndGet();
      O cached=(cacheIterator != null && cacheIterator.hasNext()) ? cacheIterator.next() : null;
      if (cached != null && !processorTransactional) {
        output=cached;
      }
 else {
        output=doProcess(item);
        if (!processorTransactional && !data.scanning()) {
          cache.add(output);
        }
      }
    }
 catch (    Exception e) {
      if (rollbackClassifier.classify(e)) {
        throw e;
      }
 else       if (shouldSkip(itemProcessSkipPolicy,e,contribution.getStepSkipCount())) {
        contribution.incrementProcessSkipCount();
        logger.debug("Skipping after failed process with no rollback",e);
        callProcessSkipListener(item,e);
      }
 else {
        throw new NonSkippableProcessException("Non-skippable exception in processor.  Make sure any exceptions that do not cause a rollback are skippable.",e);
      }
    }
    if (output == null) {
      iterator.remove();
      data.incrementFilterCount();
    }
    return output;
  }
}
 @TO@ retryCallback=new RetryCallback<O>(){
  @Override public O doWithRetry(  RetryContext context) throws Exception {
    O output=null;
    try {
      count.incrementAndGet();
      O cached=(cacheIterator != null && cacheIterator.hasNext()) ? cacheIterator.next() : null;
      if (cached != null && !processorTransactional) {
        output=cached;
      }
 else {
        output=doProcess(item);
        if (output == null) {
          data.incrementFilterCount();
        }
 else         if (!processorTransactional && !data.scanning()) {
          cache.add(output);
        }
      }
    }
 catch (    Exception e) {
      if (rollbackClassifier.classify(e)) {
        throw e;
      }
 else       if (shouldSkip(itemProcessSkipPolicy,e,contribution.getStepSkipCount())) {
        contribution.incrementProcessSkipCount();
        logger.debug("Skipping after failed process with no rollback",e);
        callProcessSkipListener(item,e);
      }
 else {
        throw new NonSkippableProcessException("Non-skippable exception in processor.  Make sure any exceptions that do not cause a rollback are skippable.",e);
      }
    }
    if (output == null) {
      iterator.remove();
    }
    return output;
  }
}
 @AT@ 7212 @LENGTH@ 1688

