UPD VariableDeclarationStatement@@AbstractAddStepHandler add=new TrivialAddHandler<HttpAuthenticationFactory>(HttpAuthenticationFactory.class,attributes,HTTP_AUTHENTICATION_FACTORY_RUNTIME_CAPABILITY){
  @Override protected ValueSupplier<HttpAuthenticationFactory> getValueSupplier(  ServiceBuilder<HttpAuthenticationFactory> serviceBuilder,  OperationContext context,  ModelNode model) throws OperationFailedException {
    final InjectedValue<SecurityDomain> securityDomainInjector=new InjectedValue<SecurityDomain>();
    final InjectedValue<HttpServerAuthenticationMechanismFactory> mechanismFactoryInjector=new InjectedValue<HttpServerAuthenticationMechanismFactory>();
    String securityDomain=securityDomainAttribute.resolveModelAttribute(context,model).asString();
    serviceBuilder.addDependency(context.getCapabilityServiceName(buildDynamicCapabilityName(SECURITY_DOMAIN_CAPABILITY,securityDomain),SecurityDomain.class),SecurityDomain.class,securityDomainInjector);
    String httpServerFactory=HTTP_SERVER_MECHANISM_FACTORY.resolveModelAttribute(context,model).asString();
    serviceBuilder.addDependency(context.getCapabilityServiceName(buildDynamicCapabilityName(HTTP_SERVER_MECHANISM_FACTORY_CAPABILITY,httpServerFactory),HttpServerAuthenticationMechanismFactory.class),HttpServerAuthenticationMechanismFactory.class,mechanismFactoryInjector);
    final List<ResolvedMechanismConfiguration> resolvedMechanismConfigurations=getResolvedMechanismConfiguration(mechanismConfigurationAttribute,serviceBuilder,context,model);
    return () -> {
      HttpServerAuthenticationMechanismFactory injectedHttpServerFactory=mechanismFactoryInjector.getValue();
      HttpAuthenticationFactory.Builder builder=HttpAuthenticationFactory.builder().setSecurityDomain(securityDomainInjector.getValue()).setFactory(injectedHttpServerFactory);
      buildMechanismConfiguration(resolvedMechanismConfigurations,builder);
      return builder.build();
    }
;
  }
}
; @TO@ AbstractAddStepHandler add=new TrivialAddHandler<HttpAuthenticationFactory>(HttpAuthenticationFactory.class,attributes,HTTP_AUTHENTICATION_FACTORY_RUNTIME_CAPABILITY){
  @Override protected ValueSupplier<HttpAuthenticationFactory> getValueSupplier(  ServiceBuilder<HttpAuthenticationFactory> serviceBuilder,  OperationContext context,  ModelNode model) throws OperationFailedException {
    final InjectedValue<SecurityDomain> securityDomainInjector=new InjectedValue<SecurityDomain>();
    final InjectedValue<HttpServerAuthenticationMechanismFactory> mechanismFactoryInjector=new InjectedValue<HttpServerAuthenticationMechanismFactory>();
    String securityDomain=securityDomainAttribute.resolveModelAttribute(context,model).asString();
    serviceBuilder.addDependency(context.getCapabilityServiceName(buildDynamicCapabilityName(SECURITY_DOMAIN_CAPABILITY,securityDomain),SecurityDomain.class),SecurityDomain.class,securityDomainInjector);
    String httpServerFactory=HTTP_SERVER_MECHANISM_FACTORY.resolveModelAttribute(context,model).asString();
    serviceBuilder.addDependency(context.getCapabilityServiceName(buildDynamicCapabilityName(HTTP_SERVER_MECHANISM_FACTORY_CAPABILITY,httpServerFactory),HttpServerAuthenticationMechanismFactory.class),HttpServerAuthenticationMechanismFactory.class,mechanismFactoryInjector);
    final Set<String> supportedMechanisms=getConfiguredMechanismNames(mechanismConfigurationAttribute,context,model);
    final List<ResolvedMechanismConfiguration> resolvedMechanismConfigurations=getResolvedMechanismConfiguration(mechanismConfigurationAttribute,serviceBuilder,context,model);
    return () -> {
      HttpServerAuthenticationMechanismFactory serverFactory=mechanismFactoryInjector.getValue();
      if (!supportedMechanisms.isEmpty()) {
        serverFactory=new FilterServerMechanismFactory(serverFactory,true,supportedMechanisms);
      }
      HttpAuthenticationFactory.Builder builder=HttpAuthenticationFactory.builder().setSecurityDomain(securityDomainInjector.getValue()).setFactory(serverFactory);
      buildMechanismConfiguration(resolvedMechanismConfigurations,builder);
      return builder.build();
    }
;
  }
}
; @AT@ 22661 @LENGTH@ 2366
---UPD VariableDeclarationFragment@@add=new TrivialAddHandler<HttpAuthenticationFactory>(HttpAuthenticationFactory.class,attributes,HTTP_AUTHENTICATION_FACTORY_RUNTIME_CAPABILITY){
  @Override protected ValueSupplier<HttpAuthenticationFactory> getValueSupplier(  ServiceBuilder<HttpAuthenticationFactory> serviceBuilder,  OperationContext context,  ModelNode model) throws OperationFailedException {
    final InjectedValue<SecurityDomain> securityDomainInjector=new InjectedValue<SecurityDomain>();
    final InjectedValue<HttpServerAuthenticationMechanismFactory> mechanismFactoryInjector=new InjectedValue<HttpServerAuthenticationMechanismFactory>();
    String securityDomain=securityDomainAttribute.resolveModelAttribute(context,model).asString();
    serviceBuilder.addDependency(context.getCapabilityServiceName(buildDynamicCapabilityName(SECURITY_DOMAIN_CAPABILITY,securityDomain),SecurityDomain.class),SecurityDomain.class,securityDomainInjector);
    String httpServerFactory=HTTP_SERVER_MECHANISM_FACTORY.resolveModelAttribute(context,model).asString();
    serviceBuilder.addDependency(context.getCapabilityServiceName(buildDynamicCapabilityName(HTTP_SERVER_MECHANISM_FACTORY_CAPABILITY,httpServerFactory),HttpServerAuthenticationMechanismFactory.class),HttpServerAuthenticationMechanismFactory.class,mechanismFactoryInjector);
    final List<ResolvedMechanismConfiguration> resolvedMechanismConfigurations=getResolvedMechanismConfiguration(mechanismConfigurationAttribute,serviceBuilder,context,model);
    return () -> {
      HttpServerAuthenticationMechanismFactory injectedHttpServerFactory=mechanismFactoryInjector.getValue();
      HttpAuthenticationFactory.Builder builder=HttpAuthenticationFactory.builder().setSecurityDomain(securityDomainInjector.getValue()).setFactory(injectedHttpServerFactory);
      buildMechanismConfiguration(resolvedMechanismConfigurations,builder);
      return builder.build();
    }
;
  }
}
 @TO@ add=new TrivialAddHandler<HttpAuthenticationFactory>(HttpAuthenticationFactory.class,attributes,HTTP_AUTHENTICATION_FACTORY_RUNTIME_CAPABILITY){
  @Override protected ValueSupplier<HttpAuthenticationFactory> getValueSupplier(  ServiceBuilder<HttpAuthenticationFactory> serviceBuilder,  OperationContext context,  ModelNode model) throws OperationFailedException {
    final InjectedValue<SecurityDomain> securityDomainInjector=new InjectedValue<SecurityDomain>();
    final InjectedValue<HttpServerAuthenticationMechanismFactory> mechanismFactoryInjector=new InjectedValue<HttpServerAuthenticationMechanismFactory>();
    String securityDomain=securityDomainAttribute.resolveModelAttribute(context,model).asString();
    serviceBuilder.addDependency(context.getCapabilityServiceName(buildDynamicCapabilityName(SECURITY_DOMAIN_CAPABILITY,securityDomain),SecurityDomain.class),SecurityDomain.class,securityDomainInjector);
    String httpServerFactory=HTTP_SERVER_MECHANISM_FACTORY.resolveModelAttribute(context,model).asString();
    serviceBuilder.addDependency(context.getCapabilityServiceName(buildDynamicCapabilityName(HTTP_SERVER_MECHANISM_FACTORY_CAPABILITY,httpServerFactory),HttpServerAuthenticationMechanismFactory.class),HttpServerAuthenticationMechanismFactory.class,mechanismFactoryInjector);
    final Set<String> supportedMechanisms=getConfiguredMechanismNames(mechanismConfigurationAttribute,context,model);
    final List<ResolvedMechanismConfiguration> resolvedMechanismConfigurations=getResolvedMechanismConfiguration(mechanismConfigurationAttribute,serviceBuilder,context,model);
    return () -> {
      HttpServerAuthenticationMechanismFactory serverFactory=mechanismFactoryInjector.getValue();
      if (!supportedMechanisms.isEmpty()) {
        serverFactory=new FilterServerMechanismFactory(serverFactory,true,supportedMechanisms);
      }
      HttpAuthenticationFactory.Builder builder=HttpAuthenticationFactory.builder().setSecurityDomain(securityDomainInjector.getValue()).setFactory(serverFactory);
      buildMechanismConfiguration(resolvedMechanismConfigurations,builder);
      return builder.build();
    }
;
  }
}
 @AT@ 22684 @LENGTH@ 2342

