UPD VariableDeclarationStatement@@AbstractAddStepHandler add=new TrivialAddHandler<SaslAuthenticationFactory>(SaslAuthenticationFactory.class,attributes,SASL_AUTHENTICATION_FACTORY_RUNTIME_CAPABILITY){
  @Override protected ValueSupplier<SaslAuthenticationFactory> getValueSupplier(  ServiceBuilder<SaslAuthenticationFactory> serviceBuilder,  OperationContext context,  ModelNode model) throws OperationFailedException {
    String securityDomain=securityDomainAttribute.resolveModelAttribute(context,model).asString();
    String saslServerFactory=SASL_SERVER_FACTORY.resolveModelAttribute(context,model).asString();
    final InjectedValue<SecurityDomain> securityDomainInjector=new InjectedValue<SecurityDomain>();
    final InjectedValue<SaslServerFactory> saslServerFactoryInjector=new InjectedValue<SaslServerFactory>();
    serviceBuilder.addDependency(context.getCapabilityServiceName(buildDynamicCapabilityName(SECURITY_DOMAIN_CAPABILITY,securityDomain),SecurityDomain.class),SecurityDomain.class,securityDomainInjector);
    serviceBuilder.addDependency(context.getCapabilityServiceName(buildDynamicCapabilityName(SASL_SERVER_FACTORY_CAPABILITY,saslServerFactory),SaslServerFactory.class),SaslServerFactory.class,saslServerFactoryInjector);
    final Set<String> supportedMechanisms=getConfiguredMechanismNames(mechanismConfigurationAttribute,context,model);
    final List<ResolvedMechanismConfiguration> resolvedMechanismConfigurations=getResolvedMechanismConfiguration(mechanismConfigurationAttribute,serviceBuilder,context,model);
    return () -> {
      SaslServerFactory serverFactory=saslServerFactoryInjector.getValue();
      if (!supportedMechanisms.isEmpty()) {
        serverFactory=new FilterMechanismSaslServerFactory(serverFactory,true,supportedMechanisms);
      }
      if (!supportedMechanisms.isEmpty()) {
        serverFactory=new SortedMechanismSaslServerFactory(serverFactory,supportedMechanisms.toArray(new String[supportedMechanisms.size()]));
      }
 else {
        serverFactory=new SortedMechanismSaslServerFactory(serverFactory,AuthenticationFactoryDefinitions::compare);
      }
      SaslAuthenticationFactory.Builder builder=SaslAuthenticationFactory.builder().setSecurityDomain(securityDomainInjector.getValue()).setFactory(serverFactory);
      buildMechanismConfiguration(resolvedMechanismConfigurations,builder);
      return builder.build();
    }
;
  }
}
; @TO@ AbstractAddStepHandler add=new TrivialAddHandler<SaslAuthenticationFactory>(SaslAuthenticationFactory.class,attributes,SASL_AUTHENTICATION_FACTORY_RUNTIME_CAPABILITY){
  @Override protected ValueSupplier<SaslAuthenticationFactory> getValueSupplier(  ServiceBuilder<SaslAuthenticationFactory> serviceBuilder,  OperationContext context,  ModelNode model) throws OperationFailedException {
    String securityDomain=securityDomainAttribute.resolveModelAttribute(context,model).asString();
    String saslServerFactory=SASL_SERVER_FACTORY.resolveModelAttribute(context,model).asString();
    final InjectedValue<SecurityDomain> securityDomainInjector=new InjectedValue<SecurityDomain>();
    final InjectedValue<SaslServerFactory> saslServerFactoryInjector=new InjectedValue<SaslServerFactory>();
    serviceBuilder.addDependency(context.getCapabilityServiceName(buildDynamicCapabilityName(SECURITY_DOMAIN_CAPABILITY,securityDomain),SecurityDomain.class),SecurityDomain.class,securityDomainInjector);
    serviceBuilder.addDependency(context.getCapabilityServiceName(buildDynamicCapabilityName(SASL_SERVER_FACTORY_CAPABILITY,saslServerFactory),SaslServerFactory.class),SaslServerFactory.class,saslServerFactoryInjector);
    final Set<String> supportedMechanisms=getConfiguredMechanismNames(mechanismConfigurationAttribute,context,model);
    final List<ResolvedMechanismConfiguration> resolvedMechanismConfigurations=getResolvedMechanismConfiguration(mechanismConfigurationAttribute,serviceBuilder,context,model);
    return () -> {
      SaslServerFactory serverFactory=saslServerFactoryInjector.getValue();
      if (!supportedMechanisms.isEmpty()) {
        serverFactory=new FilterMechanismSaslServerFactory(serverFactory,true,supportedMechanisms);
        serverFactory=new SortedMechanismSaslServerFactory(serverFactory,supportedMechanisms.toArray(new String[supportedMechanisms.size()]));
      }
 else {
        serverFactory=new SortedMechanismSaslServerFactory(serverFactory,AuthenticationFactoryDefinitions::compareSasl);
      }
      SaslAuthenticationFactory.Builder builder=SaslAuthenticationFactory.builder().setSecurityDomain(securityDomainInjector.getValue()).setFactory(serverFactory);
      buildMechanismConfiguration(resolvedMechanismConfigurations,builder);
      return builder.build();
    }
;
  }
}
; @AT@ 28183 @LENGTH@ 3216
---UPD VariableDeclarationFragment@@add=new TrivialAddHandler<SaslAuthenticationFactory>(SaslAuthenticationFactory.class,attributes,SASL_AUTHENTICATION_FACTORY_RUNTIME_CAPABILITY){
  @Override protected ValueSupplier<SaslAuthenticationFactory> getValueSupplier(  ServiceBuilder<SaslAuthenticationFactory> serviceBuilder,  OperationContext context,  ModelNode model) throws OperationFailedException {
    String securityDomain=securityDomainAttribute.resolveModelAttribute(context,model).asString();
    String saslServerFactory=SASL_SERVER_FACTORY.resolveModelAttribute(context,model).asString();
    final InjectedValue<SecurityDomain> securityDomainInjector=new InjectedValue<SecurityDomain>();
    final InjectedValue<SaslServerFactory> saslServerFactoryInjector=new InjectedValue<SaslServerFactory>();
    serviceBuilder.addDependency(context.getCapabilityServiceName(buildDynamicCapabilityName(SECURITY_DOMAIN_CAPABILITY,securityDomain),SecurityDomain.class),SecurityDomain.class,securityDomainInjector);
    serviceBuilder.addDependency(context.getCapabilityServiceName(buildDynamicCapabilityName(SASL_SERVER_FACTORY_CAPABILITY,saslServerFactory),SaslServerFactory.class),SaslServerFactory.class,saslServerFactoryInjector);
    final Set<String> supportedMechanisms=getConfiguredMechanismNames(mechanismConfigurationAttribute,context,model);
    final List<ResolvedMechanismConfiguration> resolvedMechanismConfigurations=getResolvedMechanismConfiguration(mechanismConfigurationAttribute,serviceBuilder,context,model);
    return () -> {
      SaslServerFactory serverFactory=saslServerFactoryInjector.getValue();
      if (!supportedMechanisms.isEmpty()) {
        serverFactory=new FilterMechanismSaslServerFactory(serverFactory,true,supportedMechanisms);
      }
      if (!supportedMechanisms.isEmpty()) {
        serverFactory=new SortedMechanismSaslServerFactory(serverFactory,supportedMechanisms.toArray(new String[supportedMechanisms.size()]));
      }
 else {
        serverFactory=new SortedMechanismSaslServerFactory(serverFactory,AuthenticationFactoryDefinitions::compare);
      }
      SaslAuthenticationFactory.Builder builder=SaslAuthenticationFactory.builder().setSecurityDomain(securityDomainInjector.getValue()).setFactory(serverFactory);
      buildMechanismConfiguration(resolvedMechanismConfigurations,builder);
      return builder.build();
    }
;
  }
}
 @TO@ add=new TrivialAddHandler<SaslAuthenticationFactory>(SaslAuthenticationFactory.class,attributes,SASL_AUTHENTICATION_FACTORY_RUNTIME_CAPABILITY){
  @Override protected ValueSupplier<SaslAuthenticationFactory> getValueSupplier(  ServiceBuilder<SaslAuthenticationFactory> serviceBuilder,  OperationContext context,  ModelNode model) throws OperationFailedException {
    String securityDomain=securityDomainAttribute.resolveModelAttribute(context,model).asString();
    String saslServerFactory=SASL_SERVER_FACTORY.resolveModelAttribute(context,model).asString();
    final InjectedValue<SecurityDomain> securityDomainInjector=new InjectedValue<SecurityDomain>();
    final InjectedValue<SaslServerFactory> saslServerFactoryInjector=new InjectedValue<SaslServerFactory>();
    serviceBuilder.addDependency(context.getCapabilityServiceName(buildDynamicCapabilityName(SECURITY_DOMAIN_CAPABILITY,securityDomain),SecurityDomain.class),SecurityDomain.class,securityDomainInjector);
    serviceBuilder.addDependency(context.getCapabilityServiceName(buildDynamicCapabilityName(SASL_SERVER_FACTORY_CAPABILITY,saslServerFactory),SaslServerFactory.class),SaslServerFactory.class,saslServerFactoryInjector);
    final Set<String> supportedMechanisms=getConfiguredMechanismNames(mechanismConfigurationAttribute,context,model);
    final List<ResolvedMechanismConfiguration> resolvedMechanismConfigurations=getResolvedMechanismConfiguration(mechanismConfigurationAttribute,serviceBuilder,context,model);
    return () -> {
      SaslServerFactory serverFactory=saslServerFactoryInjector.getValue();
      if (!supportedMechanisms.isEmpty()) {
        serverFactory=new FilterMechanismSaslServerFactory(serverFactory,true,supportedMechanisms);
        serverFactory=new SortedMechanismSaslServerFactory(serverFactory,supportedMechanisms.toArray(new String[supportedMechanisms.size()]));
      }
 else {
        serverFactory=new SortedMechanismSaslServerFactory(serverFactory,AuthenticationFactoryDefinitions::compareSasl);
      }
      SaslAuthenticationFactory.Builder builder=SaslAuthenticationFactory.builder().setSecurityDomain(securityDomainInjector.getValue()).setFactory(serverFactory);
      buildMechanismConfiguration(resolvedMechanismConfigurations,builder);
      return builder.build();
    }
;
  }
}
 @AT@ 28206 @LENGTH@ 3192

