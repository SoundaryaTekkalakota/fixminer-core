UPD VariableDeclarationStatement@@NamedCallable<Void> copyLocalJars=new NamedCallable<Void>("copyLocalJars"){
  @Override public Void call() throws Exception {
    Class<?>[] dependencies=new Class<?>[]{LlapDaemonProtocolProtos.class,LlapTezUtils.class,LlapInputFormat.class,HiveInputFormat.class,SslContextFactory.class,RegistryUtils.ServiceRecordMarshal.class,com.lmax.disruptor.RingBuffer.class,org.apache.logging.log4j.Logger.class,org.apache.logging.log4j.core.Appender.class,org.apache.logging.slf4j.Log4jLogger.class,org.apache.log4j.NDC.class};
    for (    Class<?> c : dependencies) {
      Path jarPath=new Path(Utilities.jarFinderGetJar(c));
      lfs.copyFromLocalFile(jarPath,libDir);
      if (LOG.isDebugEnabled()) {
        LOG.debug("Copying " + jarPath + " to "+ libDir);
      }
    }
    return null;
  }
}
; @TO@ NamedCallable<Void> copyLocalJars=new NamedCallable<Void>("copyLocalJars"){
  @Override public Void call() throws Exception {
    Class<?>[] dependencies=new Class<?>[]{LlapDaemonProtocolProtos.class,LlapTezUtils.class,LlapInputFormat.class,HiveInputFormat.class,SslContextFactory.class,Rule.class,RegistryUtils.ServiceRecordMarshal.class,com.lmax.disruptor.RingBuffer.class,org.apache.logging.log4j.Logger.class,org.apache.logging.log4j.core.Appender.class,org.apache.logging.slf4j.Log4jLogger.class,org.apache.log4j.NDC.class};
    for (    Class<?> c : dependencies) {
      Path jarPath=new Path(Utilities.jarFinderGetJar(c));
      lfs.copyFromLocalFile(jarPath,libDir);
      if (LOG.isDebugEnabled()) {
        LOG.debug("Copying " + jarPath + " to "+ libDir);
      }
    }
    return null;
  }
}
; @AT@ 15704 @LENGTH@ 1257
---UPD VariableDeclarationFragment@@copyLocalJars=new NamedCallable<Void>("copyLocalJars"){
  @Override public Void call() throws Exception {
    Class<?>[] dependencies=new Class<?>[]{LlapDaemonProtocolProtos.class,LlapTezUtils.class,LlapInputFormat.class,HiveInputFormat.class,SslContextFactory.class,RegistryUtils.ServiceRecordMarshal.class,com.lmax.disruptor.RingBuffer.class,org.apache.logging.log4j.Logger.class,org.apache.logging.log4j.core.Appender.class,org.apache.logging.slf4j.Log4jLogger.class,org.apache.log4j.NDC.class};
    for (    Class<?> c : dependencies) {
      Path jarPath=new Path(Utilities.jarFinderGetJar(c));
      lfs.copyFromLocalFile(jarPath,libDir);
      if (LOG.isDebugEnabled()) {
        LOG.debug("Copying " + jarPath + " to "+ libDir);
      }
    }
    return null;
  }
}
 @TO@ copyLocalJars=new NamedCallable<Void>("copyLocalJars"){
  @Override public Void call() throws Exception {
    Class<?>[] dependencies=new Class<?>[]{LlapDaemonProtocolProtos.class,LlapTezUtils.class,LlapInputFormat.class,HiveInputFormat.class,SslContextFactory.class,Rule.class,RegistryUtils.ServiceRecordMarshal.class,com.lmax.disruptor.RingBuffer.class,org.apache.logging.log4j.Logger.class,org.apache.logging.log4j.core.Appender.class,org.apache.logging.slf4j.Log4jLogger.class,org.apache.log4j.NDC.class};
    for (    Class<?> c : dependencies) {
      Path jarPath=new Path(Utilities.jarFinderGetJar(c));
      lfs.copyFromLocalFile(jarPath,libDir);
      if (LOG.isDebugEnabled()) {
        LOG.debug("Copying " + jarPath + " to "+ libDir);
      }
    }
    return null;
  }
}
 @AT@ 15724 @LENGTH@ 1236

