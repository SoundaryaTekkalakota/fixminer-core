INS VariableDeclarationStatement@@PhysicalTypeDetails ptd=physicalTypeMetadata.getPhysicalTypeDetails(); @TO@ MethodDeclaration@@public, void, MethodName:addFieldSetJpa, @CliOption(key={"","fieldName"},mandatory=true,help="The name of the field to add") JavaSymbolName fieldName, @CliOption(key="element",mandatory=true,help="The entity which will be contained within the Set") JavaType element, @CliOption(key="class",mandatory=false,unspecifiedDefaultValue="*",optionContext="update,project",help="The name of the class to receive this field") JavaType typeName, @CliOption(key="mappedBy",mandatory=false,help="The field name on the referenced type which owns the relationship") JavaSymbolName mappedBy, @CliOption(key="notNull",mandatory=false,specifiedDefaultValue="true",help="Whether this value cannot be null") Boolean notNull, @CliOption(key="nullRequired",mandatory=false,specifiedDefaultValue="true",help="Whether this value must be null") Boolean nullRequired, @CliOption(key="sizeMin",mandatory=false,help="The minimum string length") Integer sizeMin, @CliOption(key="sizeMax",mandatory=false,help="The maximum string length") Integer sizeMax, @CliOption(key="cardinality",mandatory=false,unspecifiedDefaultValue="MANY_TO_MANY",specifiedDefaultValue="MANY_TO_MANY",help="The relationship cardinarily at a JPA level") Cardinality cardinality, @CliOption(key="fetch",mandatory=false,help="The fetch semantics at a JPA level") Fetch fetch, @CliOption(key="comment",mandatory=false,help="An optional comment for JavaDocs") String comment, @CliOption(key="transient",mandatory=false,unspecifiedDefaultValue="false",specifiedDefaultValue="true",help="Indicates to mark the field as transient") boolean transientModifier, @CliOption(key="permitReservedWords",mandatory=false,unspecifiedDefaultValue="false",specifiedDefaultValue="true",help="Indicates whether reserved words are ignored by Roo") boolean permitReservedWords,  @AT@ 23071 @LENGTH@ 72
---INS SimpleType@@PhysicalTypeDetails @TO@ VariableDeclarationStatement@@PhysicalTypeDetails ptd=physicalTypeMetadata.getPhysicalTypeDetails(); @AT@ 23071 @LENGTH@ 19
---INS VariableDeclarationFragment@@ptd=physicalTypeMetadata.getPhysicalTypeDetails() @TO@ VariableDeclarationStatement@@PhysicalTypeDetails ptd=physicalTypeMetadata.getPhysicalTypeDetails(); @AT@ 23091 @LENGTH@ 51
------INS SimpleName@@ptd @TO@ VariableDeclarationFragment@@ptd=physicalTypeMetadata.getPhysicalTypeDetails() @AT@ 23091 @LENGTH@ 3
------INS MethodInvocation@@physicalTypeMetadata.getPhysicalTypeDetails() @TO@ VariableDeclarationFragment@@ptd=physicalTypeMetadata.getPhysicalTypeDetails() @AT@ 23097 @LENGTH@ 45
---------INS SimpleName@@Name:physicalTypeMetadata @TO@ MethodInvocation@@physicalTypeMetadata.getPhysicalTypeDetails() @AT@ 23097 @LENGTH@ 20
---------INS SimpleName@@MethodName:getPhysicalTypeDetails:[] @TO@ MethodInvocation@@physicalTypeMetadata.getPhysicalTypeDetails() @AT@ 23118 @LENGTH@ 24

