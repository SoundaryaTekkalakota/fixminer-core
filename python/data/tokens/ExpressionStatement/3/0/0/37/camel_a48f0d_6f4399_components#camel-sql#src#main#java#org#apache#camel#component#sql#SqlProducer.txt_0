UPD ExpressionStatement@@MethodInvocation:jdbcTemplate.execute(preparedQuery,new PreparedStatementCallback<Map<?,?>>(){
  public Map<?,?> doInPreparedStatement(  PreparedStatement ps) throws SQLException {
    int expected=ps.getParameterMetaData().getParameterCount();
    if (exchange.getIn().getBody() != null) {
      if (batch) {
        Iterator<?> iterator=exchange.getIn().getBody(Iterator.class);
        while (iterator != null && iterator.hasNext()) {
          Object value=iterator.next();
          Iterator<?> i=getEndpoint().getPrepareStatementStrategy().createPopulateIterator(sql,preparedQuery,expected,exchange,value);
          getEndpoint().getPrepareStatementStrategy().populateStatement(ps,i,expected);
          ps.addBatch();
        }
      }
 else {
        Iterator<?> i=getEndpoint().getPrepareStatementStrategy().createPopulateIterator(sql,preparedQuery,expected,exchange,exchange.getIn().getBody());
        getEndpoint().getPrepareStatementStrategy().populateStatement(ps,i,expected);
      }
    }
    if (batch) {
      int[] updateCounts=ps.executeBatch();
      int total=0;
      for (      int count : updateCounts) {
        total+=count;
      }
      exchange.getIn().setHeader(SqlConstants.SQL_UPDATE_COUNT,total);
    }
 else {
      boolean isResultSet=ps.execute();
      if (isResultSet) {
        RowMapperResultSetExtractor<Map<String,Object>> mapper=new RowMapperResultSetExtractor<Map<String,Object>>(new ColumnMapRowMapper());
        List<Map<String,Object>> result=mapper.extractData(ps.getResultSet());
        exchange.getOut().setBody(result);
        exchange.getIn().setHeader(SqlConstants.SQL_ROW_COUNT,result.size());
        exchange.getOut().setHeaders(exchange.getIn().getHeaders());
      }
 else {
        exchange.getIn().setHeader(SqlConstants.SQL_UPDATE_COUNT,ps.getUpdateCount());
      }
    }
    return null;
  }
}
) @TO@ MethodInvocation:jdbcTemplate.execute(preparedQuery,new PreparedStatementCallback<Map<?,?>>(){
  public Map<?,?> doInPreparedStatement(  PreparedStatement ps) throws SQLException {
    int expected=ps.getParameterMetaData().getParameterCount();
    if (batch) {
      Iterator<?> iterator=exchange.getIn().getBody(Iterator.class);
      while (iterator != null && iterator.hasNext()) {
        Object value=iterator.next();
        Iterator<?> i=getEndpoint().getPrepareStatementStrategy().createPopulateIterator(sql,preparedQuery,expected,exchange,value);
        getEndpoint().getPrepareStatementStrategy().populateStatement(ps,i,expected);
        ps.addBatch();
      }
    }
 else {
      Iterator<?> i=getEndpoint().getPrepareStatementStrategy().createPopulateIterator(sql,preparedQuery,expected,exchange,exchange.getIn().getBody());
      getEndpoint().getPrepareStatementStrategy().populateStatement(ps,i,expected);
    }
    if (batch) {
      int[] updateCounts=ps.executeBatch();
      int total=0;
      for (      int count : updateCounts) {
        total+=count;
      }
      exchange.getIn().setHeader(SqlConstants.SQL_UPDATE_COUNT,total);
    }
 else {
      boolean isResultSet=ps.execute();
      if (isResultSet) {
        RowMapperResultSetExtractor<Map<String,Object>> mapper=new RowMapperResultSetExtractor<Map<String,Object>>(new ColumnMapRowMapper());
        List<Map<String,Object>> result=mapper.extractData(ps.getResultSet());
        exchange.getOut().setBody(result);
        exchange.getIn().setHeader(SqlConstants.SQL_ROW_COUNT,result.size());
        exchange.getOut().setHeaders(exchange.getIn().getHeaders());
      }
 else {
        exchange.getIn().setHeader(SqlConstants.SQL_UPDATE_COUNT,ps.getUpdateCount());
      }
    }
    return null;
  }
}
) @AT@ 2172 @LENGTH@ 2714
---UPD MethodInvocation@@jdbcTemplate.execute(preparedQuery,new PreparedStatementCallback<Map<?,?>>(){
  public Map<?,?> doInPreparedStatement(  PreparedStatement ps) throws SQLException {
    int expected=ps.getParameterMetaData().getParameterCount();
    if (exchange.getIn().getBody() != null) {
      if (batch) {
        Iterator<?> iterator=exchange.getIn().getBody(Iterator.class);
        while (iterator != null && iterator.hasNext()) {
          Object value=iterator.next();
          Iterator<?> i=getEndpoint().getPrepareStatementStrategy().createPopulateIterator(sql,preparedQuery,expected,exchange,value);
          getEndpoint().getPrepareStatementStrategy().populateStatement(ps,i,expected);
          ps.addBatch();
        }
      }
 else {
        Iterator<?> i=getEndpoint().getPrepareStatementStrategy().createPopulateIterator(sql,preparedQuery,expected,exchange,exchange.getIn().getBody());
        getEndpoint().getPrepareStatementStrategy().populateStatement(ps,i,expected);
      }
    }
    if (batch) {
      int[] updateCounts=ps.executeBatch();
      int total=0;
      for (      int count : updateCounts) {
        total+=count;
      }
      exchange.getIn().setHeader(SqlConstants.SQL_UPDATE_COUNT,total);
    }
 else {
      boolean isResultSet=ps.execute();
      if (isResultSet) {
        RowMapperResultSetExtractor<Map<String,Object>> mapper=new RowMapperResultSetExtractor<Map<String,Object>>(new ColumnMapRowMapper());
        List<Map<String,Object>> result=mapper.extractData(ps.getResultSet());
        exchange.getOut().setBody(result);
        exchange.getIn().setHeader(SqlConstants.SQL_ROW_COUNT,result.size());
        exchange.getOut().setHeaders(exchange.getIn().getHeaders());
      }
 else {
        exchange.getIn().setHeader(SqlConstants.SQL_UPDATE_COUNT,ps.getUpdateCount());
      }
    }
    return null;
  }
}
) @TO@ jdbcTemplate.execute(preparedQuery,new PreparedStatementCallback<Map<?,?>>(){
  public Map<?,?> doInPreparedStatement(  PreparedStatement ps) throws SQLException {
    int expected=ps.getParameterMetaData().getParameterCount();
    if (batch) {
      Iterator<?> iterator=exchange.getIn().getBody(Iterator.class);
      while (iterator != null && iterator.hasNext()) {
        Object value=iterator.next();
        Iterator<?> i=getEndpoint().getPrepareStatementStrategy().createPopulateIterator(sql,preparedQuery,expected,exchange,value);
        getEndpoint().getPrepareStatementStrategy().populateStatement(ps,i,expected);
        ps.addBatch();
      }
    }
 else {
      Iterator<?> i=getEndpoint().getPrepareStatementStrategy().createPopulateIterator(sql,preparedQuery,expected,exchange,exchange.getIn().getBody());
      getEndpoint().getPrepareStatementStrategy().populateStatement(ps,i,expected);
    }
    if (batch) {
      int[] updateCounts=ps.executeBatch();
      int total=0;
      for (      int count : updateCounts) {
        total+=count;
      }
      exchange.getIn().setHeader(SqlConstants.SQL_UPDATE_COUNT,total);
    }
 else {
      boolean isResultSet=ps.execute();
      if (isResultSet) {
        RowMapperResultSetExtractor<Map<String,Object>> mapper=new RowMapperResultSetExtractor<Map<String,Object>>(new ColumnMapRowMapper());
        List<Map<String,Object>> result=mapper.extractData(ps.getResultSet());
        exchange.getOut().setBody(result);
        exchange.getIn().setHeader(SqlConstants.SQL_ROW_COUNT,result.size());
        exchange.getOut().setHeaders(exchange.getIn().getHeaders());
      }
 else {
        exchange.getIn().setHeader(SqlConstants.SQL_UPDATE_COUNT,ps.getUpdateCount());
      }
    }
    return null;
  }
}
) @AT@ 2172 @LENGTH@ 2713
------UPD SimpleName@@MethodName:execute:[preparedQuery, new PreparedStatementCallback<Map<?,?>>(){
  public Map<?,?> doInPreparedStatement(  PreparedStatement ps) throws SQLException {
    int expected=ps.getParameterMetaData().getParameterCount();
    if (exchange.getIn().getBody() != null) {
      if (batch) {
        Iterator<?> iterator=exchange.getIn().getBody(Iterator.class);
        while (iterator != null && iterator.hasNext()) {
          Object value=iterator.next();
          Iterator<?> i=getEndpoint().getPrepareStatementStrategy().createPopulateIterator(sql,preparedQuery,expected,exchange,value);
          getEndpoint().getPrepareStatementStrategy().populateStatement(ps,i,expected);
          ps.addBatch();
        }
      }
 else {
        Iterator<?> i=getEndpoint().getPrepareStatementStrategy().createPopulateIterator(sql,preparedQuery,expected,exchange,exchange.getIn().getBody());
        getEndpoint().getPrepareStatementStrategy().populateStatement(ps,i,expected);
      }
    }
    if (batch) {
      int[] updateCounts=ps.executeBatch();
      int total=0;
      for (      int count : updateCounts) {
        total+=count;
      }
      exchange.getIn().setHeader(SqlConstants.SQL_UPDATE_COUNT,total);
    }
 else {
      boolean isResultSet=ps.execute();
      if (isResultSet) {
        RowMapperResultSetExtractor<Map<String,Object>> mapper=new RowMapperResultSetExtractor<Map<String,Object>>(new ColumnMapRowMapper());
        List<Map<String,Object>> result=mapper.extractData(ps.getResultSet());
        exchange.getOut().setBody(result);
        exchange.getIn().setHeader(SqlConstants.SQL_ROW_COUNT,result.size());
        exchange.getOut().setHeaders(exchange.getIn().getHeaders());
      }
 else {
        exchange.getIn().setHeader(SqlConstants.SQL_UPDATE_COUNT,ps.getUpdateCount());
      }
    }
    return null;
  }
}
] @TO@ MethodName:execute:[preparedQuery, new PreparedStatementCallback<Map<?,?>>(){
  public Map<?,?> doInPreparedStatement(  PreparedStatement ps) throws SQLException {
    int expected=ps.getParameterMetaData().getParameterCount();
    if (batch) {
      Iterator<?> iterator=exchange.getIn().getBody(Iterator.class);
      while (iterator != null && iterator.hasNext()) {
        Object value=iterator.next();
        Iterator<?> i=getEndpoint().getPrepareStatementStrategy().createPopulateIterator(sql,preparedQuery,expected,exchange,value);
        getEndpoint().getPrepareStatementStrategy().populateStatement(ps,i,expected);
        ps.addBatch();
      }
    }
 else {
      Iterator<?> i=getEndpoint().getPrepareStatementStrategy().createPopulateIterator(sql,preparedQuery,expected,exchange,exchange.getIn().getBody());
      getEndpoint().getPrepareStatementStrategy().populateStatement(ps,i,expected);
    }
    if (batch) {
      int[] updateCounts=ps.executeBatch();
      int total=0;
      for (      int count : updateCounts) {
        total+=count;
      }
      exchange.getIn().setHeader(SqlConstants.SQL_UPDATE_COUNT,total);
    }
 else {
      boolean isResultSet=ps.execute();
      if (isResultSet) {
        RowMapperResultSetExtractor<Map<String,Object>> mapper=new RowMapperResultSetExtractor<Map<String,Object>>(new ColumnMapRowMapper());
        List<Map<String,Object>> result=mapper.extractData(ps.getResultSet());
        exchange.getOut().setBody(result);
        exchange.getIn().setHeader(SqlConstants.SQL_ROW_COUNT,result.size());
        exchange.getOut().setHeaders(exchange.getIn().getHeaders());
      }
 else {
        exchange.getIn().setHeader(SqlConstants.SQL_UPDATE_COUNT,ps.getUpdateCount());
      }
    }
    return null;
  }
}
] @AT@ 2185 @LENGTH@ 2700

