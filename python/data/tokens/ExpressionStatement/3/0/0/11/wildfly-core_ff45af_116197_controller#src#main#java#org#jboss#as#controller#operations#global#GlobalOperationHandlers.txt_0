UPD ExpressionStatement@@MethodInvocation:context.completeStep(new OperationContext.ResultHandler(){
  @Override public void handleResult(  OperationContext.ResultAction resultAction,  OperationContext context,  ModelNode operation){
    if (resultAction == OperationContext.ResultAction.KEEP && localFilteredData.hasFilteredData()) {
      context.getResponseHeaders().get(ACCESS_CONTROL).set(localFilteredData.toModelNode());
    }
  }
}
) @TO@ MethodInvocation:context.completeStep(new OperationContext.ResultHandler(){
  @Override public void handleResult(  OperationContext.ResultAction resultAction,  OperationContext context,  ModelNode operation){
    if (localFilteredData.hasFilteredData()) {
      context.getResponseHeaders().get(ACCESS_CONTROL).set(localFilteredData.toModelNode());
    }
    if (resultAction == OperationContext.ResultAction.ROLLBACK && !context.hasFailureDescription() && result.isDefined()) {
      String op=operation.require(OP).asString();
      Map<PathAddress,ModelNode> failures=new HashMap<PathAddress,ModelNode>();
      for (      ModelNode resultItem : result.asList()) {
        if (resultItem.hasDefined(FAILURE_DESCRIPTION)) {
          final PathAddress failedAddress=PathAddress.pathAddress(resultItem.get(ADDRESS));
          ModelNode failedDesc=resultItem.get(FAILURE_DESCRIPTION);
          failures.put(failedAddress,failedDesc);
        }
      }
      if (failures.size() == 1) {
        Map.Entry<PathAddress,ModelNode> entry=failures.entrySet().iterator().next();
        if (entry.getValue().getType() == ModelType.STRING) {
          context.getFailureDescription().set(ControllerLogger.ROOT_LOGGER.wildcardOperationFailedAtSingleAddress(op,entry.getKey(),entry.getValue().asString()));
        }
 else {
          context.getFailureDescription().set(ControllerLogger.ROOT_LOGGER.wildcardOperationFailedAtSingleAddressWithComplexFailure(op,entry.getKey()));
        }
      }
 else       if (failures.size() > 1) {
        context.getFailureDescription().set(ControllerLogger.ROOT_LOGGER.wildcardOperationFailedAtMultipleAddresses(op,failures.keySet()));
      }
    }
  }
}
) @AT@ 10779 @LENGTH@ 582
---UPD MethodInvocation@@context.completeStep(new OperationContext.ResultHandler(){
  @Override public void handleResult(  OperationContext.ResultAction resultAction,  OperationContext context,  ModelNode operation){
    if (resultAction == OperationContext.ResultAction.KEEP && localFilteredData.hasFilteredData()) {
      context.getResponseHeaders().get(ACCESS_CONTROL).set(localFilteredData.toModelNode());
    }
  }
}
) @TO@ context.completeStep(new OperationContext.ResultHandler(){
  @Override public void handleResult(  OperationContext.ResultAction resultAction,  OperationContext context,  ModelNode operation){
    if (localFilteredData.hasFilteredData()) {
      context.getResponseHeaders().get(ACCESS_CONTROL).set(localFilteredData.toModelNode());
    }
    if (resultAction == OperationContext.ResultAction.ROLLBACK && !context.hasFailureDescription() && result.isDefined()) {
      String op=operation.require(OP).asString();
      Map<PathAddress,ModelNode> failures=new HashMap<PathAddress,ModelNode>();
      for (      ModelNode resultItem : result.asList()) {
        if (resultItem.hasDefined(FAILURE_DESCRIPTION)) {
          final PathAddress failedAddress=PathAddress.pathAddress(resultItem.get(ADDRESS));
          ModelNode failedDesc=resultItem.get(FAILURE_DESCRIPTION);
          failures.put(failedAddress,failedDesc);
        }
      }
      if (failures.size() == 1) {
        Map.Entry<PathAddress,ModelNode> entry=failures.entrySet().iterator().next();
        if (entry.getValue().getType() == ModelType.STRING) {
          context.getFailureDescription().set(ControllerLogger.ROOT_LOGGER.wildcardOperationFailedAtSingleAddress(op,entry.getKey(),entry.getValue().asString()));
        }
 else {
          context.getFailureDescription().set(ControllerLogger.ROOT_LOGGER.wildcardOperationFailedAtSingleAddressWithComplexFailure(op,entry.getKey()));
        }
      }
 else       if (failures.size() > 1) {
        context.getFailureDescription().set(ControllerLogger.ROOT_LOGGER.wildcardOperationFailedAtMultipleAddresses(op,failures.keySet()));
      }
    }
  }
}
) @AT@ 10779 @LENGTH@ 581
------UPD SimpleName@@MethodName:completeStep:[new OperationContext.ResultHandler(){
  @Override public void handleResult(  OperationContext.ResultAction resultAction,  OperationContext context,  ModelNode operation){
    if (resultAction == OperationContext.ResultAction.KEEP && localFilteredData.hasFilteredData()) {
      context.getResponseHeaders().get(ACCESS_CONTROL).set(localFilteredData.toModelNode());
    }
  }
}
] @TO@ MethodName:completeStep:[new OperationContext.ResultHandler(){
  @Override public void handleResult(  OperationContext.ResultAction resultAction,  OperationContext context,  ModelNode operation){
    if (localFilteredData.hasFilteredData()) {
      context.getResponseHeaders().get(ACCESS_CONTROL).set(localFilteredData.toModelNode());
    }
    if (resultAction == OperationContext.ResultAction.ROLLBACK && !context.hasFailureDescription() && result.isDefined()) {
      String op=operation.require(OP).asString();
      Map<PathAddress,ModelNode> failures=new HashMap<PathAddress,ModelNode>();
      for (      ModelNode resultItem : result.asList()) {
        if (resultItem.hasDefined(FAILURE_DESCRIPTION)) {
          final PathAddress failedAddress=PathAddress.pathAddress(resultItem.get(ADDRESS));
          ModelNode failedDesc=resultItem.get(FAILURE_DESCRIPTION);
          failures.put(failedAddress,failedDesc);
        }
      }
      if (failures.size() == 1) {
        Map.Entry<PathAddress,ModelNode> entry=failures.entrySet().iterator().next();
        if (entry.getValue().getType() == ModelType.STRING) {
          context.getFailureDescription().set(ControllerLogger.ROOT_LOGGER.wildcardOperationFailedAtSingleAddress(op,entry.getKey(),entry.getValue().asString()));
        }
 else {
          context.getFailureDescription().set(ControllerLogger.ROOT_LOGGER.wildcardOperationFailedAtSingleAddressWithComplexFailure(op,entry.getKey()));
        }
      }
 else       if (failures.size() > 1) {
        context.getFailureDescription().set(ControllerLogger.ROOT_LOGGER.wildcardOperationFailedAtMultipleAddresses(op,failures.keySet()));
      }
    }
  }
}
] @AT@ 10787 @LENGTH@ 573

