UPD ExpressionStatement@@MethodInvocation:context.addStep(new OperationStepHandler(){
  @Override public void execute(  OperationContext context,  ModelNode operation) throws OperationFailedException {
    final ServiceTarget serviceTarget=context.getServiceTarget();
    final String serverName=context.getCurrentAddressValue();
    final ModelNode model=Resource.Tools.readModel(resource);
    final Configuration configuration=transformConfig(context,serverName,model);
    String bindingsPath=PATHS.get(BINDINGS_DIRECTORY).resolveModelAttribute(context,model.get(PATH,BINDINGS_DIRECTORY)).asString();
    String bindingsRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,BINDINGS_DIRECTORY)).asString();
    String journalPath=PATHS.get(JOURNAL_DIRECTORY).resolveModelAttribute(context,model.get(PATH,JOURNAL_DIRECTORY)).asString();
    String journalRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,JOURNAL_DIRECTORY)).asString();
    String largeMessagePath=PATHS.get(LARGE_MESSAGES_DIRECTORY).resolveModelAttribute(context,model.get(PATH,LARGE_MESSAGES_DIRECTORY)).asString();
    String largeMessageRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,LARGE_MESSAGES_DIRECTORY)).asString();
    String pagingPath=PATHS.get(PAGING_DIRECTORY).resolveModelAttribute(context,model.get(PATH,PAGING_DIRECTORY)).asString();
    String pagingRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,PAGING_DIRECTORY)).asString();
    final ActiveMQServerService serverService=new ActiveMQServerService(configuration,new ActiveMQServerService.PathConfig(bindingsPath,bindingsRelativeToPath,journalPath,journalRelativeToPath,largeMessagePath,largeMessageRelativeToPath,pagingPath,pagingRelativeToPath));
    processIncomingInterceptors(INCOMING_INTERCEPTORS.resolveModelAttribute(context,operation),serverService);
    processOutgoingInterceptors(OUTGOING_INTERCEPTORS.resolveModelAttribute(context,operation),serverService);
    ServiceName activeMQServiceName=MessagingServices.getActiveMQServiceName(serverName);
    final ServiceBuilder<ActiveMQServer> serviceBuilder=serviceTarget.addService(activeMQServiceName,serverService);
    if (context.hasOptionalCapability(JMX_CAPABILITY,ACTIVEMQ_SERVER_CAPABILITY.getDynamicName(serverName),null)) {
      ServiceName jmxCapability=context.getCapabilityServiceName(JMX_CAPABILITY,MBeanServer.class);
      serviceBuilder.addDependency(jmxCapability,MBeanServer.class,serverService.getMBeanServer());
    }
    ModelNode dataSource=JOURNAL_DATASOURCE.resolveModelAttribute(context,model);
    if (dataSource.isDefined()) {
      ServiceName dataSourceCapability=context.getCapabilityServiceName("org.wildfly.data-source",dataSource.asString(),DataSource.class);
      serviceBuilder.addDependency(dataSourceCapability,DataSource.class,serverService.getDataSource());
    }
    serviceBuilder.addDependency(PathManagerService.SERVICE_NAME,PathManager.class,serverService.getPathManagerInjector());
    String domain=SECURITY_DOMAIN.resolveModelAttribute(context,model).asString();
    serviceBuilder.addDependency(DependencyType.REQUIRED,SecurityDomainService.SERVICE_NAME.append(domain),SecurityDomainContext.class,serverService.getSecurityDomainContextInjector());
    final ModelNode elytronSecurityDomain=ELYTRON_DOMAIN.resolveModelAttribute(context,model);
    if (elytronSecurityDomain.isDefined()) {
      ServiceName elytronDomainCapability=context.getCapabilityServiceName(ELYTRON_DOMAIN_CAPABILITY,elytronSecurityDomain.asString(),SecurityDomain.class);
      serviceBuilder.addDependency(elytronDomainCapability,SecurityDomain.class,serverService.getElytronDomainInjector());
    }
    addBridgeCredentialStoreReference(serverService,configuration,BridgeDefinition.CREDENTIAL_REFERENCE,context,model,serviceBuilder);
    addClusterCredentialStoreReference(serverService,ServerDefinition.CREDENTIAL_REFERENCE,context,model,serviceBuilder);
    final Set<String> socketBindings=new HashSet<String>();
    TransportConfigOperationHandlers.processAcceptors(context,configuration,model,socketBindings);
    if (model.hasDefined(HTTP_ACCEPTOR)) {
      for (      final Property property : model.get(HTTP_ACCEPTOR).asPropertyList()) {
        String httpListener=HTTPAcceptorDefinition.HTTP_LISTENER.resolveModelAttribute(context,property.getValue()).asString();
        serviceBuilder.addDependency(MessagingServices.HTTP_UPGRADE_REGISTRY.append(httpListener));
      }
    }
    for (    final String socketBinding : socketBindings) {
      final ServiceName socketName=SocketBinding.JBOSS_BINDING_NAME.append(socketBinding);
      serviceBuilder.addDependency(socketName,SocketBinding.class,serverService.getSocketBindingInjector(socketBinding));
    }
    final Set<String> outboundSocketBindings=new HashSet<String>();
    TransportConfigOperationHandlers.processConnectors(context,configuration,model,outboundSocketBindings);
    for (    final String outboundSocketBinding : outboundSocketBindings) {
      final ServiceName outboundSocketName=OutboundSocketBinding.OUTBOUND_SOCKET_BINDING_BASE_SERVICE_NAME.append(outboundSocketBinding);
      serviceBuilder.addDependency(DependencyType.OPTIONAL,outboundSocketName,OutboundSocketBinding.class,serverService.getOutboundSocketBindingInjector(outboundSocketBinding));
      if (!socketBindings.contains(outboundSocketBinding)) {
        final ServiceName socketName=SocketBinding.JBOSS_BINDING_NAME.append(outboundSocketBinding);
        serviceBuilder.addDependency(DependencyType.OPTIONAL,socketName,SocketBinding.class,serverService.getSocketBindingInjector(outboundSocketBinding));
      }
    }
    BroadcastGroupAdd.addBroadcastGroupConfigs(context,configuration,model);
    final List<BroadcastGroupConfiguration> broadcastGroupConfigurations=configuration.getBroadcastGroupConfigurations();
    final Map<String,DiscoveryGroupConfiguration> discoveryGroupConfigurations=configuration.getDiscoveryGroupConfigurations();
    if (broadcastGroupConfigurations != null) {
      for (      final BroadcastGroupConfiguration config : broadcastGroupConfigurations) {
        final String name=config.getName();
        final String key="broadcast" + name;
        ModelNode broadcastGroupModel=model.get(BROADCAST_GROUP,name);
        if (broadcastGroupModel.hasDefined(JGROUPS_CHANNEL.getName())) {
          ModelNode channelFactory=BroadcastGroupDefinition.JGROUPS_STACK.resolveModelAttribute(context,broadcastGroupModel);
          ServiceName channelFactoryServiceName=channelFactory.isDefined() ? JGroupsRequirement.CHANNEL_FACTORY.getServiceName(context,channelFactory.asString()) : JGroupsDefaultRequirement.CHANNEL_FACTORY.getServiceName(context);
          String channelName=JGROUPS_CHANNEL.resolveModelAttribute(context,broadcastGroupModel).asString();
          serviceBuilder.addDependency(channelFactoryServiceName,ChannelFactory.class,serverService.getJGroupsInjector(key));
          serverService.getJGroupsChannels().put(key,channelName);
        }
 else {
          final ServiceName groupBinding=GroupBindingService.getBroadcastBaseServiceName(activeMQServiceName).append(name);
          serviceBuilder.addDependency(groupBinding,SocketBinding.class,serverService.getGroupBindingInjector(key));
        }
      }
    }
    if (discoveryGroupConfigurations != null) {
      for (      final DiscoveryGroupConfiguration config : discoveryGroupConfigurations.values()) {
        final String name=config.getName();
        final String key="discovery" + name;
        ModelNode discoveryGroupModel=model.get(DISCOVERY_GROUP,name);
        if (discoveryGroupModel.hasDefined(JGROUPS_CHANNEL.getName())) {
          ModelNode channelFactory=DiscoveryGroupDefinition.JGROUPS_STACK.resolveModelAttribute(context,discoveryGroupModel);
          ServiceName channelFactoryServiceName=channelFactory.isDefined() ? JGroupsRequirement.CHANNEL_FACTORY.getServiceName(context,channelFactory.asString()) : JGroupsDefaultRequirement.CHANNEL_FACTORY.getServiceName(context);
          String channelName=JGROUPS_CHANNEL.resolveModelAttribute(context,discoveryGroupModel).asString();
          serviceBuilder.addDependency(channelFactoryServiceName,ChannelFactory.class,serverService.getJGroupsInjector(key));
          serverService.getJGroupsChannels().put(key,channelName);
        }
 else {
          final ServiceName groupBinding=GroupBindingService.getDiscoveryBaseServiceName(activeMQServiceName).append(name);
          serviceBuilder.addDependency(groupBinding,SocketBinding.class,serverService.getGroupBindingInjector(key));
        }
      }
    }
    ServiceController<ActiveMQServer> activeMQServerServiceController=serviceBuilder.install();
    ((ActiveMQServerResource)resource).setActiveMQServerServiceController(activeMQServerServiceController);
    boolean overrideInVMSecurity=OVERRIDE_IN_VM_SECURITY.resolveModelAttribute(context,operation).asBoolean();
    JMSService.addService(serviceTarget,activeMQServiceName,overrideInVMSecurity);
    context.completeStep(OperationContext.RollbackHandler.NOOP_ROLLBACK_HANDLER);
  }
}
,OperationContext.Stage.RUNTIME) @TO@ MethodInvocation:context.addStep(new OperationStepHandler(){
  @Override public void execute(  OperationContext context,  ModelNode operation) throws OperationFailedException {
    final ServiceTarget serviceTarget=context.getServiceTarget();
    final String serverName=context.getCurrentAddressValue();
    final ModelNode model=Resource.Tools.readModel(resource);
    final Configuration configuration=transformConfig(context,serverName,model);
    String bindingsPath=PATHS.get(BINDINGS_DIRECTORY).resolveModelAttribute(context,model.get(PATH,BINDINGS_DIRECTORY)).asString();
    String bindingsRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,BINDINGS_DIRECTORY)).asString();
    String journalPath=PATHS.get(JOURNAL_DIRECTORY).resolveModelAttribute(context,model.get(PATH,JOURNAL_DIRECTORY)).asString();
    String journalRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,JOURNAL_DIRECTORY)).asString();
    String largeMessagePath=PATHS.get(LARGE_MESSAGES_DIRECTORY).resolveModelAttribute(context,model.get(PATH,LARGE_MESSAGES_DIRECTORY)).asString();
    String largeMessageRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,LARGE_MESSAGES_DIRECTORY)).asString();
    String pagingPath=PATHS.get(PAGING_DIRECTORY).resolveModelAttribute(context,model.get(PATH,PAGING_DIRECTORY)).asString();
    String pagingRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,PAGING_DIRECTORY)).asString();
    final ActiveMQServerService serverService=new ActiveMQServerService(configuration,new ActiveMQServerService.PathConfig(bindingsPath,bindingsRelativeToPath,journalPath,journalRelativeToPath,largeMessagePath,largeMessageRelativeToPath,pagingPath,pagingRelativeToPath));
    processIncomingInterceptors(INCOMING_INTERCEPTORS.resolveModelAttribute(context,operation),serverService);
    processOutgoingInterceptors(OUTGOING_INTERCEPTORS.resolveModelAttribute(context,operation),serverService);
    ServiceName activeMQServiceName=MessagingServices.getActiveMQServiceName(serverName);
    final ServiceBuilder<ActiveMQServer> serviceBuilder=serviceTarget.addService(activeMQServiceName,serverService);
    if (context.hasOptionalCapability(JMX_CAPABILITY,ACTIVEMQ_SERVER_CAPABILITY.getDynamicName(serverName),null)) {
      ServiceName jmxCapability=context.getCapabilityServiceName(JMX_CAPABILITY,MBeanServer.class);
      serviceBuilder.addDependency(jmxCapability,MBeanServer.class,serverService.getMBeanServer());
    }
    ModelNode dataSource=JOURNAL_DATASOURCE.resolveModelAttribute(context,model);
    if (dataSource.isDefined()) {
      ServiceName dataSourceCapability=context.getCapabilityServiceName("org.wildfly.data-source",dataSource.asString(),DataSource.class);
      serviceBuilder.addDependency(dataSourceCapability,DataSource.class,serverService.getDataSource());
    }
    serviceBuilder.addDependency(PathManagerService.SERVICE_NAME,PathManager.class,serverService.getPathManagerInjector());
    final ModelNode elytronSecurityDomain=ELYTRON_DOMAIN.resolveModelAttribute(context,model);
    if (elytronSecurityDomain.isDefined()) {
      ServiceName elytronDomainCapability=context.getCapabilityServiceName(ELYTRON_DOMAIN_CAPABILITY,elytronSecurityDomain.asString(),SecurityDomain.class);
      serviceBuilder.addDependency(elytronDomainCapability,SecurityDomain.class,serverService.getElytronDomainInjector());
    }
 else {
      String domain=SECURITY_DOMAIN.resolveModelAttribute(context,model).asString();
      serviceBuilder.addDependency(DependencyType.REQUIRED,SecurityDomainService.SERVICE_NAME.append(domain),SecurityDomainContext.class,serverService.getSecurityDomainContextInjector());
    }
    addBridgeCredentialStoreReference(serverService,configuration,BridgeDefinition.CREDENTIAL_REFERENCE,context,model,serviceBuilder);
    addClusterCredentialStoreReference(serverService,ServerDefinition.CREDENTIAL_REFERENCE,context,model,serviceBuilder);
    final Set<String> socketBindings=new HashSet<String>();
    TransportConfigOperationHandlers.processAcceptors(context,configuration,model,socketBindings);
    if (model.hasDefined(HTTP_ACCEPTOR)) {
      for (      final Property property : model.get(HTTP_ACCEPTOR).asPropertyList()) {
        String httpListener=HTTPAcceptorDefinition.HTTP_LISTENER.resolveModelAttribute(context,property.getValue()).asString();
        serviceBuilder.addDependency(MessagingServices.HTTP_UPGRADE_REGISTRY.append(httpListener));
      }
    }
    for (    final String socketBinding : socketBindings) {
      final ServiceName socketName=SocketBinding.JBOSS_BINDING_NAME.append(socketBinding);
      serviceBuilder.addDependency(socketName,SocketBinding.class,serverService.getSocketBindingInjector(socketBinding));
    }
    final Set<String> outboundSocketBindings=new HashSet<String>();
    TransportConfigOperationHandlers.processConnectors(context,configuration,model,outboundSocketBindings);
    for (    final String outboundSocketBinding : outboundSocketBindings) {
      final ServiceName outboundSocketName=OutboundSocketBinding.OUTBOUND_SOCKET_BINDING_BASE_SERVICE_NAME.append(outboundSocketBinding);
      serviceBuilder.addDependency(DependencyType.OPTIONAL,outboundSocketName,OutboundSocketBinding.class,serverService.getOutboundSocketBindingInjector(outboundSocketBinding));
      if (!socketBindings.contains(outboundSocketBinding)) {
        final ServiceName socketName=SocketBinding.JBOSS_BINDING_NAME.append(outboundSocketBinding);
        serviceBuilder.addDependency(DependencyType.OPTIONAL,socketName,SocketBinding.class,serverService.getSocketBindingInjector(outboundSocketBinding));
      }
    }
    BroadcastGroupAdd.addBroadcastGroupConfigs(context,configuration,model);
    final List<BroadcastGroupConfiguration> broadcastGroupConfigurations=configuration.getBroadcastGroupConfigurations();
    final Map<String,DiscoveryGroupConfiguration> discoveryGroupConfigurations=configuration.getDiscoveryGroupConfigurations();
    if (broadcastGroupConfigurations != null) {
      for (      final BroadcastGroupConfiguration config : broadcastGroupConfigurations) {
        final String name=config.getName();
        final String key="broadcast" + name;
        ModelNode broadcastGroupModel=model.get(BROADCAST_GROUP,name);
        if (broadcastGroupModel.hasDefined(JGROUPS_CHANNEL.getName())) {
          ModelNode channelFactory=BroadcastGroupDefinition.JGROUPS_STACK.resolveModelAttribute(context,broadcastGroupModel);
          ServiceName channelFactoryServiceName=channelFactory.isDefined() ? JGroupsRequirement.CHANNEL_FACTORY.getServiceName(context,channelFactory.asString()) : JGroupsDefaultRequirement.CHANNEL_FACTORY.getServiceName(context);
          String channelName=JGROUPS_CHANNEL.resolveModelAttribute(context,broadcastGroupModel).asString();
          serviceBuilder.addDependency(channelFactoryServiceName,ChannelFactory.class,serverService.getJGroupsInjector(key));
          serverService.getJGroupsChannels().put(key,channelName);
        }
 else {
          final ServiceName groupBinding=GroupBindingService.getBroadcastBaseServiceName(activeMQServiceName).append(name);
          serviceBuilder.addDependency(groupBinding,SocketBinding.class,serverService.getGroupBindingInjector(key));
        }
      }
    }
    if (discoveryGroupConfigurations != null) {
      for (      final DiscoveryGroupConfiguration config : discoveryGroupConfigurations.values()) {
        final String name=config.getName();
        final String key="discovery" + name;
        ModelNode discoveryGroupModel=model.get(DISCOVERY_GROUP,name);
        if (discoveryGroupModel.hasDefined(JGROUPS_CHANNEL.getName())) {
          ModelNode channelFactory=DiscoveryGroupDefinition.JGROUPS_STACK.resolveModelAttribute(context,discoveryGroupModel);
          ServiceName channelFactoryServiceName=channelFactory.isDefined() ? JGroupsRequirement.CHANNEL_FACTORY.getServiceName(context,channelFactory.asString()) : JGroupsDefaultRequirement.CHANNEL_FACTORY.getServiceName(context);
          String channelName=JGROUPS_CHANNEL.resolveModelAttribute(context,discoveryGroupModel).asString();
          serviceBuilder.addDependency(channelFactoryServiceName,ChannelFactory.class,serverService.getJGroupsInjector(key));
          serverService.getJGroupsChannels().put(key,channelName);
        }
 else {
          final ServiceName groupBinding=GroupBindingService.getDiscoveryBaseServiceName(activeMQServiceName).append(name);
          serviceBuilder.addDependency(groupBinding,SocketBinding.class,serverService.getGroupBindingInjector(key));
        }
      }
    }
    ServiceController<ActiveMQServer> activeMQServerServiceController=serviceBuilder.install();
    ((ActiveMQServerResource)resource).setActiveMQServerServiceController(activeMQServerServiceController);
    boolean overrideInVMSecurity=OVERRIDE_IN_VM_SECURITY.resolveModelAttribute(context,operation).asBoolean();
    JMSService.addService(serviceTarget,activeMQServiceName,overrideInVMSecurity);
    context.completeStep(OperationContext.RollbackHandler.NOOP_ROLLBACK_HANDLER);
  }
}
,OperationContext.Stage.RUNTIME) @AT@ 15264 @LENGTH@ 12161
---UPD MethodInvocation@@context.addStep(new OperationStepHandler(){
  @Override public void execute(  OperationContext context,  ModelNode operation) throws OperationFailedException {
    final ServiceTarget serviceTarget=context.getServiceTarget();
    final String serverName=context.getCurrentAddressValue();
    final ModelNode model=Resource.Tools.readModel(resource);
    final Configuration configuration=transformConfig(context,serverName,model);
    String bindingsPath=PATHS.get(BINDINGS_DIRECTORY).resolveModelAttribute(context,model.get(PATH,BINDINGS_DIRECTORY)).asString();
    String bindingsRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,BINDINGS_DIRECTORY)).asString();
    String journalPath=PATHS.get(JOURNAL_DIRECTORY).resolveModelAttribute(context,model.get(PATH,JOURNAL_DIRECTORY)).asString();
    String journalRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,JOURNAL_DIRECTORY)).asString();
    String largeMessagePath=PATHS.get(LARGE_MESSAGES_DIRECTORY).resolveModelAttribute(context,model.get(PATH,LARGE_MESSAGES_DIRECTORY)).asString();
    String largeMessageRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,LARGE_MESSAGES_DIRECTORY)).asString();
    String pagingPath=PATHS.get(PAGING_DIRECTORY).resolveModelAttribute(context,model.get(PATH,PAGING_DIRECTORY)).asString();
    String pagingRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,PAGING_DIRECTORY)).asString();
    final ActiveMQServerService serverService=new ActiveMQServerService(configuration,new ActiveMQServerService.PathConfig(bindingsPath,bindingsRelativeToPath,journalPath,journalRelativeToPath,largeMessagePath,largeMessageRelativeToPath,pagingPath,pagingRelativeToPath));
    processIncomingInterceptors(INCOMING_INTERCEPTORS.resolveModelAttribute(context,operation),serverService);
    processOutgoingInterceptors(OUTGOING_INTERCEPTORS.resolveModelAttribute(context,operation),serverService);
    ServiceName activeMQServiceName=MessagingServices.getActiveMQServiceName(serverName);
    final ServiceBuilder<ActiveMQServer> serviceBuilder=serviceTarget.addService(activeMQServiceName,serverService);
    if (context.hasOptionalCapability(JMX_CAPABILITY,ACTIVEMQ_SERVER_CAPABILITY.getDynamicName(serverName),null)) {
      ServiceName jmxCapability=context.getCapabilityServiceName(JMX_CAPABILITY,MBeanServer.class);
      serviceBuilder.addDependency(jmxCapability,MBeanServer.class,serverService.getMBeanServer());
    }
    ModelNode dataSource=JOURNAL_DATASOURCE.resolveModelAttribute(context,model);
    if (dataSource.isDefined()) {
      ServiceName dataSourceCapability=context.getCapabilityServiceName("org.wildfly.data-source",dataSource.asString(),DataSource.class);
      serviceBuilder.addDependency(dataSourceCapability,DataSource.class,serverService.getDataSource());
    }
    serviceBuilder.addDependency(PathManagerService.SERVICE_NAME,PathManager.class,serverService.getPathManagerInjector());
    String domain=SECURITY_DOMAIN.resolveModelAttribute(context,model).asString();
    serviceBuilder.addDependency(DependencyType.REQUIRED,SecurityDomainService.SERVICE_NAME.append(domain),SecurityDomainContext.class,serverService.getSecurityDomainContextInjector());
    final ModelNode elytronSecurityDomain=ELYTRON_DOMAIN.resolveModelAttribute(context,model);
    if (elytronSecurityDomain.isDefined()) {
      ServiceName elytronDomainCapability=context.getCapabilityServiceName(ELYTRON_DOMAIN_CAPABILITY,elytronSecurityDomain.asString(),SecurityDomain.class);
      serviceBuilder.addDependency(elytronDomainCapability,SecurityDomain.class,serverService.getElytronDomainInjector());
    }
    addBridgeCredentialStoreReference(serverService,configuration,BridgeDefinition.CREDENTIAL_REFERENCE,context,model,serviceBuilder);
    addClusterCredentialStoreReference(serverService,ServerDefinition.CREDENTIAL_REFERENCE,context,model,serviceBuilder);
    final Set<String> socketBindings=new HashSet<String>();
    TransportConfigOperationHandlers.processAcceptors(context,configuration,model,socketBindings);
    if (model.hasDefined(HTTP_ACCEPTOR)) {
      for (      final Property property : model.get(HTTP_ACCEPTOR).asPropertyList()) {
        String httpListener=HTTPAcceptorDefinition.HTTP_LISTENER.resolveModelAttribute(context,property.getValue()).asString();
        serviceBuilder.addDependency(MessagingServices.HTTP_UPGRADE_REGISTRY.append(httpListener));
      }
    }
    for (    final String socketBinding : socketBindings) {
      final ServiceName socketName=SocketBinding.JBOSS_BINDING_NAME.append(socketBinding);
      serviceBuilder.addDependency(socketName,SocketBinding.class,serverService.getSocketBindingInjector(socketBinding));
    }
    final Set<String> outboundSocketBindings=new HashSet<String>();
    TransportConfigOperationHandlers.processConnectors(context,configuration,model,outboundSocketBindings);
    for (    final String outboundSocketBinding : outboundSocketBindings) {
      final ServiceName outboundSocketName=OutboundSocketBinding.OUTBOUND_SOCKET_BINDING_BASE_SERVICE_NAME.append(outboundSocketBinding);
      serviceBuilder.addDependency(DependencyType.OPTIONAL,outboundSocketName,OutboundSocketBinding.class,serverService.getOutboundSocketBindingInjector(outboundSocketBinding));
      if (!socketBindings.contains(outboundSocketBinding)) {
        final ServiceName socketName=SocketBinding.JBOSS_BINDING_NAME.append(outboundSocketBinding);
        serviceBuilder.addDependency(DependencyType.OPTIONAL,socketName,SocketBinding.class,serverService.getSocketBindingInjector(outboundSocketBinding));
      }
    }
    BroadcastGroupAdd.addBroadcastGroupConfigs(context,configuration,model);
    final List<BroadcastGroupConfiguration> broadcastGroupConfigurations=configuration.getBroadcastGroupConfigurations();
    final Map<String,DiscoveryGroupConfiguration> discoveryGroupConfigurations=configuration.getDiscoveryGroupConfigurations();
    if (broadcastGroupConfigurations != null) {
      for (      final BroadcastGroupConfiguration config : broadcastGroupConfigurations) {
        final String name=config.getName();
        final String key="broadcast" + name;
        ModelNode broadcastGroupModel=model.get(BROADCAST_GROUP,name);
        if (broadcastGroupModel.hasDefined(JGROUPS_CHANNEL.getName())) {
          ModelNode channelFactory=BroadcastGroupDefinition.JGROUPS_STACK.resolveModelAttribute(context,broadcastGroupModel);
          ServiceName channelFactoryServiceName=channelFactory.isDefined() ? JGroupsRequirement.CHANNEL_FACTORY.getServiceName(context,channelFactory.asString()) : JGroupsDefaultRequirement.CHANNEL_FACTORY.getServiceName(context);
          String channelName=JGROUPS_CHANNEL.resolveModelAttribute(context,broadcastGroupModel).asString();
          serviceBuilder.addDependency(channelFactoryServiceName,ChannelFactory.class,serverService.getJGroupsInjector(key));
          serverService.getJGroupsChannels().put(key,channelName);
        }
 else {
          final ServiceName groupBinding=GroupBindingService.getBroadcastBaseServiceName(activeMQServiceName).append(name);
          serviceBuilder.addDependency(groupBinding,SocketBinding.class,serverService.getGroupBindingInjector(key));
        }
      }
    }
    if (discoveryGroupConfigurations != null) {
      for (      final DiscoveryGroupConfiguration config : discoveryGroupConfigurations.values()) {
        final String name=config.getName();
        final String key="discovery" + name;
        ModelNode discoveryGroupModel=model.get(DISCOVERY_GROUP,name);
        if (discoveryGroupModel.hasDefined(JGROUPS_CHANNEL.getName())) {
          ModelNode channelFactory=DiscoveryGroupDefinition.JGROUPS_STACK.resolveModelAttribute(context,discoveryGroupModel);
          ServiceName channelFactoryServiceName=channelFactory.isDefined() ? JGroupsRequirement.CHANNEL_FACTORY.getServiceName(context,channelFactory.asString()) : JGroupsDefaultRequirement.CHANNEL_FACTORY.getServiceName(context);
          String channelName=JGROUPS_CHANNEL.resolveModelAttribute(context,discoveryGroupModel).asString();
          serviceBuilder.addDependency(channelFactoryServiceName,ChannelFactory.class,serverService.getJGroupsInjector(key));
          serverService.getJGroupsChannels().put(key,channelName);
        }
 else {
          final ServiceName groupBinding=GroupBindingService.getDiscoveryBaseServiceName(activeMQServiceName).append(name);
          serviceBuilder.addDependency(groupBinding,SocketBinding.class,serverService.getGroupBindingInjector(key));
        }
      }
    }
    ServiceController<ActiveMQServer> activeMQServerServiceController=serviceBuilder.install();
    ((ActiveMQServerResource)resource).setActiveMQServerServiceController(activeMQServerServiceController);
    boolean overrideInVMSecurity=OVERRIDE_IN_VM_SECURITY.resolveModelAttribute(context,operation).asBoolean();
    JMSService.addService(serviceTarget,activeMQServiceName,overrideInVMSecurity);
    context.completeStep(OperationContext.RollbackHandler.NOOP_ROLLBACK_HANDLER);
  }
}
,OperationContext.Stage.RUNTIME) @TO@ context.addStep(new OperationStepHandler(){
  @Override public void execute(  OperationContext context,  ModelNode operation) throws OperationFailedException {
    final ServiceTarget serviceTarget=context.getServiceTarget();
    final String serverName=context.getCurrentAddressValue();
    final ModelNode model=Resource.Tools.readModel(resource);
    final Configuration configuration=transformConfig(context,serverName,model);
    String bindingsPath=PATHS.get(BINDINGS_DIRECTORY).resolveModelAttribute(context,model.get(PATH,BINDINGS_DIRECTORY)).asString();
    String bindingsRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,BINDINGS_DIRECTORY)).asString();
    String journalPath=PATHS.get(JOURNAL_DIRECTORY).resolveModelAttribute(context,model.get(PATH,JOURNAL_DIRECTORY)).asString();
    String journalRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,JOURNAL_DIRECTORY)).asString();
    String largeMessagePath=PATHS.get(LARGE_MESSAGES_DIRECTORY).resolveModelAttribute(context,model.get(PATH,LARGE_MESSAGES_DIRECTORY)).asString();
    String largeMessageRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,LARGE_MESSAGES_DIRECTORY)).asString();
    String pagingPath=PATHS.get(PAGING_DIRECTORY).resolveModelAttribute(context,model.get(PATH,PAGING_DIRECTORY)).asString();
    String pagingRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,PAGING_DIRECTORY)).asString();
    final ActiveMQServerService serverService=new ActiveMQServerService(configuration,new ActiveMQServerService.PathConfig(bindingsPath,bindingsRelativeToPath,journalPath,journalRelativeToPath,largeMessagePath,largeMessageRelativeToPath,pagingPath,pagingRelativeToPath));
    processIncomingInterceptors(INCOMING_INTERCEPTORS.resolveModelAttribute(context,operation),serverService);
    processOutgoingInterceptors(OUTGOING_INTERCEPTORS.resolveModelAttribute(context,operation),serverService);
    ServiceName activeMQServiceName=MessagingServices.getActiveMQServiceName(serverName);
    final ServiceBuilder<ActiveMQServer> serviceBuilder=serviceTarget.addService(activeMQServiceName,serverService);
    if (context.hasOptionalCapability(JMX_CAPABILITY,ACTIVEMQ_SERVER_CAPABILITY.getDynamicName(serverName),null)) {
      ServiceName jmxCapability=context.getCapabilityServiceName(JMX_CAPABILITY,MBeanServer.class);
      serviceBuilder.addDependency(jmxCapability,MBeanServer.class,serverService.getMBeanServer());
    }
    ModelNode dataSource=JOURNAL_DATASOURCE.resolveModelAttribute(context,model);
    if (dataSource.isDefined()) {
      ServiceName dataSourceCapability=context.getCapabilityServiceName("org.wildfly.data-source",dataSource.asString(),DataSource.class);
      serviceBuilder.addDependency(dataSourceCapability,DataSource.class,serverService.getDataSource());
    }
    serviceBuilder.addDependency(PathManagerService.SERVICE_NAME,PathManager.class,serverService.getPathManagerInjector());
    final ModelNode elytronSecurityDomain=ELYTRON_DOMAIN.resolveModelAttribute(context,model);
    if (elytronSecurityDomain.isDefined()) {
      ServiceName elytronDomainCapability=context.getCapabilityServiceName(ELYTRON_DOMAIN_CAPABILITY,elytronSecurityDomain.asString(),SecurityDomain.class);
      serviceBuilder.addDependency(elytronDomainCapability,SecurityDomain.class,serverService.getElytronDomainInjector());
    }
 else {
      String domain=SECURITY_DOMAIN.resolveModelAttribute(context,model).asString();
      serviceBuilder.addDependency(DependencyType.REQUIRED,SecurityDomainService.SERVICE_NAME.append(domain),SecurityDomainContext.class,serverService.getSecurityDomainContextInjector());
    }
    addBridgeCredentialStoreReference(serverService,configuration,BridgeDefinition.CREDENTIAL_REFERENCE,context,model,serviceBuilder);
    addClusterCredentialStoreReference(serverService,ServerDefinition.CREDENTIAL_REFERENCE,context,model,serviceBuilder);
    final Set<String> socketBindings=new HashSet<String>();
    TransportConfigOperationHandlers.processAcceptors(context,configuration,model,socketBindings);
    if (model.hasDefined(HTTP_ACCEPTOR)) {
      for (      final Property property : model.get(HTTP_ACCEPTOR).asPropertyList()) {
        String httpListener=HTTPAcceptorDefinition.HTTP_LISTENER.resolveModelAttribute(context,property.getValue()).asString();
        serviceBuilder.addDependency(MessagingServices.HTTP_UPGRADE_REGISTRY.append(httpListener));
      }
    }
    for (    final String socketBinding : socketBindings) {
      final ServiceName socketName=SocketBinding.JBOSS_BINDING_NAME.append(socketBinding);
      serviceBuilder.addDependency(socketName,SocketBinding.class,serverService.getSocketBindingInjector(socketBinding));
    }
    final Set<String> outboundSocketBindings=new HashSet<String>();
    TransportConfigOperationHandlers.processConnectors(context,configuration,model,outboundSocketBindings);
    for (    final String outboundSocketBinding : outboundSocketBindings) {
      final ServiceName outboundSocketName=OutboundSocketBinding.OUTBOUND_SOCKET_BINDING_BASE_SERVICE_NAME.append(outboundSocketBinding);
      serviceBuilder.addDependency(DependencyType.OPTIONAL,outboundSocketName,OutboundSocketBinding.class,serverService.getOutboundSocketBindingInjector(outboundSocketBinding));
      if (!socketBindings.contains(outboundSocketBinding)) {
        final ServiceName socketName=SocketBinding.JBOSS_BINDING_NAME.append(outboundSocketBinding);
        serviceBuilder.addDependency(DependencyType.OPTIONAL,socketName,SocketBinding.class,serverService.getSocketBindingInjector(outboundSocketBinding));
      }
    }
    BroadcastGroupAdd.addBroadcastGroupConfigs(context,configuration,model);
    final List<BroadcastGroupConfiguration> broadcastGroupConfigurations=configuration.getBroadcastGroupConfigurations();
    final Map<String,DiscoveryGroupConfiguration> discoveryGroupConfigurations=configuration.getDiscoveryGroupConfigurations();
    if (broadcastGroupConfigurations != null) {
      for (      final BroadcastGroupConfiguration config : broadcastGroupConfigurations) {
        final String name=config.getName();
        final String key="broadcast" + name;
        ModelNode broadcastGroupModel=model.get(BROADCAST_GROUP,name);
        if (broadcastGroupModel.hasDefined(JGROUPS_CHANNEL.getName())) {
          ModelNode channelFactory=BroadcastGroupDefinition.JGROUPS_STACK.resolveModelAttribute(context,broadcastGroupModel);
          ServiceName channelFactoryServiceName=channelFactory.isDefined() ? JGroupsRequirement.CHANNEL_FACTORY.getServiceName(context,channelFactory.asString()) : JGroupsDefaultRequirement.CHANNEL_FACTORY.getServiceName(context);
          String channelName=JGROUPS_CHANNEL.resolveModelAttribute(context,broadcastGroupModel).asString();
          serviceBuilder.addDependency(channelFactoryServiceName,ChannelFactory.class,serverService.getJGroupsInjector(key));
          serverService.getJGroupsChannels().put(key,channelName);
        }
 else {
          final ServiceName groupBinding=GroupBindingService.getBroadcastBaseServiceName(activeMQServiceName).append(name);
          serviceBuilder.addDependency(groupBinding,SocketBinding.class,serverService.getGroupBindingInjector(key));
        }
      }
    }
    if (discoveryGroupConfigurations != null) {
      for (      final DiscoveryGroupConfiguration config : discoveryGroupConfigurations.values()) {
        final String name=config.getName();
        final String key="discovery" + name;
        ModelNode discoveryGroupModel=model.get(DISCOVERY_GROUP,name);
        if (discoveryGroupModel.hasDefined(JGROUPS_CHANNEL.getName())) {
          ModelNode channelFactory=DiscoveryGroupDefinition.JGROUPS_STACK.resolveModelAttribute(context,discoveryGroupModel);
          ServiceName channelFactoryServiceName=channelFactory.isDefined() ? JGroupsRequirement.CHANNEL_FACTORY.getServiceName(context,channelFactory.asString()) : JGroupsDefaultRequirement.CHANNEL_FACTORY.getServiceName(context);
          String channelName=JGROUPS_CHANNEL.resolveModelAttribute(context,discoveryGroupModel).asString();
          serviceBuilder.addDependency(channelFactoryServiceName,ChannelFactory.class,serverService.getJGroupsInjector(key));
          serverService.getJGroupsChannels().put(key,channelName);
        }
 else {
          final ServiceName groupBinding=GroupBindingService.getDiscoveryBaseServiceName(activeMQServiceName).append(name);
          serviceBuilder.addDependency(groupBinding,SocketBinding.class,serverService.getGroupBindingInjector(key));
        }
      }
    }
    ServiceController<ActiveMQServer> activeMQServerServiceController=serviceBuilder.install();
    ((ActiveMQServerResource)resource).setActiveMQServerServiceController(activeMQServerServiceController);
    boolean overrideInVMSecurity=OVERRIDE_IN_VM_SECURITY.resolveModelAttribute(context,operation).asBoolean();
    JMSService.addService(serviceTarget,activeMQServiceName,overrideInVMSecurity);
    context.completeStep(OperationContext.RollbackHandler.NOOP_ROLLBACK_HANDLER);
  }
}
,OperationContext.Stage.RUNTIME) @AT@ 15264 @LENGTH@ 12160
------UPD SimpleName@@MethodName:addStep:[new OperationStepHandler(){
  @Override public void execute(  OperationContext context,  ModelNode operation) throws OperationFailedException {
    final ServiceTarget serviceTarget=context.getServiceTarget();
    final String serverName=context.getCurrentAddressValue();
    final ModelNode model=Resource.Tools.readModel(resource);
    final Configuration configuration=transformConfig(context,serverName,model);
    String bindingsPath=PATHS.get(BINDINGS_DIRECTORY).resolveModelAttribute(context,model.get(PATH,BINDINGS_DIRECTORY)).asString();
    String bindingsRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,BINDINGS_DIRECTORY)).asString();
    String journalPath=PATHS.get(JOURNAL_DIRECTORY).resolveModelAttribute(context,model.get(PATH,JOURNAL_DIRECTORY)).asString();
    String journalRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,JOURNAL_DIRECTORY)).asString();
    String largeMessagePath=PATHS.get(LARGE_MESSAGES_DIRECTORY).resolveModelAttribute(context,model.get(PATH,LARGE_MESSAGES_DIRECTORY)).asString();
    String largeMessageRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,LARGE_MESSAGES_DIRECTORY)).asString();
    String pagingPath=PATHS.get(PAGING_DIRECTORY).resolveModelAttribute(context,model.get(PATH,PAGING_DIRECTORY)).asString();
    String pagingRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,PAGING_DIRECTORY)).asString();
    final ActiveMQServerService serverService=new ActiveMQServerService(configuration,new ActiveMQServerService.PathConfig(bindingsPath,bindingsRelativeToPath,journalPath,journalRelativeToPath,largeMessagePath,largeMessageRelativeToPath,pagingPath,pagingRelativeToPath));
    processIncomingInterceptors(INCOMING_INTERCEPTORS.resolveModelAttribute(context,operation),serverService);
    processOutgoingInterceptors(OUTGOING_INTERCEPTORS.resolveModelAttribute(context,operation),serverService);
    ServiceName activeMQServiceName=MessagingServices.getActiveMQServiceName(serverName);
    final ServiceBuilder<ActiveMQServer> serviceBuilder=serviceTarget.addService(activeMQServiceName,serverService);
    if (context.hasOptionalCapability(JMX_CAPABILITY,ACTIVEMQ_SERVER_CAPABILITY.getDynamicName(serverName),null)) {
      ServiceName jmxCapability=context.getCapabilityServiceName(JMX_CAPABILITY,MBeanServer.class);
      serviceBuilder.addDependency(jmxCapability,MBeanServer.class,serverService.getMBeanServer());
    }
    ModelNode dataSource=JOURNAL_DATASOURCE.resolveModelAttribute(context,model);
    if (dataSource.isDefined()) {
      ServiceName dataSourceCapability=context.getCapabilityServiceName("org.wildfly.data-source",dataSource.asString(),DataSource.class);
      serviceBuilder.addDependency(dataSourceCapability,DataSource.class,serverService.getDataSource());
    }
    serviceBuilder.addDependency(PathManagerService.SERVICE_NAME,PathManager.class,serverService.getPathManagerInjector());
    String domain=SECURITY_DOMAIN.resolveModelAttribute(context,model).asString();
    serviceBuilder.addDependency(DependencyType.REQUIRED,SecurityDomainService.SERVICE_NAME.append(domain),SecurityDomainContext.class,serverService.getSecurityDomainContextInjector());
    final ModelNode elytronSecurityDomain=ELYTRON_DOMAIN.resolveModelAttribute(context,model);
    if (elytronSecurityDomain.isDefined()) {
      ServiceName elytronDomainCapability=context.getCapabilityServiceName(ELYTRON_DOMAIN_CAPABILITY,elytronSecurityDomain.asString(),SecurityDomain.class);
      serviceBuilder.addDependency(elytronDomainCapability,SecurityDomain.class,serverService.getElytronDomainInjector());
    }
    addBridgeCredentialStoreReference(serverService,configuration,BridgeDefinition.CREDENTIAL_REFERENCE,context,model,serviceBuilder);
    addClusterCredentialStoreReference(serverService,ServerDefinition.CREDENTIAL_REFERENCE,context,model,serviceBuilder);
    final Set<String> socketBindings=new HashSet<String>();
    TransportConfigOperationHandlers.processAcceptors(context,configuration,model,socketBindings);
    if (model.hasDefined(HTTP_ACCEPTOR)) {
      for (      final Property property : model.get(HTTP_ACCEPTOR).asPropertyList()) {
        String httpListener=HTTPAcceptorDefinition.HTTP_LISTENER.resolveModelAttribute(context,property.getValue()).asString();
        serviceBuilder.addDependency(MessagingServices.HTTP_UPGRADE_REGISTRY.append(httpListener));
      }
    }
    for (    final String socketBinding : socketBindings) {
      final ServiceName socketName=SocketBinding.JBOSS_BINDING_NAME.append(socketBinding);
      serviceBuilder.addDependency(socketName,SocketBinding.class,serverService.getSocketBindingInjector(socketBinding));
    }
    final Set<String> outboundSocketBindings=new HashSet<String>();
    TransportConfigOperationHandlers.processConnectors(context,configuration,model,outboundSocketBindings);
    for (    final String outboundSocketBinding : outboundSocketBindings) {
      final ServiceName outboundSocketName=OutboundSocketBinding.OUTBOUND_SOCKET_BINDING_BASE_SERVICE_NAME.append(outboundSocketBinding);
      serviceBuilder.addDependency(DependencyType.OPTIONAL,outboundSocketName,OutboundSocketBinding.class,serverService.getOutboundSocketBindingInjector(outboundSocketBinding));
      if (!socketBindings.contains(outboundSocketBinding)) {
        final ServiceName socketName=SocketBinding.JBOSS_BINDING_NAME.append(outboundSocketBinding);
        serviceBuilder.addDependency(DependencyType.OPTIONAL,socketName,SocketBinding.class,serverService.getSocketBindingInjector(outboundSocketBinding));
      }
    }
    BroadcastGroupAdd.addBroadcastGroupConfigs(context,configuration,model);
    final List<BroadcastGroupConfiguration> broadcastGroupConfigurations=configuration.getBroadcastGroupConfigurations();
    final Map<String,DiscoveryGroupConfiguration> discoveryGroupConfigurations=configuration.getDiscoveryGroupConfigurations();
    if (broadcastGroupConfigurations != null) {
      for (      final BroadcastGroupConfiguration config : broadcastGroupConfigurations) {
        final String name=config.getName();
        final String key="broadcast" + name;
        ModelNode broadcastGroupModel=model.get(BROADCAST_GROUP,name);
        if (broadcastGroupModel.hasDefined(JGROUPS_CHANNEL.getName())) {
          ModelNode channelFactory=BroadcastGroupDefinition.JGROUPS_STACK.resolveModelAttribute(context,broadcastGroupModel);
          ServiceName channelFactoryServiceName=channelFactory.isDefined() ? JGroupsRequirement.CHANNEL_FACTORY.getServiceName(context,channelFactory.asString()) : JGroupsDefaultRequirement.CHANNEL_FACTORY.getServiceName(context);
          String channelName=JGROUPS_CHANNEL.resolveModelAttribute(context,broadcastGroupModel).asString();
          serviceBuilder.addDependency(channelFactoryServiceName,ChannelFactory.class,serverService.getJGroupsInjector(key));
          serverService.getJGroupsChannels().put(key,channelName);
        }
 else {
          final ServiceName groupBinding=GroupBindingService.getBroadcastBaseServiceName(activeMQServiceName).append(name);
          serviceBuilder.addDependency(groupBinding,SocketBinding.class,serverService.getGroupBindingInjector(key));
        }
      }
    }
    if (discoveryGroupConfigurations != null) {
      for (      final DiscoveryGroupConfiguration config : discoveryGroupConfigurations.values()) {
        final String name=config.getName();
        final String key="discovery" + name;
        ModelNode discoveryGroupModel=model.get(DISCOVERY_GROUP,name);
        if (discoveryGroupModel.hasDefined(JGROUPS_CHANNEL.getName())) {
          ModelNode channelFactory=DiscoveryGroupDefinition.JGROUPS_STACK.resolveModelAttribute(context,discoveryGroupModel);
          ServiceName channelFactoryServiceName=channelFactory.isDefined() ? JGroupsRequirement.CHANNEL_FACTORY.getServiceName(context,channelFactory.asString()) : JGroupsDefaultRequirement.CHANNEL_FACTORY.getServiceName(context);
          String channelName=JGROUPS_CHANNEL.resolveModelAttribute(context,discoveryGroupModel).asString();
          serviceBuilder.addDependency(channelFactoryServiceName,ChannelFactory.class,serverService.getJGroupsInjector(key));
          serverService.getJGroupsChannels().put(key,channelName);
        }
 else {
          final ServiceName groupBinding=GroupBindingService.getDiscoveryBaseServiceName(activeMQServiceName).append(name);
          serviceBuilder.addDependency(groupBinding,SocketBinding.class,serverService.getGroupBindingInjector(key));
        }
      }
    }
    ServiceController<ActiveMQServer> activeMQServerServiceController=serviceBuilder.install();
    ((ActiveMQServerResource)resource).setActiveMQServerServiceController(activeMQServerServiceController);
    boolean overrideInVMSecurity=OVERRIDE_IN_VM_SECURITY.resolveModelAttribute(context,operation).asBoolean();
    JMSService.addService(serviceTarget,activeMQServiceName,overrideInVMSecurity);
    context.completeStep(OperationContext.RollbackHandler.NOOP_ROLLBACK_HANDLER);
  }
}
, OperationContext.Stage.RUNTIME] @TO@ MethodName:addStep:[new OperationStepHandler(){
  @Override public void execute(  OperationContext context,  ModelNode operation) throws OperationFailedException {
    final ServiceTarget serviceTarget=context.getServiceTarget();
    final String serverName=context.getCurrentAddressValue();
    final ModelNode model=Resource.Tools.readModel(resource);
    final Configuration configuration=transformConfig(context,serverName,model);
    String bindingsPath=PATHS.get(BINDINGS_DIRECTORY).resolveModelAttribute(context,model.get(PATH,BINDINGS_DIRECTORY)).asString();
    String bindingsRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,BINDINGS_DIRECTORY)).asString();
    String journalPath=PATHS.get(JOURNAL_DIRECTORY).resolveModelAttribute(context,model.get(PATH,JOURNAL_DIRECTORY)).asString();
    String journalRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,JOURNAL_DIRECTORY)).asString();
    String largeMessagePath=PATHS.get(LARGE_MESSAGES_DIRECTORY).resolveModelAttribute(context,model.get(PATH,LARGE_MESSAGES_DIRECTORY)).asString();
    String largeMessageRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,LARGE_MESSAGES_DIRECTORY)).asString();
    String pagingPath=PATHS.get(PAGING_DIRECTORY).resolveModelAttribute(context,model.get(PATH,PAGING_DIRECTORY)).asString();
    String pagingRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,PAGING_DIRECTORY)).asString();
    final ActiveMQServerService serverService=new ActiveMQServerService(configuration,new ActiveMQServerService.PathConfig(bindingsPath,bindingsRelativeToPath,journalPath,journalRelativeToPath,largeMessagePath,largeMessageRelativeToPath,pagingPath,pagingRelativeToPath));
    processIncomingInterceptors(INCOMING_INTERCEPTORS.resolveModelAttribute(context,operation),serverService);
    processOutgoingInterceptors(OUTGOING_INTERCEPTORS.resolveModelAttribute(context,operation),serverService);
    ServiceName activeMQServiceName=MessagingServices.getActiveMQServiceName(serverName);
    final ServiceBuilder<ActiveMQServer> serviceBuilder=serviceTarget.addService(activeMQServiceName,serverService);
    if (context.hasOptionalCapability(JMX_CAPABILITY,ACTIVEMQ_SERVER_CAPABILITY.getDynamicName(serverName),null)) {
      ServiceName jmxCapability=context.getCapabilityServiceName(JMX_CAPABILITY,MBeanServer.class);
      serviceBuilder.addDependency(jmxCapability,MBeanServer.class,serverService.getMBeanServer());
    }
    ModelNode dataSource=JOURNAL_DATASOURCE.resolveModelAttribute(context,model);
    if (dataSource.isDefined()) {
      ServiceName dataSourceCapability=context.getCapabilityServiceName("org.wildfly.data-source",dataSource.asString(),DataSource.class);
      serviceBuilder.addDependency(dataSourceCapability,DataSource.class,serverService.getDataSource());
    }
    serviceBuilder.addDependency(PathManagerService.SERVICE_NAME,PathManager.class,serverService.getPathManagerInjector());
    final ModelNode elytronSecurityDomain=ELYTRON_DOMAIN.resolveModelAttribute(context,model);
    if (elytronSecurityDomain.isDefined()) {
      ServiceName elytronDomainCapability=context.getCapabilityServiceName(ELYTRON_DOMAIN_CAPABILITY,elytronSecurityDomain.asString(),SecurityDomain.class);
      serviceBuilder.addDependency(elytronDomainCapability,SecurityDomain.class,serverService.getElytronDomainInjector());
    }
 else {
      String domain=SECURITY_DOMAIN.resolveModelAttribute(context,model).asString();
      serviceBuilder.addDependency(DependencyType.REQUIRED,SecurityDomainService.SERVICE_NAME.append(domain),SecurityDomainContext.class,serverService.getSecurityDomainContextInjector());
    }
    addBridgeCredentialStoreReference(serverService,configuration,BridgeDefinition.CREDENTIAL_REFERENCE,context,model,serviceBuilder);
    addClusterCredentialStoreReference(serverService,ServerDefinition.CREDENTIAL_REFERENCE,context,model,serviceBuilder);
    final Set<String> socketBindings=new HashSet<String>();
    TransportConfigOperationHandlers.processAcceptors(context,configuration,model,socketBindings);
    if (model.hasDefined(HTTP_ACCEPTOR)) {
      for (      final Property property : model.get(HTTP_ACCEPTOR).asPropertyList()) {
        String httpListener=HTTPAcceptorDefinition.HTTP_LISTENER.resolveModelAttribute(context,property.getValue()).asString();
        serviceBuilder.addDependency(MessagingServices.HTTP_UPGRADE_REGISTRY.append(httpListener));
      }
    }
    for (    final String socketBinding : socketBindings) {
      final ServiceName socketName=SocketBinding.JBOSS_BINDING_NAME.append(socketBinding);
      serviceBuilder.addDependency(socketName,SocketBinding.class,serverService.getSocketBindingInjector(socketBinding));
    }
    final Set<String> outboundSocketBindings=new HashSet<String>();
    TransportConfigOperationHandlers.processConnectors(context,configuration,model,outboundSocketBindings);
    for (    final String outboundSocketBinding : outboundSocketBindings) {
      final ServiceName outboundSocketName=OutboundSocketBinding.OUTBOUND_SOCKET_BINDING_BASE_SERVICE_NAME.append(outboundSocketBinding);
      serviceBuilder.addDependency(DependencyType.OPTIONAL,outboundSocketName,OutboundSocketBinding.class,serverService.getOutboundSocketBindingInjector(outboundSocketBinding));
      if (!socketBindings.contains(outboundSocketBinding)) {
        final ServiceName socketName=SocketBinding.JBOSS_BINDING_NAME.append(outboundSocketBinding);
        serviceBuilder.addDependency(DependencyType.OPTIONAL,socketName,SocketBinding.class,serverService.getSocketBindingInjector(outboundSocketBinding));
      }
    }
    BroadcastGroupAdd.addBroadcastGroupConfigs(context,configuration,model);
    final List<BroadcastGroupConfiguration> broadcastGroupConfigurations=configuration.getBroadcastGroupConfigurations();
    final Map<String,DiscoveryGroupConfiguration> discoveryGroupConfigurations=configuration.getDiscoveryGroupConfigurations();
    if (broadcastGroupConfigurations != null) {
      for (      final BroadcastGroupConfiguration config : broadcastGroupConfigurations) {
        final String name=config.getName();
        final String key="broadcast" + name;
        ModelNode broadcastGroupModel=model.get(BROADCAST_GROUP,name);
        if (broadcastGroupModel.hasDefined(JGROUPS_CHANNEL.getName())) {
          ModelNode channelFactory=BroadcastGroupDefinition.JGROUPS_STACK.resolveModelAttribute(context,broadcastGroupModel);
          ServiceName channelFactoryServiceName=channelFactory.isDefined() ? JGroupsRequirement.CHANNEL_FACTORY.getServiceName(context,channelFactory.asString()) : JGroupsDefaultRequirement.CHANNEL_FACTORY.getServiceName(context);
          String channelName=JGROUPS_CHANNEL.resolveModelAttribute(context,broadcastGroupModel).asString();
          serviceBuilder.addDependency(channelFactoryServiceName,ChannelFactory.class,serverService.getJGroupsInjector(key));
          serverService.getJGroupsChannels().put(key,channelName);
        }
 else {
          final ServiceName groupBinding=GroupBindingService.getBroadcastBaseServiceName(activeMQServiceName).append(name);
          serviceBuilder.addDependency(groupBinding,SocketBinding.class,serverService.getGroupBindingInjector(key));
        }
      }
    }
    if (discoveryGroupConfigurations != null) {
      for (      final DiscoveryGroupConfiguration config : discoveryGroupConfigurations.values()) {
        final String name=config.getName();
        final String key="discovery" + name;
        ModelNode discoveryGroupModel=model.get(DISCOVERY_GROUP,name);
        if (discoveryGroupModel.hasDefined(JGROUPS_CHANNEL.getName())) {
          ModelNode channelFactory=DiscoveryGroupDefinition.JGROUPS_STACK.resolveModelAttribute(context,discoveryGroupModel);
          ServiceName channelFactoryServiceName=channelFactory.isDefined() ? JGroupsRequirement.CHANNEL_FACTORY.getServiceName(context,channelFactory.asString()) : JGroupsDefaultRequirement.CHANNEL_FACTORY.getServiceName(context);
          String channelName=JGROUPS_CHANNEL.resolveModelAttribute(context,discoveryGroupModel).asString();
          serviceBuilder.addDependency(channelFactoryServiceName,ChannelFactory.class,serverService.getJGroupsInjector(key));
          serverService.getJGroupsChannels().put(key,channelName);
        }
 else {
          final ServiceName groupBinding=GroupBindingService.getDiscoveryBaseServiceName(activeMQServiceName).append(name);
          serviceBuilder.addDependency(groupBinding,SocketBinding.class,serverService.getGroupBindingInjector(key));
        }
      }
    }
    ServiceController<ActiveMQServer> activeMQServerServiceController=serviceBuilder.install();
    ((ActiveMQServerResource)resource).setActiveMQServerServiceController(activeMQServerServiceController);
    boolean overrideInVMSecurity=OVERRIDE_IN_VM_SECURITY.resolveModelAttribute(context,operation).asBoolean();
    JMSService.addService(serviceTarget,activeMQServiceName,overrideInVMSecurity);
    context.completeStep(OperationContext.RollbackHandler.NOOP_ROLLBACK_HANDLER);
  }
}
, OperationContext.Stage.RUNTIME] @AT@ 15272 @LENGTH@ 12152

