UPD ExpressionStatement@@MethodInvocation:context.addStep(new OperationStepHandler(){
  @Override public void execute(  OperationContext context,  ModelNode operation) throws OperationFailedException {
    final ServiceTarget serviceTarget=context.getServiceTarget();
    final String serverName=PathAddress.pathAddress(operation.require(OP_ADDR)).getLastElement().getValue();
    final ModelNode model=Resource.Tools.readModel(resource);
    final Configuration configuration=transformConfig(context,serverName,model);
    String bindingsPath=PATHS.get(BINDINGS_DIRECTORY).resolveModelAttribute(context,model.get(PATH,BINDINGS_DIRECTORY)).asString();
    String bindingsRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,BINDINGS_DIRECTORY)).asString();
    String journalPath=PATHS.get(JOURNAL_DIRECTORY).resolveModelAttribute(context,model.get(PATH,JOURNAL_DIRECTORY)).asString();
    String journalRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,JOURNAL_DIRECTORY)).asString();
    String largeMessagePath=PATHS.get(LARGE_MESSAGES_DIRECTORY).resolveModelAttribute(context,model.get(PATH,LARGE_MESSAGES_DIRECTORY)).asString();
    String largeMessageRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,LARGE_MESSAGES_DIRECTORY)).asString();
    String pagingPath=PATHS.get(PAGING_DIRECTORY).resolveModelAttribute(context,model.get(PATH,PAGING_DIRECTORY)).asString();
    String pagingRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,PAGING_DIRECTORY)).asString();
    final HornetQService hqService=new HornetQService(configuration,new HornetQService.PathConfig(bindingsPath,bindingsRelativeToPath,journalPath,journalRelativeToPath,largeMessagePath,largeMessageRelativeToPath,pagingPath,pagingRelativeToPath));
    ServiceName hqServiceName=MessagingServices.getHornetQServiceName(serverName);
    final ServiceBuilder<HornetQServer> serviceBuilder=serviceTarget.addService(hqServiceName,hqService).addDependency(DependencyType.OPTIONAL,ServiceName.JBOSS.append("mbean","server"),MBeanServer.class,hqService.getMBeanServer());
    serviceBuilder.addDependency(PathManagerService.SERVICE_NAME,PathManager.class,hqService.getPathManagerInjector());
    String domain=SECURITY_DOMAIN.resolveModelAttribute(context,model).asString();
    serviceBuilder.addDependency(DependencyType.REQUIRED,SecurityDomainService.SERVICE_NAME.append(domain),SecurityDomainContext.class,hqService.getSecurityDomainContextInjector());
    final Set<String> socketBindings=new HashSet<String>();
    TransportConfigOperationHandlers.processAcceptors(context,configuration,model,socketBindings);
    if (model.hasDefined(HTTP_ACCEPTOR)) {
      for (      final Property property : model.get(HTTP_ACCEPTOR).asPropertyList()) {
        String httpListener=HTTPAcceptorDefinition.HTTP_LISTENER.resolveModelAttribute(context,property.getValue()).asString();
        serviceBuilder.addDependency(HTTPUpgradeService.HTTP_UPGRADE_REGISTRY.append(httpListener));
      }
    }
    for (    final String socketBinding : socketBindings) {
      final ServiceName socketName=SocketBinding.JBOSS_BINDING_NAME.append(socketBinding);
      serviceBuilder.addDependency(socketName,SocketBinding.class,hqService.getSocketBindingInjector(socketBinding));
    }
    final Set<String> outboundSocketBindings=new HashSet<String>();
    TransportConfigOperationHandlers.processConnectors(context,configuration,model,outboundSocketBindings);
    for (    final String outboundSocketBinding : outboundSocketBindings) {
      final ServiceName outboundSocketName=OutboundSocketBinding.OUTBOUND_SOCKET_BINDING_BASE_SERVICE_NAME.append(outboundSocketBinding);
      serviceBuilder.addDependency(DependencyType.OPTIONAL,outboundSocketName,OutboundSocketBinding.class,hqService.getOutboundSocketBindingInjector(outboundSocketBinding));
      if (!socketBindings.contains(outboundSocketBinding)) {
        final ServiceName socketName=SocketBinding.JBOSS_BINDING_NAME.append(outboundSocketBinding);
        serviceBuilder.addDependency(DependencyType.OPTIONAL,socketName,SocketBinding.class,hqService.getSocketBindingInjector(outboundSocketBinding));
      }
    }
    BroadcastGroupAdd.addBroadcastGroupConfigs(context,configuration,model);
    final List<BroadcastGroupConfiguration> broadcastGroupConfigurations=configuration.getBroadcastGroupConfigurations();
    final Map<String,DiscoveryGroupConfiguration> discoveryGroupConfigurations=configuration.getDiscoveryGroupConfigurations();
    if (broadcastGroupConfigurations != null) {
      for (      final BroadcastGroupConfiguration config : broadcastGroupConfigurations) {
        final String name=config.getName();
        final String key="broadcast" + name;
        ModelNode broadcastGroupModel=model.get(BROADCAST_GROUP,name);
        if (broadcastGroupModel.hasDefined(JGROUPS_STACK.getName())) {
          String jgroupsStack=JGROUPS_STACK.resolveModelAttribute(context,broadcastGroupModel).asString();
          String channelName=JGROUPS_CHANNEL.resolveModelAttribute(context,broadcastGroupModel).asString();
          serviceBuilder.addDependency(ServiceName.JBOSS.append("jgroups").append("stack").append(jgroupsStack),ChannelFactory.class,hqService.getJGroupsInjector(key));
          hqService.getJGroupsChannels().put(key,channelName);
        }
 else {
          final ServiceName groupBinding=GroupBindingService.getBroadcastBaseServiceName(hqServiceName).append(name);
          serviceBuilder.addDependency(groupBinding,SocketBinding.class,hqService.getGroupBindingInjector(key));
        }
      }
    }
    if (discoveryGroupConfigurations != null) {
      for (      final DiscoveryGroupConfiguration config : discoveryGroupConfigurations.values()) {
        final String name=config.getName();
        final String key="discovery" + name;
        ModelNode discoveryGroupModel=model.get(DISCOVERY_GROUP,name);
        if (discoveryGroupModel.hasDefined(JGROUPS_STACK.getName())) {
          String jgroupsStack=JGROUPS_STACK.resolveModelAttribute(context,discoveryGroupModel).asString();
          String channelName=JGROUPS_CHANNEL.resolveModelAttribute(context,discoveryGroupModel).asString();
          serviceBuilder.addDependency(ServiceName.JBOSS.append("jgroups").append("stack").append(jgroupsStack),ChannelFactory.class,hqService.getJGroupsInjector(key));
          hqService.getJGroupsChannels().put(key,channelName);
        }
 else {
          final ServiceName groupBinding=GroupBindingService.getDiscoveryBaseServiceName(hqServiceName).append(name);
          serviceBuilder.addDependency(groupBinding,SocketBinding.class,hqService.getGroupBindingInjector(key));
        }
      }
    }
    serviceBuilder.addListener(verificationHandler);
    ServiceController<HornetQServer> hqServerServiceController=serviceBuilder.install();
    resource.setHornetQServerServiceController(hqServerServiceController);
    newControllers.add(hqServerServiceController);
    boolean overrideInVMSecurity=OVERRIDE_IN_VM_SECURITY.resolveModelAttribute(context,operation).asBoolean();
    newControllers.add(JMSService.addService(serviceTarget,hqServiceName,overrideInVMSecurity,verificationHandler));
    context.completeStep(OperationContext.RollbackHandler.NOOP_ROLLBACK_HANDLER);
  }
}
,OperationContext.Stage.RUNTIME) @TO@ MethodInvocation:context.addStep(new OperationStepHandler(){
  @Override public void execute(  OperationContext context,  ModelNode operation) throws OperationFailedException {
    final ServiceTarget serviceTarget=context.getServiceTarget();
    final String serverName=PathAddress.pathAddress(operation.require(OP_ADDR)).getLastElement().getValue();
    final ModelNode model=Resource.Tools.readModel(resource);
    final Configuration configuration=transformConfig(context,serverName,model);
    String bindingsPath=PATHS.get(BINDINGS_DIRECTORY).resolveModelAttribute(context,model.get(PATH,BINDINGS_DIRECTORY)).asString();
    String bindingsRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,BINDINGS_DIRECTORY)).asString();
    String journalPath=PATHS.get(JOURNAL_DIRECTORY).resolveModelAttribute(context,model.get(PATH,JOURNAL_DIRECTORY)).asString();
    String journalRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,JOURNAL_DIRECTORY)).asString();
    String largeMessagePath=PATHS.get(LARGE_MESSAGES_DIRECTORY).resolveModelAttribute(context,model.get(PATH,LARGE_MESSAGES_DIRECTORY)).asString();
    String largeMessageRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,LARGE_MESSAGES_DIRECTORY)).asString();
    String pagingPath=PATHS.get(PAGING_DIRECTORY).resolveModelAttribute(context,model.get(PATH,PAGING_DIRECTORY)).asString();
    String pagingRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,PAGING_DIRECTORY)).asString();
    final HornetQService hqService=new HornetQService(configuration,new HornetQService.PathConfig(bindingsPath,bindingsRelativeToPath,journalPath,journalRelativeToPath,largeMessagePath,largeMessageRelativeToPath,pagingPath,pagingRelativeToPath));
    ServiceName hqServiceName=MessagingServices.getHornetQServiceName(serverName);
    final ServiceBuilder<HornetQServer> serviceBuilder=serviceTarget.addService(hqServiceName,hqService).addDependency(DependencyType.OPTIONAL,ServiceName.JBOSS.append("mbean","server"),MBeanServer.class,hqService.getMBeanServer());
    serviceBuilder.addDependency(PathManagerService.SERVICE_NAME,PathManager.class,hqService.getPathManagerInjector());
    String domain=SECURITY_DOMAIN.resolveModelAttribute(context,model).asString();
    serviceBuilder.addDependency(DependencyType.REQUIRED,SecurityDomainService.SERVICE_NAME.append(domain),SecurityDomainContext.class,hqService.getSecurityDomainContextInjector());
    final Set<String> socketBindings=new HashSet<String>();
    TransportConfigOperationHandlers.processAcceptors(context,configuration,model,socketBindings);
    if (model.hasDefined(HTTP_ACCEPTOR)) {
      for (      final Property property : model.get(HTTP_ACCEPTOR).asPropertyList()) {
        String httpListener=HTTPAcceptorDefinition.HTTP_LISTENER.resolveModelAttribute(context,property.getValue()).asString();
        serviceBuilder.addDependency(HTTPUpgradeService.HTTP_UPGRADE_REGISTRY.append(httpListener));
      }
    }
    for (    final String socketBinding : socketBindings) {
      final ServiceName socketName=SocketBinding.JBOSS_BINDING_NAME.append(socketBinding);
      serviceBuilder.addDependency(socketName,SocketBinding.class,hqService.getSocketBindingInjector(socketBinding));
    }
    final Set<String> outboundSocketBindings=new HashSet<String>();
    TransportConfigOperationHandlers.processConnectors(context,configuration,model,outboundSocketBindings);
    for (    final String outboundSocketBinding : outboundSocketBindings) {
      final ServiceName outboundSocketName=OutboundSocketBinding.OUTBOUND_SOCKET_BINDING_BASE_SERVICE_NAME.append(outboundSocketBinding);
      serviceBuilder.addDependency(DependencyType.OPTIONAL,outboundSocketName,OutboundSocketBinding.class,hqService.getOutboundSocketBindingInjector(outboundSocketBinding));
      if (!socketBindings.contains(outboundSocketBinding)) {
        final ServiceName socketName=SocketBinding.JBOSS_BINDING_NAME.append(outboundSocketBinding);
        serviceBuilder.addDependency(DependencyType.OPTIONAL,socketName,SocketBinding.class,hqService.getSocketBindingInjector(outboundSocketBinding));
      }
    }
    BroadcastGroupAdd.addBroadcastGroupConfigs(context,configuration,model);
    final List<BroadcastGroupConfiguration> broadcastGroupConfigurations=configuration.getBroadcastGroupConfigurations();
    final Map<String,DiscoveryGroupConfiguration> discoveryGroupConfigurations=configuration.getDiscoveryGroupConfigurations();
    if (broadcastGroupConfigurations != null) {
      for (      final BroadcastGroupConfiguration config : broadcastGroupConfigurations) {
        final String name=config.getName();
        final String key="broadcast" + name;
        ModelNode broadcastGroupModel=model.get(BROADCAST_GROUP,name);
        if (broadcastGroupModel.hasDefined(JGROUPS_STACK.getName())) {
          String jgroupsStack=JGROUPS_STACK.resolveModelAttribute(context,broadcastGroupModel).asString();
          String channelName=JGROUPS_CHANNEL.resolveModelAttribute(context,broadcastGroupModel).asString();
          serviceBuilder.addDependency(ChannelFactoryService.getServiceName(jgroupsStack),ChannelFactory.class,hqService.getJGroupsInjector(key));
          hqService.getJGroupsChannels().put(key,channelName);
        }
 else {
          final ServiceName groupBinding=GroupBindingService.getBroadcastBaseServiceName(hqServiceName).append(name);
          serviceBuilder.addDependency(groupBinding,SocketBinding.class,hqService.getGroupBindingInjector(key));
        }
      }
    }
    if (discoveryGroupConfigurations != null) {
      for (      final DiscoveryGroupConfiguration config : discoveryGroupConfigurations.values()) {
        final String name=config.getName();
        final String key="discovery" + name;
        ModelNode discoveryGroupModel=model.get(DISCOVERY_GROUP,name);
        if (discoveryGroupModel.hasDefined(JGROUPS_STACK.getName())) {
          String jgroupsStack=JGROUPS_STACK.resolveModelAttribute(context,discoveryGroupModel).asString();
          String channelName=JGROUPS_CHANNEL.resolveModelAttribute(context,discoveryGroupModel).asString();
          serviceBuilder.addDependency(ChannelFactoryService.getServiceName(jgroupsStack),ChannelFactory.class,hqService.getJGroupsInjector(key));
          hqService.getJGroupsChannels().put(key,channelName);
        }
 else {
          final ServiceName groupBinding=GroupBindingService.getDiscoveryBaseServiceName(hqServiceName).append(name);
          serviceBuilder.addDependency(groupBinding,SocketBinding.class,hqService.getGroupBindingInjector(key));
        }
      }
    }
    serviceBuilder.addListener(verificationHandler);
    ServiceController<HornetQServer> hqServerServiceController=serviceBuilder.install();
    resource.setHornetQServerServiceController(hqServerServiceController);
    newControllers.add(hqServerServiceController);
    boolean overrideInVMSecurity=OVERRIDE_IN_VM_SECURITY.resolveModelAttribute(context,operation).asBoolean();
    newControllers.add(JMSService.addService(serviceTarget,hqServiceName,overrideInVMSecurity,verificationHandler));
    context.completeStep(OperationContext.RollbackHandler.NOOP_ROLLBACK_HANDLER);
  }
}
,OperationContext.Stage.RUNTIME) @AT@ 12640 @LENGTH@ 9918
---UPD MethodInvocation@@context.addStep(new OperationStepHandler(){
  @Override public void execute(  OperationContext context,  ModelNode operation) throws OperationFailedException {
    final ServiceTarget serviceTarget=context.getServiceTarget();
    final String serverName=PathAddress.pathAddress(operation.require(OP_ADDR)).getLastElement().getValue();
    final ModelNode model=Resource.Tools.readModel(resource);
    final Configuration configuration=transformConfig(context,serverName,model);
    String bindingsPath=PATHS.get(BINDINGS_DIRECTORY).resolveModelAttribute(context,model.get(PATH,BINDINGS_DIRECTORY)).asString();
    String bindingsRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,BINDINGS_DIRECTORY)).asString();
    String journalPath=PATHS.get(JOURNAL_DIRECTORY).resolveModelAttribute(context,model.get(PATH,JOURNAL_DIRECTORY)).asString();
    String journalRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,JOURNAL_DIRECTORY)).asString();
    String largeMessagePath=PATHS.get(LARGE_MESSAGES_DIRECTORY).resolveModelAttribute(context,model.get(PATH,LARGE_MESSAGES_DIRECTORY)).asString();
    String largeMessageRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,LARGE_MESSAGES_DIRECTORY)).asString();
    String pagingPath=PATHS.get(PAGING_DIRECTORY).resolveModelAttribute(context,model.get(PATH,PAGING_DIRECTORY)).asString();
    String pagingRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,PAGING_DIRECTORY)).asString();
    final HornetQService hqService=new HornetQService(configuration,new HornetQService.PathConfig(bindingsPath,bindingsRelativeToPath,journalPath,journalRelativeToPath,largeMessagePath,largeMessageRelativeToPath,pagingPath,pagingRelativeToPath));
    ServiceName hqServiceName=MessagingServices.getHornetQServiceName(serverName);
    final ServiceBuilder<HornetQServer> serviceBuilder=serviceTarget.addService(hqServiceName,hqService).addDependency(DependencyType.OPTIONAL,ServiceName.JBOSS.append("mbean","server"),MBeanServer.class,hqService.getMBeanServer());
    serviceBuilder.addDependency(PathManagerService.SERVICE_NAME,PathManager.class,hqService.getPathManagerInjector());
    String domain=SECURITY_DOMAIN.resolveModelAttribute(context,model).asString();
    serviceBuilder.addDependency(DependencyType.REQUIRED,SecurityDomainService.SERVICE_NAME.append(domain),SecurityDomainContext.class,hqService.getSecurityDomainContextInjector());
    final Set<String> socketBindings=new HashSet<String>();
    TransportConfigOperationHandlers.processAcceptors(context,configuration,model,socketBindings);
    if (model.hasDefined(HTTP_ACCEPTOR)) {
      for (      final Property property : model.get(HTTP_ACCEPTOR).asPropertyList()) {
        String httpListener=HTTPAcceptorDefinition.HTTP_LISTENER.resolveModelAttribute(context,property.getValue()).asString();
        serviceBuilder.addDependency(HTTPUpgradeService.HTTP_UPGRADE_REGISTRY.append(httpListener));
      }
    }
    for (    final String socketBinding : socketBindings) {
      final ServiceName socketName=SocketBinding.JBOSS_BINDING_NAME.append(socketBinding);
      serviceBuilder.addDependency(socketName,SocketBinding.class,hqService.getSocketBindingInjector(socketBinding));
    }
    final Set<String> outboundSocketBindings=new HashSet<String>();
    TransportConfigOperationHandlers.processConnectors(context,configuration,model,outboundSocketBindings);
    for (    final String outboundSocketBinding : outboundSocketBindings) {
      final ServiceName outboundSocketName=OutboundSocketBinding.OUTBOUND_SOCKET_BINDING_BASE_SERVICE_NAME.append(outboundSocketBinding);
      serviceBuilder.addDependency(DependencyType.OPTIONAL,outboundSocketName,OutboundSocketBinding.class,hqService.getOutboundSocketBindingInjector(outboundSocketBinding));
      if (!socketBindings.contains(outboundSocketBinding)) {
        final ServiceName socketName=SocketBinding.JBOSS_BINDING_NAME.append(outboundSocketBinding);
        serviceBuilder.addDependency(DependencyType.OPTIONAL,socketName,SocketBinding.class,hqService.getSocketBindingInjector(outboundSocketBinding));
      }
    }
    BroadcastGroupAdd.addBroadcastGroupConfigs(context,configuration,model);
    final List<BroadcastGroupConfiguration> broadcastGroupConfigurations=configuration.getBroadcastGroupConfigurations();
    final Map<String,DiscoveryGroupConfiguration> discoveryGroupConfigurations=configuration.getDiscoveryGroupConfigurations();
    if (broadcastGroupConfigurations != null) {
      for (      final BroadcastGroupConfiguration config : broadcastGroupConfigurations) {
        final String name=config.getName();
        final String key="broadcast" + name;
        ModelNode broadcastGroupModel=model.get(BROADCAST_GROUP,name);
        if (broadcastGroupModel.hasDefined(JGROUPS_STACK.getName())) {
          String jgroupsStack=JGROUPS_STACK.resolveModelAttribute(context,broadcastGroupModel).asString();
          String channelName=JGROUPS_CHANNEL.resolveModelAttribute(context,broadcastGroupModel).asString();
          serviceBuilder.addDependency(ServiceName.JBOSS.append("jgroups").append("stack").append(jgroupsStack),ChannelFactory.class,hqService.getJGroupsInjector(key));
          hqService.getJGroupsChannels().put(key,channelName);
        }
 else {
          final ServiceName groupBinding=GroupBindingService.getBroadcastBaseServiceName(hqServiceName).append(name);
          serviceBuilder.addDependency(groupBinding,SocketBinding.class,hqService.getGroupBindingInjector(key));
        }
      }
    }
    if (discoveryGroupConfigurations != null) {
      for (      final DiscoveryGroupConfiguration config : discoveryGroupConfigurations.values()) {
        final String name=config.getName();
        final String key="discovery" + name;
        ModelNode discoveryGroupModel=model.get(DISCOVERY_GROUP,name);
        if (discoveryGroupModel.hasDefined(JGROUPS_STACK.getName())) {
          String jgroupsStack=JGROUPS_STACK.resolveModelAttribute(context,discoveryGroupModel).asString();
          String channelName=JGROUPS_CHANNEL.resolveModelAttribute(context,discoveryGroupModel).asString();
          serviceBuilder.addDependency(ServiceName.JBOSS.append("jgroups").append("stack").append(jgroupsStack),ChannelFactory.class,hqService.getJGroupsInjector(key));
          hqService.getJGroupsChannels().put(key,channelName);
        }
 else {
          final ServiceName groupBinding=GroupBindingService.getDiscoveryBaseServiceName(hqServiceName).append(name);
          serviceBuilder.addDependency(groupBinding,SocketBinding.class,hqService.getGroupBindingInjector(key));
        }
      }
    }
    serviceBuilder.addListener(verificationHandler);
    ServiceController<HornetQServer> hqServerServiceController=serviceBuilder.install();
    resource.setHornetQServerServiceController(hqServerServiceController);
    newControllers.add(hqServerServiceController);
    boolean overrideInVMSecurity=OVERRIDE_IN_VM_SECURITY.resolveModelAttribute(context,operation).asBoolean();
    newControllers.add(JMSService.addService(serviceTarget,hqServiceName,overrideInVMSecurity,verificationHandler));
    context.completeStep(OperationContext.RollbackHandler.NOOP_ROLLBACK_HANDLER);
  }
}
,OperationContext.Stage.RUNTIME) @TO@ context.addStep(new OperationStepHandler(){
  @Override public void execute(  OperationContext context,  ModelNode operation) throws OperationFailedException {
    final ServiceTarget serviceTarget=context.getServiceTarget();
    final String serverName=PathAddress.pathAddress(operation.require(OP_ADDR)).getLastElement().getValue();
    final ModelNode model=Resource.Tools.readModel(resource);
    final Configuration configuration=transformConfig(context,serverName,model);
    String bindingsPath=PATHS.get(BINDINGS_DIRECTORY).resolveModelAttribute(context,model.get(PATH,BINDINGS_DIRECTORY)).asString();
    String bindingsRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,BINDINGS_DIRECTORY)).asString();
    String journalPath=PATHS.get(JOURNAL_DIRECTORY).resolveModelAttribute(context,model.get(PATH,JOURNAL_DIRECTORY)).asString();
    String journalRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,JOURNAL_DIRECTORY)).asString();
    String largeMessagePath=PATHS.get(LARGE_MESSAGES_DIRECTORY).resolveModelAttribute(context,model.get(PATH,LARGE_MESSAGES_DIRECTORY)).asString();
    String largeMessageRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,LARGE_MESSAGES_DIRECTORY)).asString();
    String pagingPath=PATHS.get(PAGING_DIRECTORY).resolveModelAttribute(context,model.get(PATH,PAGING_DIRECTORY)).asString();
    String pagingRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,PAGING_DIRECTORY)).asString();
    final HornetQService hqService=new HornetQService(configuration,new HornetQService.PathConfig(bindingsPath,bindingsRelativeToPath,journalPath,journalRelativeToPath,largeMessagePath,largeMessageRelativeToPath,pagingPath,pagingRelativeToPath));
    ServiceName hqServiceName=MessagingServices.getHornetQServiceName(serverName);
    final ServiceBuilder<HornetQServer> serviceBuilder=serviceTarget.addService(hqServiceName,hqService).addDependency(DependencyType.OPTIONAL,ServiceName.JBOSS.append("mbean","server"),MBeanServer.class,hqService.getMBeanServer());
    serviceBuilder.addDependency(PathManagerService.SERVICE_NAME,PathManager.class,hqService.getPathManagerInjector());
    String domain=SECURITY_DOMAIN.resolveModelAttribute(context,model).asString();
    serviceBuilder.addDependency(DependencyType.REQUIRED,SecurityDomainService.SERVICE_NAME.append(domain),SecurityDomainContext.class,hqService.getSecurityDomainContextInjector());
    final Set<String> socketBindings=new HashSet<String>();
    TransportConfigOperationHandlers.processAcceptors(context,configuration,model,socketBindings);
    if (model.hasDefined(HTTP_ACCEPTOR)) {
      for (      final Property property : model.get(HTTP_ACCEPTOR).asPropertyList()) {
        String httpListener=HTTPAcceptorDefinition.HTTP_LISTENER.resolveModelAttribute(context,property.getValue()).asString();
        serviceBuilder.addDependency(HTTPUpgradeService.HTTP_UPGRADE_REGISTRY.append(httpListener));
      }
    }
    for (    final String socketBinding : socketBindings) {
      final ServiceName socketName=SocketBinding.JBOSS_BINDING_NAME.append(socketBinding);
      serviceBuilder.addDependency(socketName,SocketBinding.class,hqService.getSocketBindingInjector(socketBinding));
    }
    final Set<String> outboundSocketBindings=new HashSet<String>();
    TransportConfigOperationHandlers.processConnectors(context,configuration,model,outboundSocketBindings);
    for (    final String outboundSocketBinding : outboundSocketBindings) {
      final ServiceName outboundSocketName=OutboundSocketBinding.OUTBOUND_SOCKET_BINDING_BASE_SERVICE_NAME.append(outboundSocketBinding);
      serviceBuilder.addDependency(DependencyType.OPTIONAL,outboundSocketName,OutboundSocketBinding.class,hqService.getOutboundSocketBindingInjector(outboundSocketBinding));
      if (!socketBindings.contains(outboundSocketBinding)) {
        final ServiceName socketName=SocketBinding.JBOSS_BINDING_NAME.append(outboundSocketBinding);
        serviceBuilder.addDependency(DependencyType.OPTIONAL,socketName,SocketBinding.class,hqService.getSocketBindingInjector(outboundSocketBinding));
      }
    }
    BroadcastGroupAdd.addBroadcastGroupConfigs(context,configuration,model);
    final List<BroadcastGroupConfiguration> broadcastGroupConfigurations=configuration.getBroadcastGroupConfigurations();
    final Map<String,DiscoveryGroupConfiguration> discoveryGroupConfigurations=configuration.getDiscoveryGroupConfigurations();
    if (broadcastGroupConfigurations != null) {
      for (      final BroadcastGroupConfiguration config : broadcastGroupConfigurations) {
        final String name=config.getName();
        final String key="broadcast" + name;
        ModelNode broadcastGroupModel=model.get(BROADCAST_GROUP,name);
        if (broadcastGroupModel.hasDefined(JGROUPS_STACK.getName())) {
          String jgroupsStack=JGROUPS_STACK.resolveModelAttribute(context,broadcastGroupModel).asString();
          String channelName=JGROUPS_CHANNEL.resolveModelAttribute(context,broadcastGroupModel).asString();
          serviceBuilder.addDependency(ChannelFactoryService.getServiceName(jgroupsStack),ChannelFactory.class,hqService.getJGroupsInjector(key));
          hqService.getJGroupsChannels().put(key,channelName);
        }
 else {
          final ServiceName groupBinding=GroupBindingService.getBroadcastBaseServiceName(hqServiceName).append(name);
          serviceBuilder.addDependency(groupBinding,SocketBinding.class,hqService.getGroupBindingInjector(key));
        }
      }
    }
    if (discoveryGroupConfigurations != null) {
      for (      final DiscoveryGroupConfiguration config : discoveryGroupConfigurations.values()) {
        final String name=config.getName();
        final String key="discovery" + name;
        ModelNode discoveryGroupModel=model.get(DISCOVERY_GROUP,name);
        if (discoveryGroupModel.hasDefined(JGROUPS_STACK.getName())) {
          String jgroupsStack=JGROUPS_STACK.resolveModelAttribute(context,discoveryGroupModel).asString();
          String channelName=JGROUPS_CHANNEL.resolveModelAttribute(context,discoveryGroupModel).asString();
          serviceBuilder.addDependency(ChannelFactoryService.getServiceName(jgroupsStack),ChannelFactory.class,hqService.getJGroupsInjector(key));
          hqService.getJGroupsChannels().put(key,channelName);
        }
 else {
          final ServiceName groupBinding=GroupBindingService.getDiscoveryBaseServiceName(hqServiceName).append(name);
          serviceBuilder.addDependency(groupBinding,SocketBinding.class,hqService.getGroupBindingInjector(key));
        }
      }
    }
    serviceBuilder.addListener(verificationHandler);
    ServiceController<HornetQServer> hqServerServiceController=serviceBuilder.install();
    resource.setHornetQServerServiceController(hqServerServiceController);
    newControllers.add(hqServerServiceController);
    boolean overrideInVMSecurity=OVERRIDE_IN_VM_SECURITY.resolveModelAttribute(context,operation).asBoolean();
    newControllers.add(JMSService.addService(serviceTarget,hqServiceName,overrideInVMSecurity,verificationHandler));
    context.completeStep(OperationContext.RollbackHandler.NOOP_ROLLBACK_HANDLER);
  }
}
,OperationContext.Stage.RUNTIME) @AT@ 12640 @LENGTH@ 9917
------UPD SimpleName@@MethodName:addStep:[new OperationStepHandler(){
  @Override public void execute(  OperationContext context,  ModelNode operation) throws OperationFailedException {
    final ServiceTarget serviceTarget=context.getServiceTarget();
    final String serverName=PathAddress.pathAddress(operation.require(OP_ADDR)).getLastElement().getValue();
    final ModelNode model=Resource.Tools.readModel(resource);
    final Configuration configuration=transformConfig(context,serverName,model);
    String bindingsPath=PATHS.get(BINDINGS_DIRECTORY).resolveModelAttribute(context,model.get(PATH,BINDINGS_DIRECTORY)).asString();
    String bindingsRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,BINDINGS_DIRECTORY)).asString();
    String journalPath=PATHS.get(JOURNAL_DIRECTORY).resolveModelAttribute(context,model.get(PATH,JOURNAL_DIRECTORY)).asString();
    String journalRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,JOURNAL_DIRECTORY)).asString();
    String largeMessagePath=PATHS.get(LARGE_MESSAGES_DIRECTORY).resolveModelAttribute(context,model.get(PATH,LARGE_MESSAGES_DIRECTORY)).asString();
    String largeMessageRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,LARGE_MESSAGES_DIRECTORY)).asString();
    String pagingPath=PATHS.get(PAGING_DIRECTORY).resolveModelAttribute(context,model.get(PATH,PAGING_DIRECTORY)).asString();
    String pagingRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,PAGING_DIRECTORY)).asString();
    final HornetQService hqService=new HornetQService(configuration,new HornetQService.PathConfig(bindingsPath,bindingsRelativeToPath,journalPath,journalRelativeToPath,largeMessagePath,largeMessageRelativeToPath,pagingPath,pagingRelativeToPath));
    ServiceName hqServiceName=MessagingServices.getHornetQServiceName(serverName);
    final ServiceBuilder<HornetQServer> serviceBuilder=serviceTarget.addService(hqServiceName,hqService).addDependency(DependencyType.OPTIONAL,ServiceName.JBOSS.append("mbean","server"),MBeanServer.class,hqService.getMBeanServer());
    serviceBuilder.addDependency(PathManagerService.SERVICE_NAME,PathManager.class,hqService.getPathManagerInjector());
    String domain=SECURITY_DOMAIN.resolveModelAttribute(context,model).asString();
    serviceBuilder.addDependency(DependencyType.REQUIRED,SecurityDomainService.SERVICE_NAME.append(domain),SecurityDomainContext.class,hqService.getSecurityDomainContextInjector());
    final Set<String> socketBindings=new HashSet<String>();
    TransportConfigOperationHandlers.processAcceptors(context,configuration,model,socketBindings);
    if (model.hasDefined(HTTP_ACCEPTOR)) {
      for (      final Property property : model.get(HTTP_ACCEPTOR).asPropertyList()) {
        String httpListener=HTTPAcceptorDefinition.HTTP_LISTENER.resolveModelAttribute(context,property.getValue()).asString();
        serviceBuilder.addDependency(HTTPUpgradeService.HTTP_UPGRADE_REGISTRY.append(httpListener));
      }
    }
    for (    final String socketBinding : socketBindings) {
      final ServiceName socketName=SocketBinding.JBOSS_BINDING_NAME.append(socketBinding);
      serviceBuilder.addDependency(socketName,SocketBinding.class,hqService.getSocketBindingInjector(socketBinding));
    }
    final Set<String> outboundSocketBindings=new HashSet<String>();
    TransportConfigOperationHandlers.processConnectors(context,configuration,model,outboundSocketBindings);
    for (    final String outboundSocketBinding : outboundSocketBindings) {
      final ServiceName outboundSocketName=OutboundSocketBinding.OUTBOUND_SOCKET_BINDING_BASE_SERVICE_NAME.append(outboundSocketBinding);
      serviceBuilder.addDependency(DependencyType.OPTIONAL,outboundSocketName,OutboundSocketBinding.class,hqService.getOutboundSocketBindingInjector(outboundSocketBinding));
      if (!socketBindings.contains(outboundSocketBinding)) {
        final ServiceName socketName=SocketBinding.JBOSS_BINDING_NAME.append(outboundSocketBinding);
        serviceBuilder.addDependency(DependencyType.OPTIONAL,socketName,SocketBinding.class,hqService.getSocketBindingInjector(outboundSocketBinding));
      }
    }
    BroadcastGroupAdd.addBroadcastGroupConfigs(context,configuration,model);
    final List<BroadcastGroupConfiguration> broadcastGroupConfigurations=configuration.getBroadcastGroupConfigurations();
    final Map<String,DiscoveryGroupConfiguration> discoveryGroupConfigurations=configuration.getDiscoveryGroupConfigurations();
    if (broadcastGroupConfigurations != null) {
      for (      final BroadcastGroupConfiguration config : broadcastGroupConfigurations) {
        final String name=config.getName();
        final String key="broadcast" + name;
        ModelNode broadcastGroupModel=model.get(BROADCAST_GROUP,name);
        if (broadcastGroupModel.hasDefined(JGROUPS_STACK.getName())) {
          String jgroupsStack=JGROUPS_STACK.resolveModelAttribute(context,broadcastGroupModel).asString();
          String channelName=JGROUPS_CHANNEL.resolveModelAttribute(context,broadcastGroupModel).asString();
          serviceBuilder.addDependency(ServiceName.JBOSS.append("jgroups").append("stack").append(jgroupsStack),ChannelFactory.class,hqService.getJGroupsInjector(key));
          hqService.getJGroupsChannels().put(key,channelName);
        }
 else {
          final ServiceName groupBinding=GroupBindingService.getBroadcastBaseServiceName(hqServiceName).append(name);
          serviceBuilder.addDependency(groupBinding,SocketBinding.class,hqService.getGroupBindingInjector(key));
        }
      }
    }
    if (discoveryGroupConfigurations != null) {
      for (      final DiscoveryGroupConfiguration config : discoveryGroupConfigurations.values()) {
        final String name=config.getName();
        final String key="discovery" + name;
        ModelNode discoveryGroupModel=model.get(DISCOVERY_GROUP,name);
        if (discoveryGroupModel.hasDefined(JGROUPS_STACK.getName())) {
          String jgroupsStack=JGROUPS_STACK.resolveModelAttribute(context,discoveryGroupModel).asString();
          String channelName=JGROUPS_CHANNEL.resolveModelAttribute(context,discoveryGroupModel).asString();
          serviceBuilder.addDependency(ServiceName.JBOSS.append("jgroups").append("stack").append(jgroupsStack),ChannelFactory.class,hqService.getJGroupsInjector(key));
          hqService.getJGroupsChannels().put(key,channelName);
        }
 else {
          final ServiceName groupBinding=GroupBindingService.getDiscoveryBaseServiceName(hqServiceName).append(name);
          serviceBuilder.addDependency(groupBinding,SocketBinding.class,hqService.getGroupBindingInjector(key));
        }
      }
    }
    serviceBuilder.addListener(verificationHandler);
    ServiceController<HornetQServer> hqServerServiceController=serviceBuilder.install();
    resource.setHornetQServerServiceController(hqServerServiceController);
    newControllers.add(hqServerServiceController);
    boolean overrideInVMSecurity=OVERRIDE_IN_VM_SECURITY.resolveModelAttribute(context,operation).asBoolean();
    newControllers.add(JMSService.addService(serviceTarget,hqServiceName,overrideInVMSecurity,verificationHandler));
    context.completeStep(OperationContext.RollbackHandler.NOOP_ROLLBACK_HANDLER);
  }
}
, OperationContext.Stage.RUNTIME] @TO@ MethodName:addStep:[new OperationStepHandler(){
  @Override public void execute(  OperationContext context,  ModelNode operation) throws OperationFailedException {
    final ServiceTarget serviceTarget=context.getServiceTarget();
    final String serverName=PathAddress.pathAddress(operation.require(OP_ADDR)).getLastElement().getValue();
    final ModelNode model=Resource.Tools.readModel(resource);
    final Configuration configuration=transformConfig(context,serverName,model);
    String bindingsPath=PATHS.get(BINDINGS_DIRECTORY).resolveModelAttribute(context,model.get(PATH,BINDINGS_DIRECTORY)).asString();
    String bindingsRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,BINDINGS_DIRECTORY)).asString();
    String journalPath=PATHS.get(JOURNAL_DIRECTORY).resolveModelAttribute(context,model.get(PATH,JOURNAL_DIRECTORY)).asString();
    String journalRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,JOURNAL_DIRECTORY)).asString();
    String largeMessagePath=PATHS.get(LARGE_MESSAGES_DIRECTORY).resolveModelAttribute(context,model.get(PATH,LARGE_MESSAGES_DIRECTORY)).asString();
    String largeMessageRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,LARGE_MESSAGES_DIRECTORY)).asString();
    String pagingPath=PATHS.get(PAGING_DIRECTORY).resolveModelAttribute(context,model.get(PATH,PAGING_DIRECTORY)).asString();
    String pagingRelativeToPath=RELATIVE_TO.resolveModelAttribute(context,model.get(PATH,PAGING_DIRECTORY)).asString();
    final HornetQService hqService=new HornetQService(configuration,new HornetQService.PathConfig(bindingsPath,bindingsRelativeToPath,journalPath,journalRelativeToPath,largeMessagePath,largeMessageRelativeToPath,pagingPath,pagingRelativeToPath));
    ServiceName hqServiceName=MessagingServices.getHornetQServiceName(serverName);
    final ServiceBuilder<HornetQServer> serviceBuilder=serviceTarget.addService(hqServiceName,hqService).addDependency(DependencyType.OPTIONAL,ServiceName.JBOSS.append("mbean","server"),MBeanServer.class,hqService.getMBeanServer());
    serviceBuilder.addDependency(PathManagerService.SERVICE_NAME,PathManager.class,hqService.getPathManagerInjector());
    String domain=SECURITY_DOMAIN.resolveModelAttribute(context,model).asString();
    serviceBuilder.addDependency(DependencyType.REQUIRED,SecurityDomainService.SERVICE_NAME.append(domain),SecurityDomainContext.class,hqService.getSecurityDomainContextInjector());
    final Set<String> socketBindings=new HashSet<String>();
    TransportConfigOperationHandlers.processAcceptors(context,configuration,model,socketBindings);
    if (model.hasDefined(HTTP_ACCEPTOR)) {
      for (      final Property property : model.get(HTTP_ACCEPTOR).asPropertyList()) {
        String httpListener=HTTPAcceptorDefinition.HTTP_LISTENER.resolveModelAttribute(context,property.getValue()).asString();
        serviceBuilder.addDependency(HTTPUpgradeService.HTTP_UPGRADE_REGISTRY.append(httpListener));
      }
    }
    for (    final String socketBinding : socketBindings) {
      final ServiceName socketName=SocketBinding.JBOSS_BINDING_NAME.append(socketBinding);
      serviceBuilder.addDependency(socketName,SocketBinding.class,hqService.getSocketBindingInjector(socketBinding));
    }
    final Set<String> outboundSocketBindings=new HashSet<String>();
    TransportConfigOperationHandlers.processConnectors(context,configuration,model,outboundSocketBindings);
    for (    final String outboundSocketBinding : outboundSocketBindings) {
      final ServiceName outboundSocketName=OutboundSocketBinding.OUTBOUND_SOCKET_BINDING_BASE_SERVICE_NAME.append(outboundSocketBinding);
      serviceBuilder.addDependency(DependencyType.OPTIONAL,outboundSocketName,OutboundSocketBinding.class,hqService.getOutboundSocketBindingInjector(outboundSocketBinding));
      if (!socketBindings.contains(outboundSocketBinding)) {
        final ServiceName socketName=SocketBinding.JBOSS_BINDING_NAME.append(outboundSocketBinding);
        serviceBuilder.addDependency(DependencyType.OPTIONAL,socketName,SocketBinding.class,hqService.getSocketBindingInjector(outboundSocketBinding));
      }
    }
    BroadcastGroupAdd.addBroadcastGroupConfigs(context,configuration,model);
    final List<BroadcastGroupConfiguration> broadcastGroupConfigurations=configuration.getBroadcastGroupConfigurations();
    final Map<String,DiscoveryGroupConfiguration> discoveryGroupConfigurations=configuration.getDiscoveryGroupConfigurations();
    if (broadcastGroupConfigurations != null) {
      for (      final BroadcastGroupConfiguration config : broadcastGroupConfigurations) {
        final String name=config.getName();
        final String key="broadcast" + name;
        ModelNode broadcastGroupModel=model.get(BROADCAST_GROUP,name);
        if (broadcastGroupModel.hasDefined(JGROUPS_STACK.getName())) {
          String jgroupsStack=JGROUPS_STACK.resolveModelAttribute(context,broadcastGroupModel).asString();
          String channelName=JGROUPS_CHANNEL.resolveModelAttribute(context,broadcastGroupModel).asString();
          serviceBuilder.addDependency(ChannelFactoryService.getServiceName(jgroupsStack),ChannelFactory.class,hqService.getJGroupsInjector(key));
          hqService.getJGroupsChannels().put(key,channelName);
        }
 else {
          final ServiceName groupBinding=GroupBindingService.getBroadcastBaseServiceName(hqServiceName).append(name);
          serviceBuilder.addDependency(groupBinding,SocketBinding.class,hqService.getGroupBindingInjector(key));
        }
      }
    }
    if (discoveryGroupConfigurations != null) {
      for (      final DiscoveryGroupConfiguration config : discoveryGroupConfigurations.values()) {
        final String name=config.getName();
        final String key="discovery" + name;
        ModelNode discoveryGroupModel=model.get(DISCOVERY_GROUP,name);
        if (discoveryGroupModel.hasDefined(JGROUPS_STACK.getName())) {
          String jgroupsStack=JGROUPS_STACK.resolveModelAttribute(context,discoveryGroupModel).asString();
          String channelName=JGROUPS_CHANNEL.resolveModelAttribute(context,discoveryGroupModel).asString();
          serviceBuilder.addDependency(ChannelFactoryService.getServiceName(jgroupsStack),ChannelFactory.class,hqService.getJGroupsInjector(key));
          hqService.getJGroupsChannels().put(key,channelName);
        }
 else {
          final ServiceName groupBinding=GroupBindingService.getDiscoveryBaseServiceName(hqServiceName).append(name);
          serviceBuilder.addDependency(groupBinding,SocketBinding.class,hqService.getGroupBindingInjector(key));
        }
      }
    }
    serviceBuilder.addListener(verificationHandler);
    ServiceController<HornetQServer> hqServerServiceController=serviceBuilder.install();
    resource.setHornetQServerServiceController(hqServerServiceController);
    newControllers.add(hqServerServiceController);
    boolean overrideInVMSecurity=OVERRIDE_IN_VM_SECURITY.resolveModelAttribute(context,operation).asBoolean();
    newControllers.add(JMSService.addService(serviceTarget,hqServiceName,overrideInVMSecurity,verificationHandler));
    context.completeStep(OperationContext.RollbackHandler.NOOP_ROLLBACK_HANDLER);
  }
}
, OperationContext.Stage.RUNTIME] @AT@ 12648 @LENGTH@ 9909

