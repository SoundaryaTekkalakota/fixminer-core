UPD ExpressionStatement@@MethodInvocation:injectedRegistry.getValue().addProtocol(getProtocol(),switchToMessagingProtocol(activeMQServer,acceptorName,getProtocol()),new SimpleHttpUpgradeHandshake(MAGIC_NUMBER,getSecKeyHeader(),getSecAcceptHeader()){
  /** 
 * override the default upgrade handshake to take into account the  {@code TransportConstants.HTTP_UPGRADE_ENDPOINT_PROP_NAME} headerto select the correct acceptors among all that are configured in ActiveMQ. If the request does not have this header, the first acceptor will be used.
 */
  @Override public boolean handleUpgrade(  HttpServerExchange exchange) throws IOException {
    if (super.handleUpgrade(exchange)) {
      final String endpoint=exchange.getRequestHeaders().getFirst(getHttpUpgradeEndpointKey());
      if (endpoint == null) {
        return true;
      }
 else {
        return acceptorName.equals(endpoint);
      }
    }
 else {
      return false;
    }
  }
}
) @TO@ MethodInvocation:injectedRegistry.getValue().addProtocol(getProtocol(),switchToMessagingProtocol(activeMQServer,acceptorName,getProtocol()),new SimpleHttpUpgradeHandshake(MAGIC_NUMBER,getSecKeyHeader(),getSecAcceptHeader()){
  /** 
 * override the default upgrade handshake to take into account the  {@code TransportConstants.HTTP_UPGRADE_ENDPOINT_PROP_NAME} headerto select the correct acceptors among all that are configured in ActiveMQ. If the request does not have this header, the first acceptor will be used.
 */
  @Override public boolean handleUpgrade(  HttpServerExchange exchange) throws IOException {
    if (super.handleUpgrade(exchange)) {
      RemotingService remotingService=activeMQServer.getRemotingService();
      if (!remotingService.isStarted() || remotingService.isPaused()) {
        return false;
      }
      final String endpoint=exchange.getRequestHeaders().getFirst(getHttpUpgradeEndpointKey());
      if (endpoint == null) {
        return true;
      }
 else {
        return acceptorName.equals(endpoint);
      }
    }
 else {
      return false;
    }
  }
}
) @AT@ 5891 @LENGTH@ 1354
---UPD MethodInvocation@@injectedRegistry.getValue().addProtocol(getProtocol(),switchToMessagingProtocol(activeMQServer,acceptorName,getProtocol()),new SimpleHttpUpgradeHandshake(MAGIC_NUMBER,getSecKeyHeader(),getSecAcceptHeader()){
  /** 
 * override the default upgrade handshake to take into account the  {@code TransportConstants.HTTP_UPGRADE_ENDPOINT_PROP_NAME} headerto select the correct acceptors among all that are configured in ActiveMQ. If the request does not have this header, the first acceptor will be used.
 */
  @Override public boolean handleUpgrade(  HttpServerExchange exchange) throws IOException {
    if (super.handleUpgrade(exchange)) {
      final String endpoint=exchange.getRequestHeaders().getFirst(getHttpUpgradeEndpointKey());
      if (endpoint == null) {
        return true;
      }
 else {
        return acceptorName.equals(endpoint);
      }
    }
 else {
      return false;
    }
  }
}
) @TO@ injectedRegistry.getValue().addProtocol(getProtocol(),switchToMessagingProtocol(activeMQServer,acceptorName,getProtocol()),new SimpleHttpUpgradeHandshake(MAGIC_NUMBER,getSecKeyHeader(),getSecAcceptHeader()){
  /** 
 * override the default upgrade handshake to take into account the  {@code TransportConstants.HTTP_UPGRADE_ENDPOINT_PROP_NAME} headerto select the correct acceptors among all that are configured in ActiveMQ. If the request does not have this header, the first acceptor will be used.
 */
  @Override public boolean handleUpgrade(  HttpServerExchange exchange) throws IOException {
    if (super.handleUpgrade(exchange)) {
      RemotingService remotingService=activeMQServer.getRemotingService();
      if (!remotingService.isStarted() || remotingService.isPaused()) {
        return false;
      }
      final String endpoint=exchange.getRequestHeaders().getFirst(getHttpUpgradeEndpointKey());
      if (endpoint == null) {
        return true;
      }
 else {
        return acceptorName.equals(endpoint);
      }
    }
 else {
      return false;
    }
  }
}
) @AT@ 5891 @LENGTH@ 1353
------UPD SimpleName@@MethodName:addProtocol:[getProtocol(), switchToMessagingProtocol(activeMQServer,acceptorName,getProtocol()), new SimpleHttpUpgradeHandshake(MAGIC_NUMBER,getSecKeyHeader(),getSecAcceptHeader()){
  /** 
 * override the default upgrade handshake to take into account the  {@code TransportConstants.HTTP_UPGRADE_ENDPOINT_PROP_NAME} headerto select the correct acceptors among all that are configured in ActiveMQ. If the request does not have this header, the first acceptor will be used.
 */
  @Override public boolean handleUpgrade(  HttpServerExchange exchange) throws IOException {
    if (super.handleUpgrade(exchange)) {
      final String endpoint=exchange.getRequestHeaders().getFirst(getHttpUpgradeEndpointKey());
      if (endpoint == null) {
        return true;
      }
 else {
        return acceptorName.equals(endpoint);
      }
    }
 else {
      return false;
    }
  }
}
] @TO@ MethodName:addProtocol:[getProtocol(), switchToMessagingProtocol(activeMQServer,acceptorName,getProtocol()), new SimpleHttpUpgradeHandshake(MAGIC_NUMBER,getSecKeyHeader(),getSecAcceptHeader()){
  /** 
 * override the default upgrade handshake to take into account the  {@code TransportConstants.HTTP_UPGRADE_ENDPOINT_PROP_NAME} headerto select the correct acceptors among all that are configured in ActiveMQ. If the request does not have this header, the first acceptor will be used.
 */
  @Override public boolean handleUpgrade(  HttpServerExchange exchange) throws IOException {
    if (super.handleUpgrade(exchange)) {
      RemotingService remotingService=activeMQServer.getRemotingService();
      if (!remotingService.isStarted() || remotingService.isPaused()) {
        return false;
      }
      final String endpoint=exchange.getRequestHeaders().getFirst(getHttpUpgradeEndpointKey());
      if (endpoint == null) {
        return true;
      }
 else {
        return acceptorName.equals(endpoint);
      }
    }
 else {
      return false;
    }
  }
}
] @AT@ 5919 @LENGTH@ 1325

