UPD ExpressionStatement@@MethodInvocation:entity.doWithAssociations(new AssociationHandler<MongoPersistentProperty>(){
  public void doWithAssociation(  Association<MongoPersistentProperty> association){
    final MongoPersistentProperty property=association.getInverse();
    Object value=dbo.get(property.getFieldName());
    if (value == null || entity.isConstructorArgument(property)) {
      return;
    }
    DBRef dbref=value instanceof DBRef ? (DBRef)value : null;
    DbRefProxyHandler handler=new DefaultDbRefProxyHandler(spELContext,mappingContext,MappingMongoConverter.this);
    DbRefResolverCallback callback=new DefaultDbRefResolverCallback(dbo,currentPath,evaluator,MappingMongoConverter.this);
    accessor.setProperty(property,dbRefResolver.resolveDbRef(property,dbref,callback,handler));
  }
}
) @TO@ MethodInvocation:entity.doWithAssociations(new AssociationHandler<MongoPersistentProperty>(){
  public void doWithAssociation(  Association<MongoPersistentProperty> association){
    final MongoPersistentProperty property=association.getInverse();
    Object value=dbObjectAccessor.get(property);
    if (value == null || entity.isConstructorArgument(property)) {
      return;
    }
    DBRef dbref=value instanceof DBRef ? (DBRef)value : null;
    DbRefProxyHandler handler=new DefaultDbRefProxyHandler(spELContext,mappingContext,MappingMongoConverter.this);
    DbRefResolverCallback callback=new DefaultDbRefResolverCallback(dbo,currentPath,evaluator,MappingMongoConverter.this);
    accessor.setProperty(property,dbRefResolver.resolveDbRef(property,dbref,callback,handler));
  }
}
) @AT@ 12026 @LENGTH@ 812
---UPD MethodInvocation@@entity.doWithAssociations(new AssociationHandler<MongoPersistentProperty>(){
  public void doWithAssociation(  Association<MongoPersistentProperty> association){
    final MongoPersistentProperty property=association.getInverse();
    Object value=dbo.get(property.getFieldName());
    if (value == null || entity.isConstructorArgument(property)) {
      return;
    }
    DBRef dbref=value instanceof DBRef ? (DBRef)value : null;
    DbRefProxyHandler handler=new DefaultDbRefProxyHandler(spELContext,mappingContext,MappingMongoConverter.this);
    DbRefResolverCallback callback=new DefaultDbRefResolverCallback(dbo,currentPath,evaluator,MappingMongoConverter.this);
    accessor.setProperty(property,dbRefResolver.resolveDbRef(property,dbref,callback,handler));
  }
}
) @TO@ entity.doWithAssociations(new AssociationHandler<MongoPersistentProperty>(){
  public void doWithAssociation(  Association<MongoPersistentProperty> association){
    final MongoPersistentProperty property=association.getInverse();
    Object value=dbObjectAccessor.get(property);
    if (value == null || entity.isConstructorArgument(property)) {
      return;
    }
    DBRef dbref=value instanceof DBRef ? (DBRef)value : null;
    DbRefProxyHandler handler=new DefaultDbRefProxyHandler(spELContext,mappingContext,MappingMongoConverter.this);
    DbRefResolverCallback callback=new DefaultDbRefResolverCallback(dbo,currentPath,evaluator,MappingMongoConverter.this);
    accessor.setProperty(property,dbRefResolver.resolveDbRef(property,dbref,callback,handler));
  }
}
) @AT@ 12026 @LENGTH@ 811
------UPD SimpleName@@MethodName:doWithAssociations:[new AssociationHandler<MongoPersistentProperty>(){
  public void doWithAssociation(  Association<MongoPersistentProperty> association){
    final MongoPersistentProperty property=association.getInverse();
    Object value=dbo.get(property.getFieldName());
    if (value == null || entity.isConstructorArgument(property)) {
      return;
    }
    DBRef dbref=value instanceof DBRef ? (DBRef)value : null;
    DbRefProxyHandler handler=new DefaultDbRefProxyHandler(spELContext,mappingContext,MappingMongoConverter.this);
    DbRefResolverCallback callback=new DefaultDbRefResolverCallback(dbo,currentPath,evaluator,MappingMongoConverter.this);
    accessor.setProperty(property,dbRefResolver.resolveDbRef(property,dbref,callback,handler));
  }
}
] @TO@ MethodName:doWithAssociations:[new AssociationHandler<MongoPersistentProperty>(){
  public void doWithAssociation(  Association<MongoPersistentProperty> association){
    final MongoPersistentProperty property=association.getInverse();
    Object value=dbObjectAccessor.get(property);
    if (value == null || entity.isConstructorArgument(property)) {
      return;
    }
    DBRef dbref=value instanceof DBRef ? (DBRef)value : null;
    DbRefProxyHandler handler=new DefaultDbRefProxyHandler(spELContext,mappingContext,MappingMongoConverter.this);
    DbRefResolverCallback callback=new DefaultDbRefResolverCallback(dbo,currentPath,evaluator,MappingMongoConverter.this);
    accessor.setProperty(property,dbRefResolver.resolveDbRef(property,dbref,callback,handler));
  }
}
] @AT@ 12033 @LENGTH@ 804

