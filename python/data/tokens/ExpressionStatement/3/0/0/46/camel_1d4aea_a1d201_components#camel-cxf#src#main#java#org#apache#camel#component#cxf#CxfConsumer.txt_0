UPD ExpressionStatement@@MethodInvocation:svrBean.setInvoker(new Invoker(){
  public Object invoke(  Exchange cxfExchange,  Object o){
    LOG.trace("Received CXF Request: {}",cxfExchange);
    Continuation continuation;
    if (!endpoint.isSynchronous() && (continuation=getContinuation(cxfExchange)) != null) {
      LOG.trace("Calling the Camel async processors.");
      return asyncInvoke(cxfExchange,continuation);
    }
 else {
      LOG.trace("Calling the Camel sync processors.");
      return syncInvoke(cxfExchange);
    }
  }
  private Object asyncInvoke(  Exchange cxfExchange,  final Continuation continuation){
synchronized (continuation) {
      if (continuation.isNew()) {
        final org.apache.camel.Exchange camelExchange=perpareCamelExchange(cxfExchange);
        LOG.trace("Suspending continuation of exchangeId: {}",camelExchange.getExchangeId());
        continuation.suspend(0);
        getAsyncProcessor().process(camelExchange,new AsyncCallback(){
          public void done(          boolean doneSync){
synchronized (continuation) {
              LOG.trace("Resuming continuation of exchangeId: {}",camelExchange.getExchangeId());
              continuation.setObject(camelExchange);
              continuation.resume();
            }
          }
        }
);
      }
      if (continuation.isResumed()) {
        org.apache.camel.Exchange camelExchange=(org.apache.camel.Exchange)continuation.getObject();
        setResponseBack(cxfExchange,camelExchange);
      }
    }
    return null;
  }
  private Continuation getContinuation(  Exchange cxfExchange){
    ContinuationProvider provider=(ContinuationProvider)cxfExchange.getInMessage().get(ContinuationProvider.class.getName());
    return provider == null ? null : provider.getContinuation();
  }
  private Object syncInvoke(  Exchange cxfExchange){
    org.apache.camel.Exchange camelExchange=perpareCamelExchange(cxfExchange);
    LOG.trace("Processing +++ START +++");
    try {
      getProcessor().process(camelExchange);
    }
 catch (    Exception e) {
      throw new Fault(e);
    }
    LOG.trace("Processing +++ END +++");
    setResponseBack(cxfExchange,camelExchange);
    return null;
  }
  private org.apache.camel.Exchange perpareCamelExchange(  Exchange cxfExchange){
    CxfEndpoint endpoint=(CxfEndpoint)getEndpoint();
    CxfBinding binding=endpoint.getCxfBinding();
    org.apache.camel.Exchange camelExchange=endpoint.createExchange();
    DataFormat dataFormat=endpoint.getDataFormat();
    BindingOperationInfo boi=cxfExchange.getBindingOperationInfo();
    if (dataFormat == DataFormat.PAYLOAD && boi.isUnwrapped()) {
      boi=boi.getWrappedOperation();
      cxfExchange.put(BindingOperationInfo.class,boi);
    }
    if (boi != null) {
      camelExchange.setProperty(BindingOperationInfo.class.getName(),boi);
      LOG.trace("Set exchange property: BindingOperationInfo: {}",boi);
    }
    camelExchange.setProperty(CxfConstants.DATA_FORMAT_PROPERTY,dataFormat);
    LOG.trace("Set Exchange property: {}={}",DataFormat.class.getName(),dataFormat);
    camelExchange.setProperty(Message.MTOM_ENABLED,String.valueOf(endpoint.isMtomEnabled()));
    binding.populateExchangeFromCxfRequest(cxfExchange,camelExchange);
    Map<String,Object> context=new HashMap<String,Object>();
    binding.extractJaxWsContext(cxfExchange,context);
    camelExchange.setProperty(CxfConstants.JAXWS_CONTEXT,context);
    return camelExchange;
  }
  @SuppressWarnings("unchecked") private void setResponseBack(  Exchange cxfExchange,  org.apache.camel.Exchange camelExchange){
    CxfEndpoint endpoint=(CxfEndpoint)getEndpoint();
    CxfBinding binding=endpoint.getCxfBinding();
    checkFailure(camelExchange);
    binding.populateCxfResponseFromExchange(camelExchange,cxfExchange);
    checkFailure(camelExchange);
    binding.copyJaxWsContext(cxfExchange,(Map<String,Object>)camelExchange.getProperty(CxfConstants.JAXWS_CONTEXT));
  }
  private void checkFailure(  org.apache.camel.Exchange camelExchange) throws Fault {
    final Throwable t;
    if (camelExchange.isFailed()) {
      t=(camelExchange.hasOut() && camelExchange.getOut().isFault()) ? camelExchange.getOut().getBody(Throwable.class) : camelExchange.getException();
      if (t instanceof Fault) {
        throw (Fault)t;
      }
 else       if (t != null) {
        Fault fault=new Fault(t);
        if (fault.getMessage() == null) {
          fault.setMessage(t.getClass().getSimpleName());
        }
        WebFault faultAnnotation=t.getClass().getAnnotation(WebFault.class);
        Object faultInfo=null;
        try {
          Method method=t.getClass().getMethod("getFaultInfo",new Class[0]);
          faultInfo=method.invoke(t,new Object[0]);
        }
 catch (        Exception e) {
        }
        if (faultAnnotation != null && faultInfo == null) {
          Element detail=fault.getOrCreateDetail();
          Element faultDetails=detail.getOwnerDocument().createElementNS(faultAnnotation.targetNamespace(),faultAnnotation.name());
          detail.appendChild(faultDetails);
        }
        throw fault;
      }
    }
  }
}
) @TO@ MethodInvocation:svrBean.setInvoker(new Invoker(){
  public Object invoke(  Exchange cxfExchange,  Object o){
    LOG.trace("Received CXF Request: {}",cxfExchange);
    Continuation continuation;
    if (!endpoint.isSynchronous() && (continuation=getContinuation(cxfExchange)) != null) {
      LOG.trace("Calling the Camel async processors.");
      return asyncInvoke(cxfExchange,continuation);
    }
 else {
      LOG.trace("Calling the Camel sync processors.");
      return syncInvoke(cxfExchange);
    }
  }
  private Object asyncInvoke(  Exchange cxfExchange,  final Continuation continuation){
synchronized (continuation) {
      if (continuation.isNew()) {
        final org.apache.camel.Exchange camelExchange=perpareCamelExchange(cxfExchange);
        LOG.trace("Suspending continuation of exchangeId: {}",camelExchange.getExchangeId());
        continuation.suspend(0);
        getAsyncProcessor().process(camelExchange,new AsyncCallback(){
          public void done(          boolean doneSync){
synchronized (continuation) {
              LOG.trace("Resuming continuation of exchangeId: {}",camelExchange.getExchangeId());
              continuation.setObject(camelExchange);
              continuation.resume();
            }
          }
        }
);
      }
 else       if (continuation.isResumed()) {
        org.apache.camel.Exchange camelExchange=(org.apache.camel.Exchange)continuation.getObject();
        setResponseBack(cxfExchange,camelExchange);
      }
    }
    return null;
  }
  private Continuation getContinuation(  Exchange cxfExchange){
    ContinuationProvider provider=(ContinuationProvider)cxfExchange.getInMessage().get(ContinuationProvider.class.getName());
    return provider == null ? null : provider.getContinuation();
  }
  private Object syncInvoke(  Exchange cxfExchange){
    org.apache.camel.Exchange camelExchange=perpareCamelExchange(cxfExchange);
    LOG.trace("Processing +++ START +++");
    try {
      getProcessor().process(camelExchange);
    }
 catch (    Exception e) {
      throw new Fault(e);
    }
    LOG.trace("Processing +++ END +++");
    setResponseBack(cxfExchange,camelExchange);
    return null;
  }
  private org.apache.camel.Exchange perpareCamelExchange(  Exchange cxfExchange){
    CxfEndpoint endpoint=(CxfEndpoint)getEndpoint();
    CxfBinding binding=endpoint.getCxfBinding();
    org.apache.camel.Exchange camelExchange=endpoint.createExchange();
    DataFormat dataFormat=endpoint.getDataFormat();
    BindingOperationInfo boi=cxfExchange.getBindingOperationInfo();
    if (dataFormat == DataFormat.PAYLOAD && boi.isUnwrapped()) {
      boi=boi.getWrappedOperation();
      cxfExchange.put(BindingOperationInfo.class,boi);
    }
    if (boi != null) {
      camelExchange.setProperty(BindingOperationInfo.class.getName(),boi);
      LOG.trace("Set exchange property: BindingOperationInfo: {}",boi);
    }
    camelExchange.setProperty(CxfConstants.DATA_FORMAT_PROPERTY,dataFormat);
    LOG.trace("Set Exchange property: {}={}",DataFormat.class.getName(),dataFormat);
    camelExchange.setProperty(Message.MTOM_ENABLED,String.valueOf(endpoint.isMtomEnabled()));
    binding.populateExchangeFromCxfRequest(cxfExchange,camelExchange);
    Map<String,Object> context=new HashMap<String,Object>();
    binding.extractJaxWsContext(cxfExchange,context);
    camelExchange.setProperty(CxfConstants.JAXWS_CONTEXT,context);
    return camelExchange;
  }
  @SuppressWarnings("unchecked") private void setResponseBack(  Exchange cxfExchange,  org.apache.camel.Exchange camelExchange){
    CxfEndpoint endpoint=(CxfEndpoint)getEndpoint();
    CxfBinding binding=endpoint.getCxfBinding();
    checkFailure(camelExchange);
    binding.populateCxfResponseFromExchange(camelExchange,cxfExchange);
    checkFailure(camelExchange);
    binding.copyJaxWsContext(cxfExchange,(Map<String,Object>)camelExchange.getProperty(CxfConstants.JAXWS_CONTEXT));
  }
  private void checkFailure(  org.apache.camel.Exchange camelExchange) throws Fault {
    final Throwable t;
    if (camelExchange.isFailed()) {
      t=(camelExchange.hasOut() && camelExchange.getOut().isFault()) ? camelExchange.getOut().getBody(Throwable.class) : camelExchange.getException();
      if (t instanceof Fault) {
        throw (Fault)t;
      }
 else       if (t != null) {
        Fault fault=new Fault(t);
        if (fault.getMessage() == null) {
          fault.setMessage(t.getClass().getSimpleName());
        }
        WebFault faultAnnotation=t.getClass().getAnnotation(WebFault.class);
        Object faultInfo=null;
        try {
          Method method=t.getClass().getMethod("getFaultInfo",new Class[0]);
          faultInfo=method.invoke(t,new Object[0]);
        }
 catch (        Exception e) {
        }
        if (faultAnnotation != null && faultInfo == null) {
          Element detail=fault.getOrCreateDetail();
          Element faultDetails=detail.getOwnerDocument().createElementNS(faultAnnotation.targetNamespace(),faultAnnotation.name());
          detail.appendChild(faultDetails);
        }
        throw fault;
      }
    }
  }
}
) @AT@ 2376 @LENGTH@ 8968
---UPD MethodInvocation@@svrBean.setInvoker(new Invoker(){
  public Object invoke(  Exchange cxfExchange,  Object o){
    LOG.trace("Received CXF Request: {}",cxfExchange);
    Continuation continuation;
    if (!endpoint.isSynchronous() && (continuation=getContinuation(cxfExchange)) != null) {
      LOG.trace("Calling the Camel async processors.");
      return asyncInvoke(cxfExchange,continuation);
    }
 else {
      LOG.trace("Calling the Camel sync processors.");
      return syncInvoke(cxfExchange);
    }
  }
  private Object asyncInvoke(  Exchange cxfExchange,  final Continuation continuation){
synchronized (continuation) {
      if (continuation.isNew()) {
        final org.apache.camel.Exchange camelExchange=perpareCamelExchange(cxfExchange);
        LOG.trace("Suspending continuation of exchangeId: {}",camelExchange.getExchangeId());
        continuation.suspend(0);
        getAsyncProcessor().process(camelExchange,new AsyncCallback(){
          public void done(          boolean doneSync){
synchronized (continuation) {
              LOG.trace("Resuming continuation of exchangeId: {}",camelExchange.getExchangeId());
              continuation.setObject(camelExchange);
              continuation.resume();
            }
          }
        }
);
      }
      if (continuation.isResumed()) {
        org.apache.camel.Exchange camelExchange=(org.apache.camel.Exchange)continuation.getObject();
        setResponseBack(cxfExchange,camelExchange);
      }
    }
    return null;
  }
  private Continuation getContinuation(  Exchange cxfExchange){
    ContinuationProvider provider=(ContinuationProvider)cxfExchange.getInMessage().get(ContinuationProvider.class.getName());
    return provider == null ? null : provider.getContinuation();
  }
  private Object syncInvoke(  Exchange cxfExchange){
    org.apache.camel.Exchange camelExchange=perpareCamelExchange(cxfExchange);
    LOG.trace("Processing +++ START +++");
    try {
      getProcessor().process(camelExchange);
    }
 catch (    Exception e) {
      throw new Fault(e);
    }
    LOG.trace("Processing +++ END +++");
    setResponseBack(cxfExchange,camelExchange);
    return null;
  }
  private org.apache.camel.Exchange perpareCamelExchange(  Exchange cxfExchange){
    CxfEndpoint endpoint=(CxfEndpoint)getEndpoint();
    CxfBinding binding=endpoint.getCxfBinding();
    org.apache.camel.Exchange camelExchange=endpoint.createExchange();
    DataFormat dataFormat=endpoint.getDataFormat();
    BindingOperationInfo boi=cxfExchange.getBindingOperationInfo();
    if (dataFormat == DataFormat.PAYLOAD && boi.isUnwrapped()) {
      boi=boi.getWrappedOperation();
      cxfExchange.put(BindingOperationInfo.class,boi);
    }
    if (boi != null) {
      camelExchange.setProperty(BindingOperationInfo.class.getName(),boi);
      LOG.trace("Set exchange property: BindingOperationInfo: {}",boi);
    }
    camelExchange.setProperty(CxfConstants.DATA_FORMAT_PROPERTY,dataFormat);
    LOG.trace("Set Exchange property: {}={}",DataFormat.class.getName(),dataFormat);
    camelExchange.setProperty(Message.MTOM_ENABLED,String.valueOf(endpoint.isMtomEnabled()));
    binding.populateExchangeFromCxfRequest(cxfExchange,camelExchange);
    Map<String,Object> context=new HashMap<String,Object>();
    binding.extractJaxWsContext(cxfExchange,context);
    camelExchange.setProperty(CxfConstants.JAXWS_CONTEXT,context);
    return camelExchange;
  }
  @SuppressWarnings("unchecked") private void setResponseBack(  Exchange cxfExchange,  org.apache.camel.Exchange camelExchange){
    CxfEndpoint endpoint=(CxfEndpoint)getEndpoint();
    CxfBinding binding=endpoint.getCxfBinding();
    checkFailure(camelExchange);
    binding.populateCxfResponseFromExchange(camelExchange,cxfExchange);
    checkFailure(camelExchange);
    binding.copyJaxWsContext(cxfExchange,(Map<String,Object>)camelExchange.getProperty(CxfConstants.JAXWS_CONTEXT));
  }
  private void checkFailure(  org.apache.camel.Exchange camelExchange) throws Fault {
    final Throwable t;
    if (camelExchange.isFailed()) {
      t=(camelExchange.hasOut() && camelExchange.getOut().isFault()) ? camelExchange.getOut().getBody(Throwable.class) : camelExchange.getException();
      if (t instanceof Fault) {
        throw (Fault)t;
      }
 else       if (t != null) {
        Fault fault=new Fault(t);
        if (fault.getMessage() == null) {
          fault.setMessage(t.getClass().getSimpleName());
        }
        WebFault faultAnnotation=t.getClass().getAnnotation(WebFault.class);
        Object faultInfo=null;
        try {
          Method method=t.getClass().getMethod("getFaultInfo",new Class[0]);
          faultInfo=method.invoke(t,new Object[0]);
        }
 catch (        Exception e) {
        }
        if (faultAnnotation != null && faultInfo == null) {
          Element detail=fault.getOrCreateDetail();
          Element faultDetails=detail.getOwnerDocument().createElementNS(faultAnnotation.targetNamespace(),faultAnnotation.name());
          detail.appendChild(faultDetails);
        }
        throw fault;
      }
    }
  }
}
) @TO@ svrBean.setInvoker(new Invoker(){
  public Object invoke(  Exchange cxfExchange,  Object o){
    LOG.trace("Received CXF Request: {}",cxfExchange);
    Continuation continuation;
    if (!endpoint.isSynchronous() && (continuation=getContinuation(cxfExchange)) != null) {
      LOG.trace("Calling the Camel async processors.");
      return asyncInvoke(cxfExchange,continuation);
    }
 else {
      LOG.trace("Calling the Camel sync processors.");
      return syncInvoke(cxfExchange);
    }
  }
  private Object asyncInvoke(  Exchange cxfExchange,  final Continuation continuation){
synchronized (continuation) {
      if (continuation.isNew()) {
        final org.apache.camel.Exchange camelExchange=perpareCamelExchange(cxfExchange);
        LOG.trace("Suspending continuation of exchangeId: {}",camelExchange.getExchangeId());
        continuation.suspend(0);
        getAsyncProcessor().process(camelExchange,new AsyncCallback(){
          public void done(          boolean doneSync){
synchronized (continuation) {
              LOG.trace("Resuming continuation of exchangeId: {}",camelExchange.getExchangeId());
              continuation.setObject(camelExchange);
              continuation.resume();
            }
          }
        }
);
      }
 else       if (continuation.isResumed()) {
        org.apache.camel.Exchange camelExchange=(org.apache.camel.Exchange)continuation.getObject();
        setResponseBack(cxfExchange,camelExchange);
      }
    }
    return null;
  }
  private Continuation getContinuation(  Exchange cxfExchange){
    ContinuationProvider provider=(ContinuationProvider)cxfExchange.getInMessage().get(ContinuationProvider.class.getName());
    return provider == null ? null : provider.getContinuation();
  }
  private Object syncInvoke(  Exchange cxfExchange){
    org.apache.camel.Exchange camelExchange=perpareCamelExchange(cxfExchange);
    LOG.trace("Processing +++ START +++");
    try {
      getProcessor().process(camelExchange);
    }
 catch (    Exception e) {
      throw new Fault(e);
    }
    LOG.trace("Processing +++ END +++");
    setResponseBack(cxfExchange,camelExchange);
    return null;
  }
  private org.apache.camel.Exchange perpareCamelExchange(  Exchange cxfExchange){
    CxfEndpoint endpoint=(CxfEndpoint)getEndpoint();
    CxfBinding binding=endpoint.getCxfBinding();
    org.apache.camel.Exchange camelExchange=endpoint.createExchange();
    DataFormat dataFormat=endpoint.getDataFormat();
    BindingOperationInfo boi=cxfExchange.getBindingOperationInfo();
    if (dataFormat == DataFormat.PAYLOAD && boi.isUnwrapped()) {
      boi=boi.getWrappedOperation();
      cxfExchange.put(BindingOperationInfo.class,boi);
    }
    if (boi != null) {
      camelExchange.setProperty(BindingOperationInfo.class.getName(),boi);
      LOG.trace("Set exchange property: BindingOperationInfo: {}",boi);
    }
    camelExchange.setProperty(CxfConstants.DATA_FORMAT_PROPERTY,dataFormat);
    LOG.trace("Set Exchange property: {}={}",DataFormat.class.getName(),dataFormat);
    camelExchange.setProperty(Message.MTOM_ENABLED,String.valueOf(endpoint.isMtomEnabled()));
    binding.populateExchangeFromCxfRequest(cxfExchange,camelExchange);
    Map<String,Object> context=new HashMap<String,Object>();
    binding.extractJaxWsContext(cxfExchange,context);
    camelExchange.setProperty(CxfConstants.JAXWS_CONTEXT,context);
    return camelExchange;
  }
  @SuppressWarnings("unchecked") private void setResponseBack(  Exchange cxfExchange,  org.apache.camel.Exchange camelExchange){
    CxfEndpoint endpoint=(CxfEndpoint)getEndpoint();
    CxfBinding binding=endpoint.getCxfBinding();
    checkFailure(camelExchange);
    binding.populateCxfResponseFromExchange(camelExchange,cxfExchange);
    checkFailure(camelExchange);
    binding.copyJaxWsContext(cxfExchange,(Map<String,Object>)camelExchange.getProperty(CxfConstants.JAXWS_CONTEXT));
  }
  private void checkFailure(  org.apache.camel.Exchange camelExchange) throws Fault {
    final Throwable t;
    if (camelExchange.isFailed()) {
      t=(camelExchange.hasOut() && camelExchange.getOut().isFault()) ? camelExchange.getOut().getBody(Throwable.class) : camelExchange.getException();
      if (t instanceof Fault) {
        throw (Fault)t;
      }
 else       if (t != null) {
        Fault fault=new Fault(t);
        if (fault.getMessage() == null) {
          fault.setMessage(t.getClass().getSimpleName());
        }
        WebFault faultAnnotation=t.getClass().getAnnotation(WebFault.class);
        Object faultInfo=null;
        try {
          Method method=t.getClass().getMethod("getFaultInfo",new Class[0]);
          faultInfo=method.invoke(t,new Object[0]);
        }
 catch (        Exception e) {
        }
        if (faultAnnotation != null && faultInfo == null) {
          Element detail=fault.getOrCreateDetail();
          Element faultDetails=detail.getOwnerDocument().createElementNS(faultAnnotation.targetNamespace(),faultAnnotation.name());
          detail.appendChild(faultDetails);
        }
        throw fault;
      }
    }
  }
}
) @AT@ 2376 @LENGTH@ 8967
------UPD SimpleName@@MethodName:setInvoker:[new Invoker(){
  public Object invoke(  Exchange cxfExchange,  Object o){
    LOG.trace("Received CXF Request: {}",cxfExchange);
    Continuation continuation;
    if (!endpoint.isSynchronous() && (continuation=getContinuation(cxfExchange)) != null) {
      LOG.trace("Calling the Camel async processors.");
      return asyncInvoke(cxfExchange,continuation);
    }
 else {
      LOG.trace("Calling the Camel sync processors.");
      return syncInvoke(cxfExchange);
    }
  }
  private Object asyncInvoke(  Exchange cxfExchange,  final Continuation continuation){
synchronized (continuation) {
      if (continuation.isNew()) {
        final org.apache.camel.Exchange camelExchange=perpareCamelExchange(cxfExchange);
        LOG.trace("Suspending continuation of exchangeId: {}",camelExchange.getExchangeId());
        continuation.suspend(0);
        getAsyncProcessor().process(camelExchange,new AsyncCallback(){
          public void done(          boolean doneSync){
synchronized (continuation) {
              LOG.trace("Resuming continuation of exchangeId: {}",camelExchange.getExchangeId());
              continuation.setObject(camelExchange);
              continuation.resume();
            }
          }
        }
);
      }
      if (continuation.isResumed()) {
        org.apache.camel.Exchange camelExchange=(org.apache.camel.Exchange)continuation.getObject();
        setResponseBack(cxfExchange,camelExchange);
      }
    }
    return null;
  }
  private Continuation getContinuation(  Exchange cxfExchange){
    ContinuationProvider provider=(ContinuationProvider)cxfExchange.getInMessage().get(ContinuationProvider.class.getName());
    return provider == null ? null : provider.getContinuation();
  }
  private Object syncInvoke(  Exchange cxfExchange){
    org.apache.camel.Exchange camelExchange=perpareCamelExchange(cxfExchange);
    LOG.trace("Processing +++ START +++");
    try {
      getProcessor().process(camelExchange);
    }
 catch (    Exception e) {
      throw new Fault(e);
    }
    LOG.trace("Processing +++ END +++");
    setResponseBack(cxfExchange,camelExchange);
    return null;
  }
  private org.apache.camel.Exchange perpareCamelExchange(  Exchange cxfExchange){
    CxfEndpoint endpoint=(CxfEndpoint)getEndpoint();
    CxfBinding binding=endpoint.getCxfBinding();
    org.apache.camel.Exchange camelExchange=endpoint.createExchange();
    DataFormat dataFormat=endpoint.getDataFormat();
    BindingOperationInfo boi=cxfExchange.getBindingOperationInfo();
    if (dataFormat == DataFormat.PAYLOAD && boi.isUnwrapped()) {
      boi=boi.getWrappedOperation();
      cxfExchange.put(BindingOperationInfo.class,boi);
    }
    if (boi != null) {
      camelExchange.setProperty(BindingOperationInfo.class.getName(),boi);
      LOG.trace("Set exchange property: BindingOperationInfo: {}",boi);
    }
    camelExchange.setProperty(CxfConstants.DATA_FORMAT_PROPERTY,dataFormat);
    LOG.trace("Set Exchange property: {}={}",DataFormat.class.getName(),dataFormat);
    camelExchange.setProperty(Message.MTOM_ENABLED,String.valueOf(endpoint.isMtomEnabled()));
    binding.populateExchangeFromCxfRequest(cxfExchange,camelExchange);
    Map<String,Object> context=new HashMap<String,Object>();
    binding.extractJaxWsContext(cxfExchange,context);
    camelExchange.setProperty(CxfConstants.JAXWS_CONTEXT,context);
    return camelExchange;
  }
  @SuppressWarnings("unchecked") private void setResponseBack(  Exchange cxfExchange,  org.apache.camel.Exchange camelExchange){
    CxfEndpoint endpoint=(CxfEndpoint)getEndpoint();
    CxfBinding binding=endpoint.getCxfBinding();
    checkFailure(camelExchange);
    binding.populateCxfResponseFromExchange(camelExchange,cxfExchange);
    checkFailure(camelExchange);
    binding.copyJaxWsContext(cxfExchange,(Map<String,Object>)camelExchange.getProperty(CxfConstants.JAXWS_CONTEXT));
  }
  private void checkFailure(  org.apache.camel.Exchange camelExchange) throws Fault {
    final Throwable t;
    if (camelExchange.isFailed()) {
      t=(camelExchange.hasOut() && camelExchange.getOut().isFault()) ? camelExchange.getOut().getBody(Throwable.class) : camelExchange.getException();
      if (t instanceof Fault) {
        throw (Fault)t;
      }
 else       if (t != null) {
        Fault fault=new Fault(t);
        if (fault.getMessage() == null) {
          fault.setMessage(t.getClass().getSimpleName());
        }
        WebFault faultAnnotation=t.getClass().getAnnotation(WebFault.class);
        Object faultInfo=null;
        try {
          Method method=t.getClass().getMethod("getFaultInfo",new Class[0]);
          faultInfo=method.invoke(t,new Object[0]);
        }
 catch (        Exception e) {
        }
        if (faultAnnotation != null && faultInfo == null) {
          Element detail=fault.getOrCreateDetail();
          Element faultDetails=detail.getOwnerDocument().createElementNS(faultAnnotation.targetNamespace(),faultAnnotation.name());
          detail.appendChild(faultDetails);
        }
        throw fault;
      }
    }
  }
}
] @TO@ MethodName:setInvoker:[new Invoker(){
  public Object invoke(  Exchange cxfExchange,  Object o){
    LOG.trace("Received CXF Request: {}",cxfExchange);
    Continuation continuation;
    if (!endpoint.isSynchronous() && (continuation=getContinuation(cxfExchange)) != null) {
      LOG.trace("Calling the Camel async processors.");
      return asyncInvoke(cxfExchange,continuation);
    }
 else {
      LOG.trace("Calling the Camel sync processors.");
      return syncInvoke(cxfExchange);
    }
  }
  private Object asyncInvoke(  Exchange cxfExchange,  final Continuation continuation){
synchronized (continuation) {
      if (continuation.isNew()) {
        final org.apache.camel.Exchange camelExchange=perpareCamelExchange(cxfExchange);
        LOG.trace("Suspending continuation of exchangeId: {}",camelExchange.getExchangeId());
        continuation.suspend(0);
        getAsyncProcessor().process(camelExchange,new AsyncCallback(){
          public void done(          boolean doneSync){
synchronized (continuation) {
              LOG.trace("Resuming continuation of exchangeId: {}",camelExchange.getExchangeId());
              continuation.setObject(camelExchange);
              continuation.resume();
            }
          }
        }
);
      }
 else       if (continuation.isResumed()) {
        org.apache.camel.Exchange camelExchange=(org.apache.camel.Exchange)continuation.getObject();
        setResponseBack(cxfExchange,camelExchange);
      }
    }
    return null;
  }
  private Continuation getContinuation(  Exchange cxfExchange){
    ContinuationProvider provider=(ContinuationProvider)cxfExchange.getInMessage().get(ContinuationProvider.class.getName());
    return provider == null ? null : provider.getContinuation();
  }
  private Object syncInvoke(  Exchange cxfExchange){
    org.apache.camel.Exchange camelExchange=perpareCamelExchange(cxfExchange);
    LOG.trace("Processing +++ START +++");
    try {
      getProcessor().process(camelExchange);
    }
 catch (    Exception e) {
      throw new Fault(e);
    }
    LOG.trace("Processing +++ END +++");
    setResponseBack(cxfExchange,camelExchange);
    return null;
  }
  private org.apache.camel.Exchange perpareCamelExchange(  Exchange cxfExchange){
    CxfEndpoint endpoint=(CxfEndpoint)getEndpoint();
    CxfBinding binding=endpoint.getCxfBinding();
    org.apache.camel.Exchange camelExchange=endpoint.createExchange();
    DataFormat dataFormat=endpoint.getDataFormat();
    BindingOperationInfo boi=cxfExchange.getBindingOperationInfo();
    if (dataFormat == DataFormat.PAYLOAD && boi.isUnwrapped()) {
      boi=boi.getWrappedOperation();
      cxfExchange.put(BindingOperationInfo.class,boi);
    }
    if (boi != null) {
      camelExchange.setProperty(BindingOperationInfo.class.getName(),boi);
      LOG.trace("Set exchange property: BindingOperationInfo: {}",boi);
    }
    camelExchange.setProperty(CxfConstants.DATA_FORMAT_PROPERTY,dataFormat);
    LOG.trace("Set Exchange property: {}={}",DataFormat.class.getName(),dataFormat);
    camelExchange.setProperty(Message.MTOM_ENABLED,String.valueOf(endpoint.isMtomEnabled()));
    binding.populateExchangeFromCxfRequest(cxfExchange,camelExchange);
    Map<String,Object> context=new HashMap<String,Object>();
    binding.extractJaxWsContext(cxfExchange,context);
    camelExchange.setProperty(CxfConstants.JAXWS_CONTEXT,context);
    return camelExchange;
  }
  @SuppressWarnings("unchecked") private void setResponseBack(  Exchange cxfExchange,  org.apache.camel.Exchange camelExchange){
    CxfEndpoint endpoint=(CxfEndpoint)getEndpoint();
    CxfBinding binding=endpoint.getCxfBinding();
    checkFailure(camelExchange);
    binding.populateCxfResponseFromExchange(camelExchange,cxfExchange);
    checkFailure(camelExchange);
    binding.copyJaxWsContext(cxfExchange,(Map<String,Object>)camelExchange.getProperty(CxfConstants.JAXWS_CONTEXT));
  }
  private void checkFailure(  org.apache.camel.Exchange camelExchange) throws Fault {
    final Throwable t;
    if (camelExchange.isFailed()) {
      t=(camelExchange.hasOut() && camelExchange.getOut().isFault()) ? camelExchange.getOut().getBody(Throwable.class) : camelExchange.getException();
      if (t instanceof Fault) {
        throw (Fault)t;
      }
 else       if (t != null) {
        Fault fault=new Fault(t);
        if (fault.getMessage() == null) {
          fault.setMessage(t.getClass().getSimpleName());
        }
        WebFault faultAnnotation=t.getClass().getAnnotation(WebFault.class);
        Object faultInfo=null;
        try {
          Method method=t.getClass().getMethod("getFaultInfo",new Class[0]);
          faultInfo=method.invoke(t,new Object[0]);
        }
 catch (        Exception e) {
        }
        if (faultAnnotation != null && faultInfo == null) {
          Element detail=fault.getOrCreateDetail();
          Element faultDetails=detail.getOwnerDocument().createElementNS(faultAnnotation.targetNamespace(),faultAnnotation.name());
          detail.appendChild(faultDetails);
        }
        throw fault;
      }
    }
  }
}
] @AT@ 2384 @LENGTH@ 8959

