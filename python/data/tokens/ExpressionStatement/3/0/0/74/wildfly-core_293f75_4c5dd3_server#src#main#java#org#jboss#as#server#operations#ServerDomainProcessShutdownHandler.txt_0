UPD ExpressionStatement@@MethodInvocation:context.addStep(new OperationStepHandler(){
  @Override public void execute(  OperationContext context,  ModelNode operation) throws OperationFailedException {
    context.authorize(operation,EnumSet.of(Action.ActionEffect.WRITE_RUNTIME));
    context.completeStep(new OperationContext.ResultHandler(){
      @Override public void handleResult(      OperationContext.ResultAction resultAction,      OperationContext context,      ModelNode operation){
        if (resultAction == OperationContext.ResultAction.KEEP) {
          final ServiceRegistry registry=context.getServiceRegistry(false);
          final ServiceController<GracefulShutdownService> gracefulController=(ServiceController<GracefulShutdownService>)registry.getRequiredService(GracefulShutdownService.SERVICE_NAME);
          gracefulController.getValue().startGracefulShutdown();
          final ServiceController<SuspendController> suspendControllerServiceController=(ServiceController<SuspendController>)registry.getRequiredService(SuspendController.SERVICE_NAME);
          final SuspendController suspendController=suspendControllerServiceController.getValue();
          suspendController.suspend(timeout > 0 ? timeout * 1000 : timeout);
        }
      }
    }
);
  }
}
,OperationContext.Stage.RUNTIME) @TO@ MethodInvocation:context.addStep(new OperationStepHandler(){
  @Override public void execute(  OperationContext context,  ModelNode operation) throws OperationFailedException {
    context.authorize(operation,EnumSet.of(Action.ActionEffect.WRITE_RUNTIME));
    context.completeStep(new OperationContext.ResultHandler(){
      @Override public void handleResult(      OperationContext.ResultAction resultAction,      OperationContext context,      ModelNode operation){
        if (resultAction == OperationContext.ResultAction.KEEP) {
          final ServiceRegistry registry=context.getServiceRegistry(false);
          final ServiceController<GracefulShutdownService> gracefulController=(ServiceController<GracefulShutdownService>)registry.getService(GracefulShutdownService.SERVICE_NAME);
          if (gracefulController != null) {
            final ServiceController<SuspendController> suspendControllerServiceController=(ServiceController<SuspendController>)registry.getService(SuspendController.SERVICE_NAME);
            if (suspendControllerServiceController != null) {
              gracefulController.getValue().startGracefulShutdown();
              suspendControllerServiceController.getValue().suspend(timeout > 0 ? timeout * 1000 : timeout);
            }
          }
        }
      }
    }
);
  }
}
,OperationContext.Stage.RUNTIME) @AT@ 4029 @LENGTH@ 2467
---UPD MethodInvocation@@context.addStep(new OperationStepHandler(){
  @Override public void execute(  OperationContext context,  ModelNode operation) throws OperationFailedException {
    context.authorize(operation,EnumSet.of(Action.ActionEffect.WRITE_RUNTIME));
    context.completeStep(new OperationContext.ResultHandler(){
      @Override public void handleResult(      OperationContext.ResultAction resultAction,      OperationContext context,      ModelNode operation){
        if (resultAction == OperationContext.ResultAction.KEEP) {
          final ServiceRegistry registry=context.getServiceRegistry(false);
          final ServiceController<GracefulShutdownService> gracefulController=(ServiceController<GracefulShutdownService>)registry.getRequiredService(GracefulShutdownService.SERVICE_NAME);
          gracefulController.getValue().startGracefulShutdown();
          final ServiceController<SuspendController> suspendControllerServiceController=(ServiceController<SuspendController>)registry.getRequiredService(SuspendController.SERVICE_NAME);
          final SuspendController suspendController=suspendControllerServiceController.getValue();
          suspendController.suspend(timeout > 0 ? timeout * 1000 : timeout);
        }
      }
    }
);
  }
}
,OperationContext.Stage.RUNTIME) @TO@ context.addStep(new OperationStepHandler(){
  @Override public void execute(  OperationContext context,  ModelNode operation) throws OperationFailedException {
    context.authorize(operation,EnumSet.of(Action.ActionEffect.WRITE_RUNTIME));
    context.completeStep(new OperationContext.ResultHandler(){
      @Override public void handleResult(      OperationContext.ResultAction resultAction,      OperationContext context,      ModelNode operation){
        if (resultAction == OperationContext.ResultAction.KEEP) {
          final ServiceRegistry registry=context.getServiceRegistry(false);
          final ServiceController<GracefulShutdownService> gracefulController=(ServiceController<GracefulShutdownService>)registry.getService(GracefulShutdownService.SERVICE_NAME);
          if (gracefulController != null) {
            final ServiceController<SuspendController> suspendControllerServiceController=(ServiceController<SuspendController>)registry.getService(SuspendController.SERVICE_NAME);
            if (suspendControllerServiceController != null) {
              gracefulController.getValue().startGracefulShutdown();
              suspendControllerServiceController.getValue().suspend(timeout > 0 ? timeout * 1000 : timeout);
            }
          }
        }
      }
    }
);
  }
}
,OperationContext.Stage.RUNTIME) @AT@ 4029 @LENGTH@ 2466
------UPD SimpleName@@MethodName:addStep:[new OperationStepHandler(){
  @Override public void execute(  OperationContext context,  ModelNode operation) throws OperationFailedException {
    context.authorize(operation,EnumSet.of(Action.ActionEffect.WRITE_RUNTIME));
    context.completeStep(new OperationContext.ResultHandler(){
      @Override public void handleResult(      OperationContext.ResultAction resultAction,      OperationContext context,      ModelNode operation){
        if (resultAction == OperationContext.ResultAction.KEEP) {
          final ServiceRegistry registry=context.getServiceRegistry(false);
          final ServiceController<GracefulShutdownService> gracefulController=(ServiceController<GracefulShutdownService>)registry.getRequiredService(GracefulShutdownService.SERVICE_NAME);
          gracefulController.getValue().startGracefulShutdown();
          final ServiceController<SuspendController> suspendControllerServiceController=(ServiceController<SuspendController>)registry.getRequiredService(SuspendController.SERVICE_NAME);
          final SuspendController suspendController=suspendControllerServiceController.getValue();
          suspendController.suspend(timeout > 0 ? timeout * 1000 : timeout);
        }
      }
    }
);
  }
}
, OperationContext.Stage.RUNTIME] @TO@ MethodName:addStep:[new OperationStepHandler(){
  @Override public void execute(  OperationContext context,  ModelNode operation) throws OperationFailedException {
    context.authorize(operation,EnumSet.of(Action.ActionEffect.WRITE_RUNTIME));
    context.completeStep(new OperationContext.ResultHandler(){
      @Override public void handleResult(      OperationContext.ResultAction resultAction,      OperationContext context,      ModelNode operation){
        if (resultAction == OperationContext.ResultAction.KEEP) {
          final ServiceRegistry registry=context.getServiceRegistry(false);
          final ServiceController<GracefulShutdownService> gracefulController=(ServiceController<GracefulShutdownService>)registry.getService(GracefulShutdownService.SERVICE_NAME);
          if (gracefulController != null) {
            final ServiceController<SuspendController> suspendControllerServiceController=(ServiceController<SuspendController>)registry.getService(SuspendController.SERVICE_NAME);
            if (suspendControllerServiceController != null) {
              gracefulController.getValue().startGracefulShutdown();
              suspendControllerServiceController.getValue().suspend(timeout > 0 ? timeout * 1000 : timeout);
            }
          }
        }
      }
    }
);
  }
}
, OperationContext.Stage.RUNTIME] @AT@ 4037 @LENGTH@ 2458

