UPD ExpressionStatement@@MethodInvocation:ReflectionUtils.doWithMethods(currentHandlerType,new ReflectionUtils.MethodCallback(){
  public void doWith(  Method method){
    Method specificMethod=ClassUtils.getMostSpecificMethod(method,handlerType);
    Method bridgedMethod=BridgeMethodResolver.findBridgedMethod(specificMethod);
    if (isHandlerMethod(specificMethod) && (bridgedMethod == specificMethod || !isHandlerMethod(bridgedMethod))) {
      handlerMethods.add(specificMethod);
    }
 else     if (method.isAnnotationPresent(InitBinder.class)) {
      initBinderMethods.add(specificMethod);
    }
 else     if (method.isAnnotationPresent(ModelAttribute.class)) {
      modelAttributeMethods.add(specificMethod);
    }
  }
}
,ReflectionUtils.USER_DECLARED_METHODS) @TO@ MethodInvocation:ReflectionUtils.doWithMethods(currentHandlerType,new ReflectionUtils.MethodCallback(){
  public void doWith(  Method method){
    Method specificMethod=ClassUtils.getMostSpecificMethod(method,targetClass);
    Method bridgedMethod=BridgeMethodResolver.findBridgedMethod(specificMethod);
    if (isHandlerMethod(specificMethod) && (bridgedMethod == specificMethod || !isHandlerMethod(bridgedMethod))) {
      handlerMethods.add(specificMethod);
    }
 else     if (method.isAnnotationPresent(InitBinder.class)) {
      initBinderMethods.add(specificMethod);
    }
 else     if (method.isAnnotationPresent(ModelAttribute.class)) {
      modelAttributeMethods.add(specificMethod);
    }
  }
}
,ReflectionUtils.USER_DECLARED_METHODS) @AT@ 3042 @LENGTH@ 756
---UPD MethodInvocation@@ReflectionUtils.doWithMethods(currentHandlerType,new ReflectionUtils.MethodCallback(){
  public void doWith(  Method method){
    Method specificMethod=ClassUtils.getMostSpecificMethod(method,handlerType);
    Method bridgedMethod=BridgeMethodResolver.findBridgedMethod(specificMethod);
    if (isHandlerMethod(specificMethod) && (bridgedMethod == specificMethod || !isHandlerMethod(bridgedMethod))) {
      handlerMethods.add(specificMethod);
    }
 else     if (method.isAnnotationPresent(InitBinder.class)) {
      initBinderMethods.add(specificMethod);
    }
 else     if (method.isAnnotationPresent(ModelAttribute.class)) {
      modelAttributeMethods.add(specificMethod);
    }
  }
}
,ReflectionUtils.USER_DECLARED_METHODS) @TO@ ReflectionUtils.doWithMethods(currentHandlerType,new ReflectionUtils.MethodCallback(){
  public void doWith(  Method method){
    Method specificMethod=ClassUtils.getMostSpecificMethod(method,targetClass);
    Method bridgedMethod=BridgeMethodResolver.findBridgedMethod(specificMethod);
    if (isHandlerMethod(specificMethod) && (bridgedMethod == specificMethod || !isHandlerMethod(bridgedMethod))) {
      handlerMethods.add(specificMethod);
    }
 else     if (method.isAnnotationPresent(InitBinder.class)) {
      initBinderMethods.add(specificMethod);
    }
 else     if (method.isAnnotationPresent(ModelAttribute.class)) {
      modelAttributeMethods.add(specificMethod);
    }
  }
}
,ReflectionUtils.USER_DECLARED_METHODS) @AT@ 3042 @LENGTH@ 755
------UPD SimpleName@@MethodName:doWithMethods:[currentHandlerType, new ReflectionUtils.MethodCallback(){
  public void doWith(  Method method){
    Method specificMethod=ClassUtils.getMostSpecificMethod(method,handlerType);
    Method bridgedMethod=BridgeMethodResolver.findBridgedMethod(specificMethod);
    if (isHandlerMethod(specificMethod) && (bridgedMethod == specificMethod || !isHandlerMethod(bridgedMethod))) {
      handlerMethods.add(specificMethod);
    }
 else     if (method.isAnnotationPresent(InitBinder.class)) {
      initBinderMethods.add(specificMethod);
    }
 else     if (method.isAnnotationPresent(ModelAttribute.class)) {
      modelAttributeMethods.add(specificMethod);
    }
  }
}
, ReflectionUtils.USER_DECLARED_METHODS] @TO@ MethodName:doWithMethods:[currentHandlerType, new ReflectionUtils.MethodCallback(){
  public void doWith(  Method method){
    Method specificMethod=ClassUtils.getMostSpecificMethod(method,targetClass);
    Method bridgedMethod=BridgeMethodResolver.findBridgedMethod(specificMethod);
    if (isHandlerMethod(specificMethod) && (bridgedMethod == specificMethod || !isHandlerMethod(bridgedMethod))) {
      handlerMethods.add(specificMethod);
    }
 else     if (method.isAnnotationPresent(InitBinder.class)) {
      initBinderMethods.add(specificMethod);
    }
 else     if (method.isAnnotationPresent(ModelAttribute.class)) {
      modelAttributeMethods.add(specificMethod);
    }
  }
}
, ReflectionUtils.USER_DECLARED_METHODS] @AT@ 3058 @LENGTH@ 739

