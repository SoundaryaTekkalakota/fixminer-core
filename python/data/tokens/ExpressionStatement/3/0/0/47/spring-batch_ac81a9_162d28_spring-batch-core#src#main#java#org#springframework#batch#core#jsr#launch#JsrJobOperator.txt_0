UPD ExpressionStatement@@MethodInvocation:taskExecutor.execute(new Runnable(){
  @Override public void run(){
    JsrJobContextFactoryBean factoryBean=null;
    try {
      factoryBean=(JsrJobContextFactoryBean)batchContext.getBean("&" + JSR_JOB_CONTEXT_BEAN_NAME);
      factoryBean.setJobExecution(jobExecution);
      final Job job=batchContext.getBean(Job.class);
      if (!job.isRestartable()) {
        throw new JobRestartException("Job " + jobName + " is not restartable");
      }
      semaphore.release();
      jobRegistry.register(job,jobExecution);
      job.execute(jobExecution);
      jobRegistry.remove(jobExecution);
    }
 catch (    Exception e) {
      exceptionHolder.add(e);
    }
 finally {
      if (factoryBean != null) {
        factoryBean.close();
      }
      if (semaphore.availablePermits() == 0) {
        semaphore.release();
      }
    }
  }
}
) @TO@ MethodInvocation:taskExecutor.execute(new Runnable(){
  @Override public void run(){
    JsrJobContextFactoryBean factoryBean=null;
    try {
      factoryBean=(JsrJobContextFactoryBean)batchContext.getBean("&" + JSR_JOB_CONTEXT_BEAN_NAME);
      factoryBean.setJobExecution(jobExecution);
      final Job job=batchContext.getBean(Job.class);
      if (!job.isRestartable()) {
        throw new JobRestartException("Job " + jobName + " is not restartable");
      }
      semaphore.release();
      jobRegistry.register(job,jobExecution);
      job.execute(jobExecution);
      jobRegistry.remove(jobExecution);
    }
 catch (    Exception e) {
      exceptionHolder.add(e);
    }
 finally {
      if (factoryBean != null) {
        factoryBean.close();
      }
      batchContext.close();
      if (semaphore.availablePermits() == 0) {
        semaphore.release();
      }
    }
  }
}
) @AT@ 19906 @LENGTH@ 936
---UPD MethodInvocation@@taskExecutor.execute(new Runnable(){
  @Override public void run(){
    JsrJobContextFactoryBean factoryBean=null;
    try {
      factoryBean=(JsrJobContextFactoryBean)batchContext.getBean("&" + JSR_JOB_CONTEXT_BEAN_NAME);
      factoryBean.setJobExecution(jobExecution);
      final Job job=batchContext.getBean(Job.class);
      if (!job.isRestartable()) {
        throw new JobRestartException("Job " + jobName + " is not restartable");
      }
      semaphore.release();
      jobRegistry.register(job,jobExecution);
      job.execute(jobExecution);
      jobRegistry.remove(jobExecution);
    }
 catch (    Exception e) {
      exceptionHolder.add(e);
    }
 finally {
      if (factoryBean != null) {
        factoryBean.close();
      }
      if (semaphore.availablePermits() == 0) {
        semaphore.release();
      }
    }
  }
}
) @TO@ taskExecutor.execute(new Runnable(){
  @Override public void run(){
    JsrJobContextFactoryBean factoryBean=null;
    try {
      factoryBean=(JsrJobContextFactoryBean)batchContext.getBean("&" + JSR_JOB_CONTEXT_BEAN_NAME);
      factoryBean.setJobExecution(jobExecution);
      final Job job=batchContext.getBean(Job.class);
      if (!job.isRestartable()) {
        throw new JobRestartException("Job " + jobName + " is not restartable");
      }
      semaphore.release();
      jobRegistry.register(job,jobExecution);
      job.execute(jobExecution);
      jobRegistry.remove(jobExecution);
    }
 catch (    Exception e) {
      exceptionHolder.add(e);
    }
 finally {
      if (factoryBean != null) {
        factoryBean.close();
      }
      batchContext.close();
      if (semaphore.availablePermits() == 0) {
        semaphore.release();
      }
    }
  }
}
) @AT@ 19906 @LENGTH@ 935
------UPD SimpleName@@MethodName:execute:[new Runnable(){
  @Override public void run(){
    JsrJobContextFactoryBean factoryBean=null;
    try {
      factoryBean=(JsrJobContextFactoryBean)batchContext.getBean("&" + JSR_JOB_CONTEXT_BEAN_NAME);
      factoryBean.setJobExecution(jobExecution);
      final Job job=batchContext.getBean(Job.class);
      if (!job.isRestartable()) {
        throw new JobRestartException("Job " + jobName + " is not restartable");
      }
      semaphore.release();
      jobRegistry.register(job,jobExecution);
      job.execute(jobExecution);
      jobRegistry.remove(jobExecution);
    }
 catch (    Exception e) {
      exceptionHolder.add(e);
    }
 finally {
      if (factoryBean != null) {
        factoryBean.close();
      }
      if (semaphore.availablePermits() == 0) {
        semaphore.release();
      }
    }
  }
}
] @TO@ MethodName:execute:[new Runnable(){
  @Override public void run(){
    JsrJobContextFactoryBean factoryBean=null;
    try {
      factoryBean=(JsrJobContextFactoryBean)batchContext.getBean("&" + JSR_JOB_CONTEXT_BEAN_NAME);
      factoryBean.setJobExecution(jobExecution);
      final Job job=batchContext.getBean(Job.class);
      if (!job.isRestartable()) {
        throw new JobRestartException("Job " + jobName + " is not restartable");
      }
      semaphore.release();
      jobRegistry.register(job,jobExecution);
      job.execute(jobExecution);
      jobRegistry.remove(jobExecution);
    }
 catch (    Exception e) {
      exceptionHolder.add(e);
    }
 finally {
      if (factoryBean != null) {
        factoryBean.close();
      }
      batchContext.close();
      if (semaphore.availablePermits() == 0) {
        semaphore.release();
      }
    }
  }
}
] @AT@ 19919 @LENGTH@ 922

