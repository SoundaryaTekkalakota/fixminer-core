UPD ExpressionStatement@@MethodInvocation:opRules.put(new RuleRegExp("No user code in fil",FilterOperator.getOperatorName() + "%"),new NodeProcessor(){
  @Override public Object process(  Node n,  Stack<Node> s,  NodeProcessorCtx c,  Object... os){
    ExprNodeDesc expr=((FilterOperator)n).getConf().getPredicate();
    return new Boolean(checkExpression(expr));
  }
}
) @TO@ MethodInvocation:opRules.put(new RuleRegExp("No user code in fil",FilterOperator.getOperatorName() + "%"),new NodeProcessor(){
  @Override public Object process(  Node n,  Stack<Node> s,  NodeProcessorCtx c,  Object... os){
    ExprNodeDesc expr=((FilterOperator)n).getConf().getPredicate();
    Boolean retval=new Boolean(checkExpression(expr));
    if (!retval) {
      LOG.info("Cannot run filter operator [" + n + "] in llap mode");
    }
    return new Boolean(retval);
  }
}
) @AT@ 11511 @LENGTH@ 404
---UPD MethodInvocation@@opRules.put(new RuleRegExp("No user code in fil",FilterOperator.getOperatorName() + "%"),new NodeProcessor(){
  @Override public Object process(  Node n,  Stack<Node> s,  NodeProcessorCtx c,  Object... os){
    ExprNodeDesc expr=((FilterOperator)n).getConf().getPredicate();
    return new Boolean(checkExpression(expr));
  }
}
) @TO@ opRules.put(new RuleRegExp("No user code in fil",FilterOperator.getOperatorName() + "%"),new NodeProcessor(){
  @Override public Object process(  Node n,  Stack<Node> s,  NodeProcessorCtx c,  Object... os){
    ExprNodeDesc expr=((FilterOperator)n).getConf().getPredicate();
    Boolean retval=new Boolean(checkExpression(expr));
    if (!retval) {
      LOG.info("Cannot run filter operator [" + n + "] in llap mode");
    }
    return new Boolean(retval);
  }
}
) @AT@ 11511 @LENGTH@ 403
------UPD SimpleName@@MethodName:put:[new RuleRegExp("No user code in fil",FilterOperator.getOperatorName() + "%"), new NodeProcessor(){
  @Override public Object process(  Node n,  Stack<Node> s,  NodeProcessorCtx c,  Object... os){
    ExprNodeDesc expr=((FilterOperator)n).getConf().getPredicate();
    return new Boolean(checkExpression(expr));
  }
}
] @TO@ MethodName:put:[new RuleRegExp("No user code in fil",FilterOperator.getOperatorName() + "%"), new NodeProcessor(){
  @Override public Object process(  Node n,  Stack<Node> s,  NodeProcessorCtx c,  Object... os){
    ExprNodeDesc expr=((FilterOperator)n).getConf().getPredicate();
    Boolean retval=new Boolean(checkExpression(expr));
    if (!retval) {
      LOG.info("Cannot run filter operator [" + n + "] in llap mode");
    }
    return new Boolean(retval);
  }
}
] @AT@ 11519 @LENGTH@ 395

