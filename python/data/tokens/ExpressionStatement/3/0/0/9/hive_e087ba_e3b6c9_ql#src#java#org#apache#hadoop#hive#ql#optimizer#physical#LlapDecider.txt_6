UPD ExpressionStatement@@MethodInvocation:opRules.put(new RuleRegExp("No user code in gby",GroupByOperator.getOperatorName() + "%"),new NodeProcessor(){
  @Override public Object process(  Node n,  Stack<Node> s,  NodeProcessorCtx c,  Object... os){
    @SuppressWarnings("unchecked") List<AggregationDesc> aggs=((Operator<GroupByDesc>)n).getConf().getAggregators();
    return new Boolean(checkAggregators(aggs));
  }
}
) @TO@ MethodInvocation:opRules.put(new RuleRegExp("No user code in gby",GroupByOperator.getOperatorName() + "%"),new NodeProcessor(){
  @Override public Object process(  Node n,  Stack<Node> s,  NodeProcessorCtx c,  Object... os){
    @SuppressWarnings("unchecked") List<AggregationDesc> aggs=((Operator<GroupByDesc>)n).getConf().getAggregators();
    Boolean retval=new Boolean(checkAggregators(aggs));
    if (!retval) {
      LOG.info("Cannot run group by operator [" + n + "] in llap mode");
    }
    return new Boolean(retval);
  }
}
) @AT@ 11922 @LENGTH@ 472
---UPD MethodInvocation@@opRules.put(new RuleRegExp("No user code in gby",GroupByOperator.getOperatorName() + "%"),new NodeProcessor(){
  @Override public Object process(  Node n,  Stack<Node> s,  NodeProcessorCtx c,  Object... os){
    @SuppressWarnings("unchecked") List<AggregationDesc> aggs=((Operator<GroupByDesc>)n).getConf().getAggregators();
    return new Boolean(checkAggregators(aggs));
  }
}
) @TO@ opRules.put(new RuleRegExp("No user code in gby",GroupByOperator.getOperatorName() + "%"),new NodeProcessor(){
  @Override public Object process(  Node n,  Stack<Node> s,  NodeProcessorCtx c,  Object... os){
    @SuppressWarnings("unchecked") List<AggregationDesc> aggs=((Operator<GroupByDesc>)n).getConf().getAggregators();
    Boolean retval=new Boolean(checkAggregators(aggs));
    if (!retval) {
      LOG.info("Cannot run group by operator [" + n + "] in llap mode");
    }
    return new Boolean(retval);
  }
}
) @AT@ 11922 @LENGTH@ 471
------UPD SimpleName@@MethodName:put:[new RuleRegExp("No user code in gby",GroupByOperator.getOperatorName() + "%"), new NodeProcessor(){
  @Override public Object process(  Node n,  Stack<Node> s,  NodeProcessorCtx c,  Object... os){
    @SuppressWarnings("unchecked") List<AggregationDesc> aggs=((Operator<GroupByDesc>)n).getConf().getAggregators();
    return new Boolean(checkAggregators(aggs));
  }
}
] @TO@ MethodName:put:[new RuleRegExp("No user code in gby",GroupByOperator.getOperatorName() + "%"), new NodeProcessor(){
  @Override public Object process(  Node n,  Stack<Node> s,  NodeProcessorCtx c,  Object... os){
    @SuppressWarnings("unchecked") List<AggregationDesc> aggs=((Operator<GroupByDesc>)n).getConf().getAggregators();
    Boolean retval=new Boolean(checkAggregators(aggs));
    if (!retval) {
      LOG.info("Cannot run group by operator [" + n + "] in llap mode");
    }
    return new Boolean(retval);
  }
}
] @AT@ 11930 @LENGTH@ 463

