UPD ExpressionStatement@@MethodInvocation:context.completeStep(new OperationContext.ResultHandler(){
  @Override public void handleResult(  OperationContext.ResultAction resultAction,  OperationContext context,  ModelNode operation){
    if (resultAction == OperationContext.ResultAction.KEEP) {
      service.addListener(new AbstractServiceListener<Object>(){
        @Override public void listenerAdded(        final ServiceController<?> controller){
          Future<?> stopping=executor.submit(() -> {
            reloadContext.reloadInitiated(runningModeControl);
            processState.setStopping();
            controller.setMode(ServiceController.Mode.NEVER);
          }
);
          try {
            stopping.get();
          }
 catch (          InterruptedException ex) {
            Thread.currentThread().interrupt();
          }
catch (          ExecutionException ex) {
            ControllerLogger.ROOT_LOGGER.errorStoppingServer(ex);
          }
        }
        @Override public void transition(        final ServiceController<? extends Object> controller,        final ServiceController.Transition transition){
          if (transition == ServiceController.Transition.STOPPING_to_DOWN) {
            controller.removeListener(this);
            reloadContext.doReload(runningModeControl);
            controller.setMode(ServiceController.Mode.ACTIVE);
          }
        }
      }
);
    }
  }
}
) @TO@ MethodInvocation:context.completeStep(new OperationContext.ResultHandler(){
  @Override public void handleResult(  OperationContext.ResultAction resultAction,  OperationContext context,  ModelNode operation){
    if (resultAction == OperationContext.ResultAction.KEEP) {
      processState.setStopping();
      service.addListener(new AbstractServiceListener<Object>(){
        @Override public void listenerAdded(        final ServiceController<?> controller){
          Future<?> stopping=executor.submit(() -> {
            reloadContext.reloadInitiated(runningModeControl);
            controller.setMode(ServiceController.Mode.NEVER);
          }
);
          try {
            stopping.get();
          }
 catch (          InterruptedException ex) {
            Thread.currentThread().interrupt();
          }
catch (          ExecutionException ex) {
            ControllerLogger.ROOT_LOGGER.errorStoppingServer(ex);
          }
        }
        @Override public void transition(        final ServiceController<? extends Object> controller,        final ServiceController.Transition transition){
          if (transition == ServiceController.Transition.STOPPING_to_DOWN) {
            controller.removeListener(this);
            reloadContext.doReload(runningModeControl);
            controller.setMode(ServiceController.Mode.ACTIVE);
          }
        }
      }
);
    }
  }
}
) @AT@ 3894 @LENGTH@ 2113
---UPD MethodInvocation@@context.completeStep(new OperationContext.ResultHandler(){
  @Override public void handleResult(  OperationContext.ResultAction resultAction,  OperationContext context,  ModelNode operation){
    if (resultAction == OperationContext.ResultAction.KEEP) {
      service.addListener(new AbstractServiceListener<Object>(){
        @Override public void listenerAdded(        final ServiceController<?> controller){
          Future<?> stopping=executor.submit(() -> {
            reloadContext.reloadInitiated(runningModeControl);
            processState.setStopping();
            controller.setMode(ServiceController.Mode.NEVER);
          }
);
          try {
            stopping.get();
          }
 catch (          InterruptedException ex) {
            Thread.currentThread().interrupt();
          }
catch (          ExecutionException ex) {
            ControllerLogger.ROOT_LOGGER.errorStoppingServer(ex);
          }
        }
        @Override public void transition(        final ServiceController<? extends Object> controller,        final ServiceController.Transition transition){
          if (transition == ServiceController.Transition.STOPPING_to_DOWN) {
            controller.removeListener(this);
            reloadContext.doReload(runningModeControl);
            controller.setMode(ServiceController.Mode.ACTIVE);
          }
        }
      }
);
    }
  }
}
) @TO@ context.completeStep(new OperationContext.ResultHandler(){
  @Override public void handleResult(  OperationContext.ResultAction resultAction,  OperationContext context,  ModelNode operation){
    if (resultAction == OperationContext.ResultAction.KEEP) {
      processState.setStopping();
      service.addListener(new AbstractServiceListener<Object>(){
        @Override public void listenerAdded(        final ServiceController<?> controller){
          Future<?> stopping=executor.submit(() -> {
            reloadContext.reloadInitiated(runningModeControl);
            controller.setMode(ServiceController.Mode.NEVER);
          }
);
          try {
            stopping.get();
          }
 catch (          InterruptedException ex) {
            Thread.currentThread().interrupt();
          }
catch (          ExecutionException ex) {
            ControllerLogger.ROOT_LOGGER.errorStoppingServer(ex);
          }
        }
        @Override public void transition(        final ServiceController<? extends Object> controller,        final ServiceController.Transition transition){
          if (transition == ServiceController.Transition.STOPPING_to_DOWN) {
            controller.removeListener(this);
            reloadContext.doReload(runningModeControl);
            controller.setMode(ServiceController.Mode.ACTIVE);
          }
        }
      }
);
    }
  }
}
) @AT@ 3894 @LENGTH@ 2112
------UPD SimpleName@@MethodName:completeStep:[new OperationContext.ResultHandler(){
  @Override public void handleResult(  OperationContext.ResultAction resultAction,  OperationContext context,  ModelNode operation){
    if (resultAction == OperationContext.ResultAction.KEEP) {
      service.addListener(new AbstractServiceListener<Object>(){
        @Override public void listenerAdded(        final ServiceController<?> controller){
          Future<?> stopping=executor.submit(() -> {
            reloadContext.reloadInitiated(runningModeControl);
            processState.setStopping();
            controller.setMode(ServiceController.Mode.NEVER);
          }
);
          try {
            stopping.get();
          }
 catch (          InterruptedException ex) {
            Thread.currentThread().interrupt();
          }
catch (          ExecutionException ex) {
            ControllerLogger.ROOT_LOGGER.errorStoppingServer(ex);
          }
        }
        @Override public void transition(        final ServiceController<? extends Object> controller,        final ServiceController.Transition transition){
          if (transition == ServiceController.Transition.STOPPING_to_DOWN) {
            controller.removeListener(this);
            reloadContext.doReload(runningModeControl);
            controller.setMode(ServiceController.Mode.ACTIVE);
          }
        }
      }
);
    }
  }
}
] @TO@ MethodName:completeStep:[new OperationContext.ResultHandler(){
  @Override public void handleResult(  OperationContext.ResultAction resultAction,  OperationContext context,  ModelNode operation){
    if (resultAction == OperationContext.ResultAction.KEEP) {
      processState.setStopping();
      service.addListener(new AbstractServiceListener<Object>(){
        @Override public void listenerAdded(        final ServiceController<?> controller){
          Future<?> stopping=executor.submit(() -> {
            reloadContext.reloadInitiated(runningModeControl);
            controller.setMode(ServiceController.Mode.NEVER);
          }
);
          try {
            stopping.get();
          }
 catch (          InterruptedException ex) {
            Thread.currentThread().interrupt();
          }
catch (          ExecutionException ex) {
            ControllerLogger.ROOT_LOGGER.errorStoppingServer(ex);
          }
        }
        @Override public void transition(        final ServiceController<? extends Object> controller,        final ServiceController.Transition transition){
          if (transition == ServiceController.Transition.STOPPING_to_DOWN) {
            controller.removeListener(this);
            reloadContext.doReload(runningModeControl);
            controller.setMode(ServiceController.Mode.ACTIVE);
          }
        }
      }
);
    }
  }
}
] @AT@ 3902 @LENGTH@ 2104

