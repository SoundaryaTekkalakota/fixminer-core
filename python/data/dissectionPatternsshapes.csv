jfreechart,6,['condBlockRetAdd'],"['assignAdd', 'condBranIfAdd', 'loopAdd', 'mcAdd', 'mcRem', 'retBranchAdd', 'retExpChange', 'varAdd']",jfreechart-6,"[('ReturnStatement-2-2', 7), ('VariableDeclarationStatement-5-0', 3), ('VariableDeclarationStatement-7-5', 1), ('ReturnStatement-4-8', 1)]",Fixminer
jfreechart,9,"['expLogicExpand', 'singleLine']",['condExpExpand'],jfreechart-9,"[('IfStatement-14-20', 1)]",Dissection
jfreechart,7,"['copyPaste', 'expArithMod', 'wrongVarRef']","['assignExpChange', 'mcParValChange', 'varReplVar']",jfreechart-7,"[('VariableDeclarationStatement-6-62', 2)]",Dissection
jfreechart,3,[],['assignAdd'],jfreechart-3,"[('ExpressionStatement-9-3', 2)]",Fixminer
jfreechart,2,"['condBlockOthersAdd', 'copyPaste']","['assignAdd', 'condBranIfAdd', 'mcAdd', 'varAdd']",jfreechart-2,"[('ExpressionStatement-9-14', 5), ('VariableDeclarationStatement-9-3', 2)]",Equal
jfreechart,1,"['expLogicMod', 'singleLine']",['condExpMod'],jfreechart-1,"[('IfStatement-3-1', 4)]",Dissection
jfreechart,12,"['singleLine', 'wrapsMethod', 'wrongVarRef']","['assignRem', 'mcAdd', 'varReplMc']",jfreechart-12,"[('ExpressionStatement-10-17', 3)]",Dissection
jfreechart,11,"['singleLine', 'wrongVarRef']","['assignExpChange', 'varReplVar']",jfreechart-11,"[('VariableDeclarationStatement-4-0', 5)]",Dissection
jfreechart,21,"['condBlockOthersAdd', 'wrapsElse']","['assignAdd', 'condBranElseAdd', 'condBranIfAdd', 'loopAdd', 'mcAdd', 'varAdd']",jfreechart-21,"[('ExpressionStatement-9-47', 4), ('VariableDeclarationStatement-5-0', 3)]",Equal
jfreechart,15,"['condBlockRetAdd', 'missNullCheckN', 'missNullCheckP', 'wrapsIf']","['condBranIfAdd', 'retBranchAdd']",jfreechart-15,"[('IfStatement-8-1', 1)]",Dissection
jfreechart,19,"['condBlockExcAdd', 'copyPaste', 'missNullCheckP']","['condBranIfAdd', 'exThrowsAdd', 'objInstAdd']",jfreechart-19,"[('IfStatement-10-4', 2)]",Dissection
jfreechart,22,"['condBlockExcAdd', 'condBlockOthersAdd', 'unwrapIfElse', 'wrongVarRef']","['assignAdd', 'condBranIfAdd', 'condBranRem', 'exThrowsAdd', 'loopAdd', 'mcAdd', 'mcParValChange', 'objInstAdd', 'retExpChange', 'varAdd', 'varReplVar']",jfreechart-22,"[('ExpressionStatement-5-3', 4), ('VariableDeclarationStatement-8-4', 2)]",Dissection
jfreechart,25,"['condBlockRetAdd', 'copyPaste', 'missNullCheckN', 'missNullCheckP', 'wrapsIf']","['assignAdd', 'assignExpChange', 'condBranIfAdd', 'mcAdd', 'mcRem', 'retBranchAdd', 'varAdd']",jfreechart-25,"[('IfStatement-6-6', 2)]",Dissection
closure-compiler,3,"['condBlockOthersAdd', 'condBlockRetAdd']","['assignAdd', 'condBranCaseAdd', 'condBranIfAdd', 'condExpMod', 'mcAdd', 'mcParAdd', 'mcRepl', 'mdParAdd', 'retBranchAdd', 'varAdd']",closure-compiler-3,"[('SwitchCase-4-0', 26), ('VariableDeclarationStatement-10-0', 3), ('IfStatement-6-30', 1)]",Fixminer
closure-compiler,5,['condBlockRetAdd'],"['condBranIfAdd', 'mcAdd', 'retBranchAdd']",closure-compiler-5,"[('IfStatement-6-21', 2)]",Equal
closure-compiler,6,"['copyPaste', 'unwrapIfElse']","['condBranRem', 'mcRem']",closure-compiler-6,"[('IfStatement-3-13', 1)]",Dissection
closure-compiler,1,['condBlockRetAdd'],"['condBranIfAdd', 'retBranchAdd']",closure-compiler-1,"[('IfStatement-5-27', 1)]",Equal
closure-compiler,4,"['copyPaste', 'expLogicMod', 'wrongMethodRef']","['condExpMod', 'mcRepl']",closure-compiler-4,"[('IfStatement-2-1', 2)]",Dissection
closure-compiler,9,['unwrapMethod'],"['assignAdd', 'assignExpChange', 'mcAdd', 'mcParValChange', 'mcRem']",closure-compiler-9,"[('ExpressionStatement-9-17', 1)]",Equal
closure-compiler,11,['condBlockRem'],"['condBranRem', 'mcRem', 'retRem']",closure-compiler-11,"[('IfStatement-4-5', 3)]",Equal
closure-compiler,10,"['singleLine', 'wrongMethodRef']","['mcRepl', 'retExpChange']",closure-compiler-10,"[('ReturnStatement-3-2', 2)]",Dissection
closure-compiler,14,"['constChange', 'singleLine', 'wrongVarRef']","['mcParValChange', 'varReplVar']",closure-compiler-14,"[('ExpressionStatement-5-23', 1)]",Dissection
closure-compiler,21,"['condBlockRem', 'expLogicExpand', 'expLogicMod']","['assignRem', 'condBranRem', 'condExpExpand', 'loopRem', 'mcAdd', 'mcRem', 'retRem', 'varRem']",closure-compiler-21,"[('IfStatement-5-6', 2), ('IfStatement-2-5', 1)]",Dissection
closure-compiler,15,['condBlockRetAdd'],"['condBranIfAdd', 'mcAdd', 'retBranchAdd']",closure-compiler-15,"[('FieldDeclaration-2-1', 3), ('IfStatement-6-21', 2)]",Fixminer
closure-compiler,16,['wrapsMethod'],"['assignAdd', 'mcAdd', 'mcParAdd', 'mcParValChange', 'mcRepl', 'mdParAdd', 'objInstMod', 'varAdd']",closure-compiler-16,"[('VariableDeclarationStatement-7-0', 8), ('FieldDeclaration-6-0', 4), ('VariableDeclarationStatement-10-0', 3), ('ExpressionStatement-8-48', 1), ('ExpressionStatement-8-17', 1), ('MethodDeclaration-11-0', 1)]",Fixminer
closure-compiler,19,['condBlockOthersAdd'],['condBranCaseAdd'],closure-compiler-19,"[('SwitchCase-4-0', 26)]",Equal
closure-compiler,24,"['condBlockOthersAdd', 'expLogicExpand']","['condBranIfElseAdd', 'condBranRem', 'condExpExpand', 'mcAdd']",closure-compiler-24,"[('IfStatement-4-5', 3)]",Dissection
closure-compiler,22,"['condBlockRem', 'expLogicMod', 'missNullCheckN', 'unwrapIfElse']","['assignRem', 'condBranIfAdd', 'condBranRem', 'loopRem', 'mcAdd', 'mcRem', 'retRem', 'varRem']",closure-compiler-22,"[('IfStatement-5-6', 2)]",Dissection
closure-compiler,26,['condBlockRetAdd'],"['assignAdd', 'condBranIfAdd', 'mcAdd', 'retBranchAdd', 'varAdd']",closure-compiler-26,"[('ExpressionStatement-5-1', 2), ('FieldDeclaration-10-16', 1), ('IfStatement-8-36', 1)]",Fixminer
closure-compiler,25,[],"['assignExpChange', 'assignRem', 'loopRem', 'mcAdd', 'mcRem']",closure-compiler-25,"[('ExpressionStatement-2-1', 3), ('ExpressionStatement-8-20', 1), ('ExpressionStatement-5-6', 1)]",Fixminer
closure-compiler,27,"['copyPaste', 'wrongMethodRef']","['assignExpChange', 'mcParValChange', 'mcRepl', 'mdAdd', 'objInstAdd', 'retBranchAdd']",closure-compiler-27,"[('ExpressionStatement-5-12', 2), ('VariableDeclarationStatement-4-4', 1)]",Equal
closure-compiler,29,"['condBlockOthersAdd', 'condBlockRetAdd']","['assignAdd', 'condBranIfAdd', 'condBranIfElseAdd', 'mcAdd', 'retBranchAdd', 'varAdd']",closure-compiler-29,"[('ExpressionStatement-7-3', 2), ('VariableDeclarationStatement-8-6', 1), ('VariableDeclarationStatement-9-0', 1)]",Fixminer
closure-compiler,32,"['condBlockOthersAdd', 'condBlockRem']","['assignAdd', 'condBranIfAdd', 'condBranIfElseAdd', 'condBranRem', 'loopAdd', 'mcAdd', 'mcRem', 'varAdd']",closure-compiler-32,"[('VariableDeclarationStatement-10-43', 1), ('ExpressionStatement-10-34', 1), ('VariableDeclarationStatement-7-11', 1), ('ExpressionStatement-5-31', 1)]",Fixminer
closure-compiler,33,['condBlockRetAdd'],"['condBranIfAdd', 'mcAdd', 'retBranchAdd']",closure-compiler-33,"[('IfStatement-3-16', 1)]",Equal
closure-compiler,39,"['expLogicExpand', 'wrapsIfElse', 'wrongMethodRef']","['condBranIfElseAdd', 'condExpExpand', 'mcParAdd', 'mcRepl', 'retExpChange']",closure-compiler-39,"[('ExpressionStatement-6-2', 2)]",Dissection
closure-compiler,45,"['condBlockOthersAdd', 'expLogicExpand', 'wrongMethodRef']","['assignAdd', 'assignExpChange', 'condBranIfAdd', 'condExpExpand', 'condExpMod', 'mcAdd', 'mcRem', 'varAdd']",closure-compiler-45,"[('VariableDeclarationStatement-5-4', 6), ('IfStatement-7-63', 1)]",Dissection
closure-compiler,40,"['constChange', 'unwrapIfElse']","['condBranRem', 'mcParValChange']",closure-compiler-40,"[('IfStatement-4-5', 3)]",Dissection
closure-compiler,43,"['condBlockOthersAdd', 'missNullCheckN', 'missNullCheckP', 'wrapsIfElse']","['assignAdd', 'condBranIfAdd', 'condBranIfElseAdd', 'loopAdd', 'mcAdd', 'varAdd']",closure-compiler-43,"[('VariableDeclarationStatement-7-0', 8), ('FieldDeclaration-8-17', 1)]",Dissection
closure-compiler,49,"['condBlockOthersAdd', 'condBlockRem']","['assignAdd', 'assignRem', 'condBranCaseAdd', 'condBranRem', 'loopAdd', 'loopRem', 'mcAdd', 'mcRem', 'varAdd', 'varRem']",closure-compiler-49,"[('SwitchCase-4-0', 26), ('ExpressionStatement-4-1', 3)]",Equal
closure-compiler,51,"['expLogicExpand', 'singleLine']","['condExpExpand', 'mcAdd']",closure-compiler-51,"[('IfStatement-9-8', 1)]",Dissection
closure-compiler,62,"['expLogicMod', 'singleLine']",['condExpMod'],closure-compiler-62,"[('IfStatement-4-8', 3)]",Dissection
closure-compiler,60,"['condBlockRetAdd', 'wrapsIf']","['condBranCaseAdd', 'condBranIfAdd', 'mcAdd', 'retBranchAdd']",closure-compiler-60,"[('SwitchCase-4-0', 26)]",Dissection
closure-compiler,63,"['expLogicMod', 'singleLine']",['condExpMod'],closure-compiler-63,"[('IfStatement-4-8', 3)]",Dissection
closure-compiler,64,['expLogicExpand'],"['mcParAdd', 'mcParValChange', 'mcRepl', 'mdParAdd', 'retExpChange']",closure-compiler-64,"[('ReturnStatement-4-6', 3), ('ExpressionStatement-3-0', 1)]",Fixminer
closure-compiler,65,"['constChange', 'singleLine']",['mcParValChange'],closure-compiler-65,"[('ExpressionStatement-4-3', 5)]",Dissection
closure-compiler,66,['condBlockOthersAdd'],"['assignAdd', 'condBranElseAdd']",closure-compiler-66,"[('ExpressionStatement-5-3', 4)]",Equal
closure-compiler,73,"['expLogicMod', 'singleLine']",['condExpMod'],closure-compiler-73,"[('IfStatement-4-8', 3)]",Dissection
closure-compiler,74,"['condBlockRetAdd', 'copyPaste', 'wrongMethodRef']","['assignAdd', 'assignExpChange', 'condBranCaseAdd', 'condBranIfAdd', 'mcAdd', 'mcRepl', 'mdAdd', 'retBranchAdd', 'varAdd']",closure-compiler-74,"[('VariableDeclarationStatement-6-1', 2)]",Dissection
closure-compiler,68,"['codeMove', 'copyPaste', 'unwrapIfElse']",['mcAdd'],closure-compiler-68,"[('ExpressionStatement-4-2', 10)]",Dissection
closure-compiler,70,"['constChange', 'singleLine']",['mcParValChange'],closure-compiler-70,"[('ExpressionStatement-4-9', 3)]",Dissection
closure-compiler,76,"['condBlockOthersAdd', 'condBlockRetAdd', 'missNullCheckN', 'unwrapIfElse']","['assignAdd', 'condBranIfAdd', 'condBranIfElseAdd', 'condBranRem', 'condExpMod', 'mcAdd', 'mcRem', 'retBranchAdd', 'varAdd']",closure-compiler-76,"[('VariableDeclarationStatement-10-20', 3), ('IfStatement-9-16', 3)]",Dissection
closure-compiler,77,"['condBlockOthersAdd', 'singleLine']","['condBranCaseAdd', 'mcAdd']",closure-compiler-77,"[('SwitchCase-2-3', 2), ('ExpressionStatement-5-0', 1)]",Equal
closure-compiler,75,"['condBlockRetAdd', 'constChange', 'wrongVarRef']","['condBranIfAdd', 'mcAdd', 'retBranchAdd', 'retExpChange', 'varReplVar']",closure-compiler-75,"[('IfStatement-7-44', 2), ('ReturnStatement-3-3', 1)]",Dissection
closure-compiler,78,['copyPaste'],['mcRem'],closure-compiler-78,"[('ExpressionStatement-9-49', 2)]",Equal
closure-compiler,83,['wrapsTryCatch'],"['assignAdd', 'exTryCatchAdd']",closure-compiler-83,"[('VariableDeclarationStatement-3-1', 1)]",Equal
closure-compiler,80,['expLogicExpand'],['condBranCaseAdd'],closure-compiler-80,"[('SwitchCase-4-0', 26)]",Equal
closure-compiler,81,['condBlockOthersAdd'],"['assignAdd', 'condBranIfAdd', 'mcAdd', 'varAdd']",closure-compiler-81,"[('VariableDeclarationStatement-7-4', 5)]",Equal
closure-compiler,85,"['condBlockOthersAdd', 'condBlockRem', 'missNullCheckN', 'unwrapMethod']","['assignAdd', 'assignRem', 'condBranIfElseAdd', 'condBranRem', 'loopAdd', 'mcAdd', 'mcRem', 'retRem', 'varRem']",closure-compiler-85,"[('SwitchCase-4-0', 26), ('VariableDeclarationStatement-5-57', 1)]",Dissection
closure-compiler,86,"['constChange', 'expLogicMod', 'singleLine']",['retExpChange'],closure-compiler-86,"[('ReturnStatement-2-2', 7)]",Dissection
closure-compiler,84,"['condBlockOthersAdd', 'condBlockRetAdd']","['assignAdd', 'condBranCaseAdd', 'condBranIfAdd', 'mcAdd', 'mdAdd', 'retBranchAdd', 'varAdd']",closure-compiler-84,"[('VariableDeclarationStatement-7-0', 8)]",Dissection
closure-compiler,88,['condBlockRetAdd'],"['assignAdd', 'condBranIfAdd', 'mcAdd', 'retBranchAdd', 'varAdd']",closure-compiler-88,"[('VariableDeclarationStatement-7-0', 8), ('IfStatement-9-16', 3), ('VariableDeclarationStatement-8-16', 1)]",Fixminer
closure-compiler,87,['condBlockRetAdd'],"['assignAdd', 'condBranIfAdd', 'condBranIfElseAdd', 'mcAdd', 'mcRem', 'retBranchAdd', 'retExpChange', 'varAdd']",closure-compiler-87,"[('ReturnStatement-2-2', 7), ('ReturnStatement-2-0', 3)]",Fixminer
closure-compiler,92,"['singleLine', 'wrongMethodRef']","['assignExpChange', 'mcRepl']",closure-compiler-92,"[('VariableDeclarationStatement-4-0', 5)]",Dissection
closure-compiler,94,"['condBlockRetAdd', 'expLogicExpand']","['condBranCaseAdd', 'mcAdd', 'retBranchAdd']",closure-compiler-94,"[('SwitchCase-4-0', 26)]",Dissection
closure-compiler,91,"['condBlockOthersAdd', 'condBlockRetAdd']","['assignAdd', 'condBranIfAdd', 'mcAdd', 'retBranchAdd', 'varAdd']",closure-compiler-91,"[('VariableDeclarationStatement-7-0', 8)]",Dissection
closure-compiler,93,"['singleLine', 'wrongMethodRef']","['assignExpChange', 'mcRepl']",closure-compiler-93,"[('VariableDeclarationStatement-4-0', 5)]",Dissection
closure-compiler,97,"['expArithMod', 'singleLine']","['assignAdd', 'assignExpChange', 'varAdd']",closure-compiler-97,"[('VariableDeclarationStatement-8-12', 9), ('ExpressionStatement-4-23', 2)]",Equal
closure-compiler,101,['condBlockRem'],"['assignExpChange', 'condBranRem']",closure-compiler-101,"[('ExpressionStatement-2-1', 3)]",Equal
closure-compiler,100,"['condBlockRetAdd', 'missNullCheckN']","['assignAdd', 'condBranIfAdd', 'mcAdd', 'retBranchAdd', 'retExpChange', 'varAdd']",closure-compiler-100,"[('VariableDeclarationStatement-7-4', 5)]",Dissection
closure-compiler,98,"['condBlockOthersAdd', 'condBlockRetAdd', 'missNullCheckN']","['assignAdd', 'condBranIfElseAdd', 'loopAdd', 'mcAdd', 'retBranchAdd', 'varAdd']",closure-compiler-98,"[('FieldDeclaration-6-1', 2)]",Dissection
closure-compiler,104,"['expLogicMod', 'singleLine']","['condExpMod', 'mcAdd']",closure-compiler-104,"[('IfStatement-10-29', 1)]",Dissection
closure-compiler,107,['singleLine'],['mcAdd'],closure-compiler-107,"[('ExpressionStatement-10-6', 1)]",Equal
closure-compiler,108,['expLogicExpand'],"['assignAdd', 'condExpExpand', 'mcAdd', 'varAdd']",closure-compiler-108,"[('ExpressionStatement-4-1', 3), ('ExpressionStatement-7-3', 2), ('IfStatement-14-22', 1)]",Fixminer
closure-compiler,113,"['expLogicExpand', 'singleLine']","['condExpExpand', 'mcAdd']",closure-compiler-113,"[('IfStatement-11-13', 2)]",Dissection
closure-compiler,115,['condBlockRem'],"['assignRem', 'condBranRem', 'mcRem', 'retRem', 'varRem']",closure-compiler-115,"[('VariableDeclarationStatement-5-4', 6), ('IfStatement-33-0', 2)]",Fixminer
closure-compiler,116,"['condBlockOthersAdd', 'condBlockRetAdd']","['assignAdd', 'condBranIfAdd', 'mcAdd', 'retBranchAdd', 'varAdd']",closure-compiler-116,"[('VariableDeclarationStatement-5-4', 6), ('IfStatement-33-0', 2)]",Equal
closure-compiler,111,"['singleLine', 'wrapsIfElse']","['condBranIfElseAdd', 'mcAdd', 'retExpChange']",closure-compiler-111,"[('FieldDeclaration-2-1', 3)]",Dissection
closure-compiler,118,['condBlockOthersAdd'],"['condBranIfAdd', 'mcAdd']",closure-compiler-118,"[('IfStatement-5-7', 1)]",Equal
closure-compiler,119,"['expLogicExpand', 'singleLine']",['condBranCaseAdd'],closure-compiler-119,"[('SwitchCase-4-0', 26)]",Dissection
closure-compiler,122,['expLogicMod'],"['assignAdd', 'condExpMod', 'mcAdd', 'mcRem', 'varAdd']",closure-compiler-122,"[('VariableDeclarationStatement-7-0', 8)]",Equal
closure-compiler,125,"['expLogicExpand', 'singleLine']","['condExpExpand', 'mcAdd']",closure-compiler-125,"[('IfStatement-11-13', 2)]",Dissection
closure-compiler,128,"['condBlockRetAdd', 'expLogicMod']","['condBranIfAdd', 'retBranchAdd', 'retExpChange']",closure-compiler-128,"[('IfStatement-7-3', 1)]",Dissection
commons-lang,4,['wrongVarRef'],"['assignExpChange', 'mcAdd', 'objInstMod', 'varReplMc', 'varTyChange']",commons-lang-4,"[('VariableDeclarationStatement-8-8', 1), ('FieldDeclaration-3-6', 1), ('ExpressionStatement-5-15', 1)]",Fixminer
commons-lang,1,"['condBlockOthersAdd', 'copyPaste', 'expLogicExpand']","['assignAdd', 'condBranIfElseAdd', 'condExpExpand', 'loopAdd', 'mcAdd', 'varAdd']",commons-lang-1,"[('VariableDeclarationStatement-5-7', 5), ('IfStatement-19-1', 2)]",Dissection
commons-lang,6,"['expArithMod', 'singleLine', 'wrongVarRef']","['mcParValChange', 'varReplVar']",commons-lang-6,"[('ExpressionStatement-7-22', 1)]",Dissection
closure-compiler,133,['singleLine'],['assignAdd'],closure-compiler-133,"[('ExpressionStatement-5-7', 10)]",Equal
commons-lang,7,"['condBlockExcAdd', 'condBlockRem']","['condExpMod', 'exThrowsAdd', 'mcAdd', 'mcRem', 'objInstAdd', 'retRem']",commons-lang-7,"[('IfStatement-7-44', 2)]",Dissection
commons-lang,8,[],"['assignAdd', 'assignRem', 'mcAdd', 'varAdd', 'varRem']",commons-lang-8,"[('ExpressionStatement-5-7', 10), ('VariableDeclarationStatement-7-0', 8), ('FieldDeclaration-6-0', 4)]",Fixminer
commons-lang,10,['condBlockRem'],"['assignRem', 'condBranIfAdd', 'mcRem', 'varRem']",commons-lang-10,"[('VariableDeclarationStatement-5-4', 6), ('ExpressionStatement-5-3', 4)]",Fixminer
commons-lang,13,"['condBlockExcAdd', 'condBlockRetAdd', 'wrapsTryCatch']","['assignAdd', 'condBranIfElseAdd', 'exThrowsAdd', 'exTryCatchAdd', 'mcAdd', 'objInstAdd', 'retBranchAdd', 'varAdd']",commons-lang-13,"[('ExpressionStatement-6-31', 9), ('FieldDeclaration-20-0', 1)]",Dissection
commons-lang,17,"['unwrapIfElse', 'unwrapMethod']","['assignAdd', 'assignExpChange', 'assignRem', 'condBranIfElseAdd', 'condBranRem', 'mcRem']",commons-lang-17,"[('ExpressionStatement-4-10', 1), ('ForStatement-2-0', 1)]",Equal
commons-lang,23,['condBlockRetAdd'],"['assignAdd', 'condBranIfAdd', 'mcAdd', 'mdAdd', 'mdOverride', 'varAdd']",commons-lang-23,"[('FieldDeclaration-8-1', 2)]",Equal
commons-lang,26,"['singleLine', 'wrongMethodRef']",['objInstMod'],commons-lang-26,"[('VariableDeclarationStatement-4-2', 1)]",Dissection
commons-lang,29,['singleLine'],['mdRetTyChange'],commons-lang-29,"[('MethodDeclaration-2-3', 1)]",Equal
commons-lang,30,"['condBlockOthersAdd', 'condBlockRetAdd', 'copyPaste', 'expLogicExpand', 'expLogicMod', 'wrapsIf', 'wrapsIfElse']","['assignAdd', 'condBranIfAdd', 'condBranIfElseAdd', 'condExpExpand', 'condExpMod', 'condExpRed', 'mcAdd', 'mcRem', 'mdParTyChange', 'retBranchAdd', 'varAdd']",commons-lang-30,"[('VariableDeclarationStatement-8-12', 9), ('MethodDeclaration-3-3', 2), ('VariableDeclarationStatement-5-63', 1)]",Dissection
commons-lang,31,"['condBlockRetAdd', 'wrapsIfElse']","['condBranIfElseAdd', 'mcAdd', 'retBranchAdd', 'varAdd']",commons-lang-31,"[('VariableDeclarationStatement-8-12', 9)]",Dissection
commons-lang,32,"['condBlockOthersAdd', 'expLogicMod', 'missNullCheckN', 'missNullCheckP']","['condBranIfAdd', 'mcAdd', 'mdOverride', 'mdRem', 'objInstMod', 'retExpChange', 'varAdd']",commons-lang-32,"[('FieldDeclaration-2-1', 3), ('VariableDeclarationStatement-7-17', 2), ('ExpressionStatement-4-14', 1)]",Dissection
commons-lang,35,[],"['assignRem', 'exThrowsAdd', 'objInstAdd', 'retRem']",commons-lang-35,"[('ThrowStatement-5-0', 2)]",Fixminer
commons-lang,38,['singleLine'],['mcAdd'],commons-lang-38,"[('ExpressionStatement-4-1', 3)]",Equal
commons-lang,43,['singleLine'],['mcAdd'],commons-lang-43,"[('ExpressionStatement-4-2', 10)]",Equal
commons-lang,36,"['condBlockRetAdd', 'expLogicExpand']","['condBranIfAdd', 'condExpExpand', 'retBranchAdd']",commons-lang-36,"[('ReturnStatement-2-2', 7)]",Dissection
commons-lang,41,"['condBlockOthersAdd', 'expLogicExpand']","['assignAdd', 'condBranIfAdd', 'condExpExpand', 'loopAdd', 'mcAdd', 'objInstAdd', 'retExpChange', 'varAdd']",commons-lang-41,"[('VariableDeclarationStatement-7-1', 1), ('IfStatement-13-4', 1), ('IfStatement-14-30', 1)]",Fixminer
commons-lang,40,['condBlockRetAdd'],"['assignAdd', 'loopAdd', 'mcAdd', 'mcRem', 'retBranchAdd', 'retExpChange', 'varAdd']",commons-lang-40,"[('ReturnStatement-2-2', 7), ('VariableDeclarationStatement-7-4', 5), ('VariableDeclarationStatement-10-14', 1)]",Fixminer
commons-lang,47,"['condBlockOthersAdd', 'copyPaste', 'missNullCheckP']","['assignAdd', 'condBranIfAdd']",commons-lang-47,"[('IfStatement-10-1', 2)]",Dissection
commons-lang,52,['condBlockOthersAdd'],"['condBranCaseAdd', 'mcAdd']",commons-lang-52,"[('ExpressionStatement-5-50', 2), ('SwitchCase-2-3', 2)]",Fixminer
commons-lang,46,['wrapsIf'],"['condBranIfAdd', 'mcParAdd', 'mcRepl', 'mdParAdd', 'retExpChange']",commons-lang-46,"[('ExpressionStatement-4-2', 10), ('ReturnStatement-4-6', 3), ('ExpressionStatement-4-9', 3), ('MethodDeclaration-4-1', 2), ('IfStatement-3-5', 1)]",Fixminer
commons-lang,50,"['condBlockRem', 'copyPaste', 'expLogicMod', 'unwrapIfElse']","['assignAdd', 'assignRem', 'condBranRem', 'condExpMod', 'mcAdd', 'mcRem', 'objInstAdd', 'objInstRem']",commons-lang-50,"[('IfStatement-5-1', 3)]",Dissection
commons-lang,51,['singleLine'],['retBranchAdd'],commons-lang-51,"[('ReturnStatement-2-2', 7)]",Equal
commons-lang,57,"['singleLine', 'wrongVarRef']","['mcAdd', 'retExpChange', 'varReplMc']",commons-lang-57,"[('ReturnStatement-4-5', 2)]",Dissection
commons-lang,56,[],"['mcAdd', 'mdAdd', 'mdOverride', 'varModChange']",commons-lang-56,"[('FieldDeclaration-2-0', 2)]",Fixminer
commons-lang,59,"['singleLine', 'wrongVarRef']","['mcParValChange', 'varReplVar']",commons-lang-59,"[('ExpressionStatement-4-2', 10)]",Dissection
commons-lang,62,"['condBlockOthersAdd', 'copyPaste']","['assignAdd', 'condBranIfAdd']",commons-lang-62,"[('IfStatement-12-36', 2), ('ExpressionStatement-7-72', 1)]",Equal
commons-lang,63,['expArithMod'],"['assignExpChange', 'assignRem', 'condBranRem', 'mcAdd', 'mcRem', 'mdRem', 'retRem', 'varRem']",commons-lang-63,"[('ExpressionStatement-12-12', 4), ('ExpressionStatement-5-20', 2), ('ExpressionStatement-9-41', 1)]",Fixminer
commons-lang,65,"['condBlockOthersAdd', 'condBlockRetAdd', 'wrapsIf']","['assignAdd', 'condBranIfAdd', 'mcAdd', 'retBranchAdd', 'varAdd']",commons-lang-65,"[('IfStatement-6-15', 10), ('VariableDeclarationStatement-7-0', 8), ('VariableDeclarationStatement-5-4', 6), ('VariableDeclarationStatement-7-4', 5), ('VariableDeclarationStatement-10-12', 3), ('IfStatement-8-18', 1)]",Fixminer
commons-math,5,"['constChange', 'expArithMod', 'singleLine']",['retExpChange'],commons-math-5,"[('ReturnStatement-2-1', 2)]",Dissection
commons-math,7,"['copyPaste', 'wrapsLoop', 'wrongVarRef']","['assignAdd', 'assignExpChange', 'assignRem', 'loopRem', 'mcRem', 'varReplVar']",commons-math-7,"[('EnhancedForStatement-12-1', 3), ('VariableDeclarationStatement-3-2', 1)]",Dissection
commons-math,12,[],"['assignAdd', 'tyImpInterf', 'varAdd']",commons-math-12,"[('FieldDeclaration-8-1', 2), ('TypeDeclaration-2-0', 1)]",Fixminer
commons-math,16,"['copyPaste', 'wrapsIfElse']","['assignAdd', 'condBranIfElseAdd', 'mcAdd', 'retBranchAdd', 'varAdd']",commons-math-16,"[('IfStatement-26-0', 2)]",Dissection
commons-math,23,['wrapsMethod'],"['assignAdd', 'mcAdd', 'mcRepl', 'retExpChange', 'varAdd']",commons-math-23,"[('VariableDeclarationStatement-5-6', 2), ('ReturnStatement-2-1', 2)]",Fixminer
commons-math,21,"['expArithMod', 'expLogicMod', 'wrongVarRef']","['assignAdd', 'assignRem', 'condBranIfAdd', 'varAdd', 'varRem', 'varReplVar']",commons-math-21,"[('ExpressionStatement-7-63', 1), ('VariableDeclarationStatement-5-9', 1)]",Dissection
commons-math,31,"['condBlockOthersAdd', 'condBlockRem', 'expArithMod', 'wrongVarRef']","['assignAdd', 'assignRem', 'condBranRem', 'exThrowsRem', 'loopRem', 'mcAdd', 'mcRem', 'objInstRem', 'varAdd', 'varRem', 'varReplVar']",commons-math-31,"[('ExpressionStatement-5-7', 10), ('VariableDeclarationStatement-5-7', 5), ('ExpressionStatement-2-1', 3), ('ExpressionStatement-3-1', 3), ('ExpressionStatement-4-23', 2)]",Fixminer
commons-math,35,"['copyPaste', 'wrapsMethod', 'wrongVarRef']","['assignRem', 'mcAdd', 'varReplMc']",commons-math-35,"[('ExpressionStatement-10-17', 3)]",Dissection
commons-math,33,"['expLogicMod', 'singleLine', 'wrongVarRef']","['mcParValChange', 'varReplVar']",commons-math-33,"[('IfStatement-5-12', 1)]",Dissection
commons-math,37,"['condBlockRetAdd', 'copyPaste', 'expLogicExpand']","['condBranIfAdd', 'condExpExpand', 'mcAdd', 'retBranchAdd']",commons-math-37,"[('IfStatement-10-50', 2)]",Dissection
commons-math,34,"['singleLine', 'wrongVarRef']","['mcAdd', 'varReplMc']",commons-math-34,"[('ReturnStatement-4-5', 2)]",Dissection
commons-math,40,"['copyPaste', 'expArithMod']","['assignAdd', 'assignExpChange', 'varAdd']",commons-math-40,"[('ExpressionStatement-25-0', 2), ('VariableDeclarationStatement-9-34', 2), ('VariableDeclarationStatement-13-12', 2), ('VariableDeclarationStatement-9-52', 2)]",Fixminer
commons-math,38,"['copyPaste', 'expArithMod']","['assignExpChange', 'exThrowsRem', 'objInstRem']",commons-math-38,"[('ThrowStatement-4-1', 5), ('VariableDeclarationStatement-7-56', 2)]",Equal
commons-math,44,['copyPaste'],"['assignAdd', 'assignRem', 'loopAdd', 'mcAdd', 'varAdd']",commons-math-44,"[('ExpressionStatement-5-3', 4), ('EnhancedForStatement-12-1', 3)]",Fixminer
commons-math,43,['expLogicMod'],['condExpMod'],commons-math-43,"[('IfStatement-12-11', 3)]",Equal
commons-math,47,"['copyPaste', 'expLogicMod', 'wrapsIfElse']","['assignAdd', 'condBranIfElseAdd', 'condExpMod', 'retExpChange', 'varAdd']",commons-math-47,"[('ReturnStatement-6-17', 3), ('FieldDeclaration-7-5', 1)]",Dissection
commons-math,49,"['copyPaste', 'wrongVarRef']","['assignExpChange', 'varReplVar']",commons-math-49,"[('VariableDeclarationStatement-5-42', 4)]",Dissection
commons-math,46,"['copyPaste', 'unwrapIfElse']","['condBranRem', 'retExpChange']",commons-math-46,"[('ReturnStatement-6-17', 3)]",Dissection
commons-math,45,['condBlockExcAdd'],"['assignAdd', 'condBranIfAdd', 'exThrowsAdd', 'objInstAdd', 'varAdd']",commons-math-45,"[('VariableDeclarationStatement-7-41', 2)]",Equal
commons-math,51,['condBlockOthersAdd'],"['assignAdd', 'condBranCaseAdd', 'condBranIfAdd', 'exThrowsAdd', 'mcAdd', 'objInstAdd', 'varAdd']",commons-math-51,"[('ThrowStatement-4-1', 5), ('SwitchCase-2-0', 1)]",Fixminer
commons-math,58,"['singleLine', 'wrongMethodRef']","['mcParRem', 'mcRepl', 'objInstRem', 'retExpChange']",commons-math-58,"[('ReturnStatement-6-2', 1)]",Dissection
commons-math,57,['singleLine'],['varTyChange'],commons-math-57,"[('VariableDeclarationStatement-2-3', 3)]",Equal
commons-math,53,['condBlockRetAdd'],"['condBranIfAdd', 'retBranchAdd']",commons-math-53,"[('IfStatement-9-16', 3)]",Equal
commons-math,55,"['condBlockRetAdd', 'expArithMod']","['assignAdd', 'condBranIfAdd', 'mcAdd', 'mcParValChange', 'objInstMod', 'retBranchAdd', 'retExpChange', 'varAdd']",commons-math-55,"[('VariableDeclarationStatement-14-1', 3), ('VariableDeclarationStatement-8-13', 2), ('VariableDeclarationStatement-12-3', 2)]",Fixminer
commons-math,56,['expArithMod'],"['assignExpChange', 'assignRem', 'loopRem', 'varRem']",commons-math-56,"[('VariableDeclarationStatement-5-7', 5), ('ExpressionStatement-4-25', 1)]",Fixminer
commons-math,66,"['constChange', 'expLogicMod', 'wrongMethodRef', 'wrongVarRef']","['assignAdd', 'condBranIfElseAdd', 'condExpMod', 'exThrowsRem', 'loopCondChange', 'mcAdd', 'mcParRem', 'mcParValChange', 'mcRem', 'mcRepl', 'mdOverride', 'mdParRem', 'mdRem', 'objInstRem', 'retExpChange', 'retRem', 'varAdd', 'varRem', 'varReplMc']",commons-math-66,"[('ThrowStatement-4-1', 5), ('ExpressionStatement-4-4', 3), ('VariableDeclarationStatement-5-2', 2), ('ExpressionStatement-7-93', 1)]",Equal
commons-math,65,"['expArithMod', 'wrongVarRef']","['assignExpChange', 'assignRem', 'loopRem', 'mcAdd', 'mcParValChange', 'varRem', 'varReplMc']",commons-math-65,"[('ExpressionStatement-3-1', 3), ('MethodDeclaration-2-5', 1)]",Equal
commons-math,64,"['codeMove', 'condBlockOthersAdd', 'condBlockRem', 'condBlockRetAdd', 'expArithMod', 'missNullCheckN', 'wrongVarRef']","['assignAdd', 'assignExpChange', 'condBranIfAdd', 'condBranRem', 'loopAdd', 'mcAdd', 'mcMove', 'mcParValChange', 'mcRem', 'objInstAdd', 'objInstRem', 'retBranchAdd', 'retRem', 'varAdd', 'varReplVar']",commons-math-64,"[('ExpressionStatement-4-2', 10), ('ExpressionStatement-5-7', 10), ('ExpressionStatement-2-0', 3), ('ExpressionStatement-9-6', 2), ('VariableDeclarationStatement-9-64', 2), ('IfStatement-6-48', 1)]",Dissection
commons-math,70,"['singleLine', 'wrongMethodRef']","['mcParAdd', 'mcRepl', 'retExpChange']",commons-math-70,"[('ReturnStatement-4-0', 10)]",Dissection
commons-math,68,"['condBlockRetAdd', 'missNullCheckN', 'wrapsIfElse']","['assignAdd', 'condBranIfAdd', 'condBranIfElseAdd', 'mcAdd', 'objInstAdd', 'objInstRem', 'retBranchAdd', 'retExpChange', 'varAdd']",commons-math-68,"[('ExpressionStatement-9-6', 2), ('VariableDeclarationStatement-5-6', 2), ('ReturnStatement-7-17', 2), ('ExpressionStatement-4-11', 1), ('VariableDeclarationStatement-9-9', 1)]",Fixminer
commons-math,72,['wrongVarRef'],"['mcParValChange', 'varReplVar']",commons-math-72,"[('ExpressionStatement-4-2', 10)]",Equal
commons-math,67,['wrongMethodRef'],"['mcRem', 'retExpChange']",commons-math-67,"[('ReturnStatement-7-19', 2)]",Equal
commons-math,74,[],"['assignAdd', 'assignRem', 'loopAdd', 'mcAdd', 'mcRem']",commons-math-74,"[('ForStatement-17-0', 2), ('ExpressionStatement-6-66', 1)]",Fixminer
commons-math,75,"['singleLine', 'wrongMethodRef']","['mcRepl', 'retExpChange']",commons-math-75,"[('ReturnStatement-3-2', 2)]",Dissection
commons-math,82,"['expLogicMod', 'singleLine']",['condExpMod'],commons-math-82,"[('IfStatement-3-1', 4)]",Dissection
commons-math,76,"['copyPaste', 'expArithMod', 'expLogicMod', 'wrapsIfElse', 'wrongVarRef']","['assignAdd', 'assignExpChange', 'assignRem', 'condBranIfElseAdd', 'loopCondChange', 'mcParValChange', 'varReplVar']",commons-math-76,"[('ForStatement-35-0', 2), ('VariableDeclarationStatement-6-56', 2)]",Dissection
commons-math,84,['condBlockRetAdd'],"['assignAdd', 'condBranIfAdd', 'loopAdd', 'mcAdd', 'retBranchAdd', 'varAdd']",commons-math-84,"[('VariableDeclarationStatement-5-4', 6), ('VariableDeclarationStatement-6-3', 1), ('VariableDeclarationStatement-6-21', 1), ('IfStatement-3-21', 1)]",Fixminer
commons-math,81,"['constChange', 'expArithMod', 'expLogicMod']","['assignAdd', 'condExpMod', 'loopCondChange', 'mcAdd']",commons-math-81,"[('ExpressionStatement-9-14', 5), ('IfStatement-3-11', 1)]",Dissection
commons-math,83,"['wrapsIfElse', 'wrongMethodRef']","['assignExpChange', 'condBranIfElseAdd', 'mcRepl']",commons-math-83,"[('VariableDeclarationStatement-4-0', 5)]",Dissection
commons-math,79,[],['varTyChange'],commons-math-79,"[('VariableDeclarationStatement-2-3', 3)]",Fixminer
commons-math,85,"['expLogicMod', 'singleLine']",['condExpMod'],commons-math-85,"[('IfStatement-3-1', 4)]",Dissection
commons-math,87,['wrapsIfElse'],"['condBranIfElseAdd', 'mcAdd']",commons-math-87,"[('IfStatement-5-1', 3)]",Equal
commons-math,88,"['condBlockRem', 'wrapsIfElse']","['assignAdd', 'assignRem', 'condBranIfElseAdd', 'condBranRem', 'loopRem', 'mcAdd', 'objInstAdd', 'varAdd']",commons-math-88,"[('VariableDeclarationStatement-11-0', 1)]",Dissection
commons-math,93,"['condBlockExcAdd', 'condBlockRetAdd', 'expLogicMod']","['condBranIfAdd', 'condExpMod', 'exThrowsAdd', 'mcAdd', 'objInstAdd', 'retBranchAdd', 'varRem']",commons-math-93,"[('IfStatement-10-13', 2)]",Dissection
commons-math,95,['wrapsIf'],"['assignAdd', 'condBranIfAdd']",commons-math-95,"[('IfStatement-6-16', 2), ('VariableDeclarationStatement-3-11', 1)]",Fixminer
commons-math,90,[],"['mcAdd', 'mdAdd']",commons-math-90,"[('MethodDeclaration-6-10', 1)]",Fixminer
commons-math,92,"['condBlockExcAdd', 'condBlockOthersAdd', 'condBlockRem', 'condBlockRetAdd', 'expArithMod', 'wrongMethodRef']","['assignAdd', 'assignExpChange', 'condBranIfAdd', 'condBranIfElseAdd', 'condBranRem', 'exThrowsAdd', 'exThrowsRem', 'loopAdd', 'mcAdd', 'mcParValChange', 'mcRem', 'objInstAdd', 'objInstRem', 'retBranchAdd', 'varAdd']",commons-math-92,"[('VariableDeclarationStatement-5-7', 5), ('IfStatement-10-13', 2), ('IfStatement-10-33', 1)]",Dissection
commons-math,104,"['constChange', 'singleLine']",['assignExpChange'],commons-math-104,"[('FieldDeclaration-3-2', 1)]",Dissection
commons-math,106,"['condBlockRetAdd', 'copyPaste']","['condBranIfAdd', 'mcAdd', 'retBranchAdd']",commons-math-106,"[('IfStatement-14-14', 2)]",Dissection
mockito,3,['condBlockOthersAdd'],"['assignAdd', 'condBranIfElseAdd', 'loopAdd', 'loopCondChange', 'mcAdd', 'mcRem', 'mdAdd', 'objInstAdd', 'varAdd']",mockito-3,"[('VariableDeclarationStatement-3-0', 1)]",Equal
mockito,2,['condBlockOthersAdd'],"['condBranIfAdd', 'mcAdd', 'mdAdd', 'objInstAdd']",mockito-2,"[('ExpressionStatement-4-2', 10)]",Equal
mockito,1,['condBlockOthersAdd'],"['assignAdd', 'condBranIfAdd', 'exThrowsRem', 'loopAdd', 'objInstRem', 'varAdd']",mockito-1,"[('ThrowStatement-4-1', 5)]",Equal
mockito,11,"['condBlockRetAdd', 'wrapsIfElse']","['assignAdd', 'condBranIfAdd', 'condBranIfElseAdd', 'mcAdd', 'retBranchAdd', 'retExpChange', 'varAdd']",mockito-11,"[('IfStatement-7-25', 1)]",Dissection
mockito,5,['singleLine'],['varTyChange'],mockito-5,"[('CatchClause-3-0', 1)]",Equal
mockito,6,"['copyPaste', 'wrongMethodRef', 'wrongVarRef']","['mcParValChange', 'objInstAdd', 'varReplMc']",mockito-6,"[('ReturnStatement-10-0', 12), ('ReturnStatement-10-1', 3), ('MethodDeclaration-2-1', 1)]",Equal
mockito,8,"['singleLine', 'wrapsIf']",['condBranIfAdd'],mockito-8,"[('IfStatement-6-24', 1)]",Dissection
mockito,20,['wrongVarRef'],"['assignAdd', 'assignExpChange', 'mcAdd', 'mcRepl', 'objInstAdd', 'varAdd', 'varReplVar']",mockito-20,"[('ExpressionStatement-5-39', 1)]",Equal
mockito,21,"['condBlockOthersAdd', 'condBlockRetAdd']","['assignAdd', 'condBranIfAdd', 'exThrowsAdd', 'loopAdd', 'mcAdd', 'mcRepl', 'mdAdd', 'mdModChange', 'mdParAdd', 'mdRen', 'retBranchAdd', 'retExpChange', 'retRem', 'varAdd']",mockito-21,"[('ReturnStatement-4-0', 10), ('ReturnStatement-2-0', 3)]",Equal
mockito,23,"['condBlockOthersAdd', 'missNullCheckP']","['assignAdd', 'assignRem', 'condBranIfAdd', 'mcAdd', 'mdAdd', 'objInstAdd', 'objInstRem', 'retExpChange', 'tyAdd', 'varModChange', 'varTyChange']",mockito-23,"[('FieldDeclaration-6-0', 4), ('ExpressionStatement-2-0', 3), ('FieldDeclaration-3-3', 2), ('MethodDeclaration-17-4', 2), ('FieldDeclaration-6-10', 1), ('ReturnStatement-3-4', 1)]",Fixminer
mockito,28,"['singleLine', 'wrapsMethod']","['assignAdd', 'mcAdd', 'varAdd']",mockito-28,"[('ExpressionStatement-5-1', 2), ('VariableDeclarationStatement-5-5', 1)]",Equal
mockito,25,[],"['assignRem', 'mcAdd', 'mcParAdd', 'mcParValChange', 'mcRem', 'mcRepl', 'mdAdd', 'mdOverride', 'mdParAdd', 'mdParRem', 'objInstAdd', 'retExpChange', 'varRem']",mockito-25,"[('ReturnStatement-4-0', 10)]",Fixminer
mockito,27,[],"['assignExpChange', 'mcAdd', 'mcRem', 'objInstRem', 'varRem']",mockito-27,"[('VariableDeclarationStatement-12-8', 1)]",Fixminer
mockito,26,"['constChange', 'singleLine']",['mcParValChange'],mockito-26,"[('ExpressionStatement-4-4', 3)]",Dissection
mockito,31,[],"['assignAdd', 'mcAdd', 'retExpChange', 'varAdd']",mockito-31,"[('VariableDeclarationStatement-10-0', 3)]",Fixminer
mockito,33,"['condBlockOthersAdd', 'condBlockRetAdd', 'missNullCheckN']","['assignAdd', 'condBranIfAdd', 'loopAdd', 'mcAdd', 'retBranchAdd', 'retRem', 'varAdd']",mockito-33,"[('ReturnStatement-2-2', 7), ('ReturnStatement-2-0', 3)]",Dissection
mockito,35,"['copyPaste', 'wrongMethodRef']","['mcAdd', 'mcRepl', 'retExpChange']",mockito-35,"[('ReturnStatement-4-0', 10), ('ReturnStatement-12-3', 2)]",Equal
joda-time,5,"['condBlockExcAdd', 'expLogicMod', 'wrongVarRef']","['assignAdd', 'assignExpChange', 'assignRem', 'condBranIfAdd', 'condExpMod', 'exThrowsAdd', 'mcAdd', 'mcParValChange', 'mcRem', 'objInstAdd', 'varAdd', 'varReplVar']",joda-time-5,"[('ExpressionStatement-5-20', 2)]",Dissection
joda-time,3,"['copyPaste', 'wrapsIf']",['condBranIfAdd'],joda-time-3,"[('IfStatement-6-15', 10), ('IfStatement-6-16', 2)]",Equal
joda-time,4,"['singleLine', 'wrongVarRef']","['mcParSwap', 'mcParValChange', 'objInstMod', 'varReplVar']",joda-time-4,"[('VariableDeclarationStatement-5-49', 1)]",Dissection
joda-time,6,"['condBlockExcAdd', 'condBlockOthersAdd', 'copyPaste']","['assignAdd', 'condBranIfAdd', 'condBranIfElseAdd', 'exThrowsAdd', 'mcAdd', 'objInstAdd', 'varAdd']",joda-time-6,"[('IfStatement-54-0', 2), ('IfStatement-12-7', 1)]",Dissection
joda-time,11,[],"['mcRem', 'mdAdd', 'mdOverride', 'objInstMod', 'retBranchAdd']",joda-time-11,"[('FieldDeclaration-3-3', 2)]",Fixminer
joda-time,13,"['condBlockOthersAdd', 'expArithMod', 'wrapsIfElse']","['assignAdd', 'assignExpChange', 'condBranIfAdd', 'condBranIfElseAdd', 'mcAdd', 'varAdd']",joda-time-13,"[('VariableDeclarationStatement-7-4', 5)]",Dissection
joda-time,17,"['condBlockRetAdd', 'expArithMod', 'expLogicMod', 'unwrapMethod']","['assignAdd', 'assignExpChange', 'condBranIfAdd', 'condBranIfElseAdd', 'condExpMod', 'mcAdd', 'mcRem', 'retBranchAdd', 'retRem', 'varAdd', 'varRem']",joda-time-17,"[('VariableDeclarationStatement-8-21', 4), ('VariableDeclarationStatement-7-27', 2), ('VariableDeclarationStatement-6-6', 1), ('IfStatement-5-20', 1)]",Equal
joda-time,20,"['condBlockOthersAdd', 'condBlockRetAdd', 'missNullCheckN', 'missNullCheckP']","['assignAdd', 'condBranIfAdd', 'mcAdd', 'mcRem', 'retBranchAdd', 'retRem', 'varAdd']",joda-time-20,"[('ExpressionStatement-6-2', 2), ('ReturnStatement-4-10', 1), ('VariableDeclarationStatement-5-1', 1)]",Dissection
joda-time,19,"['expLogicMod', 'singleLine']",['condExpMod'],joda-time-19,"[('IfStatement-3-1', 4)]",Dissection
joda-time,21,"['condBlockOthersAdd', 'missNullCheckN', 'wrapsIf', 'wrongVarRef']","['assignAdd', 'condBranIfAdd', 'condExpMod', 'loopAdd', 'mcAdd', 'mcParValChange', 'mcRem', 'varAdd']",joda-time-21,"[('VariableDeclarationStatement-6-8', 1)]",Dissection
joda-time,22,[],"['assignAdd', 'mcAdd', 'mcRepl', 'varAdd']",joda-time-22,"[('ExpressionStatement-7-1', 2), ('ExpressionStatement-8-80', 1), ('ConstructorInvocation-4-0', 1)]",Fixminer
joda-time,23,['constChange'],"['mcAdd', 'mcParValChange', 'mcRem']",joda-time-23,"[('ExpressionStatement-4-3', 5), ('ExpressionStatement-5-65', 4), ('ExpressionStatement-6-20', 1)]",Fixminer
joda-time,26,"['copyPaste', 'wrongMethodRef']","['mcParAdd', 'mcRepl', 'retExpChange']",joda-time-26,"[('ReturnStatement-4-0', 10), ('VariableDeclarationStatement-5-2', 2)]",Equal
